# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from wemopy.internal import rules_pb2 as rules__pb2


class ServiceManagerStub(object):
    """TODO: Rename service to something more descriptive - i.e. Wanemd
    Interface exported by the server
    Wanemd Rules RPC
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListRule = channel.unary_unary(
                '/wanemd.ServiceManager/ListRule',
                request_serializer=rules__pb2.WanemdRequest.SerializeToString,
                response_deserializer=rules__pb2.WanemdResponse.FromString,
                )
        self.CreateRule = channel.unary_unary(
                '/wanemd.ServiceManager/CreateRule',
                request_serializer=rules__pb2.WanemdRequest.SerializeToString,
                response_deserializer=rules__pb2.WanemdResponse.FromString,
                )
        self.UpdateRule = channel.unary_unary(
                '/wanemd.ServiceManager/UpdateRule',
                request_serializer=rules__pb2.WanemdRequest.SerializeToString,
                response_deserializer=rules__pb2.WanemdResponse.FromString,
                )
        self.DeleteRule = channel.unary_unary(
                '/wanemd.ServiceManager/DeleteRule',
                request_serializer=rules__pb2.WanemdRequest.SerializeToString,
                response_deserializer=rules__pb2.WanemdResponse.FromString,
                )
        self.EnableRule = channel.unary_unary(
                '/wanemd.ServiceManager/EnableRule',
                request_serializer=rules__pb2.WanemdRequest.SerializeToString,
                response_deserializer=rules__pb2.WanemdResponse.FromString,
                )
        self.DisableRule = channel.unary_unary(
                '/wanemd.ServiceManager/DisableRule',
                request_serializer=rules__pb2.WanemdRequest.SerializeToString,
                response_deserializer=rules__pb2.WanemdResponse.FromString,
                )
        self.ListAllRules = channel.unary_unary(
                '/wanemd.ServiceManager/ListAllRules',
                request_serializer=rules__pb2.WanemdRequest.SerializeToString,
                response_deserializer=rules__pb2.WanemdResponse.FromString,
                )
        self.DeleteAllRules = channel.unary_unary(
                '/wanemd.ServiceManager/DeleteAllRules',
                request_serializer=rules__pb2.WanemdRequest.SerializeToString,
                response_deserializer=rules__pb2.WanemdResponse.FromString,
                )
        self.Reset = channel.unary_unary(
                '/wanemd.ServiceManager/Reset',
                request_serializer=rules__pb2.WanemdRequest.SerializeToString,
                response_deserializer=rules__pb2.WanemdResponse.FromString,
                )
        self.Stop = channel.unary_unary(
                '/wanemd.ServiceManager/Stop',
                request_serializer=rules__pb2.WanemdRequest.SerializeToString,
                response_deserializer=rules__pb2.WanemdResponse.FromString,
                )
        self.Start = channel.unary_unary(
                '/wanemd.ServiceManager/Start',
                request_serializer=rules__pb2.WanemdRequest.SerializeToString,
                response_deserializer=rules__pb2.WanemdResponse.FromString,
                )
        self.Restart = channel.unary_unary(
                '/wanemd.ServiceManager/Restart',
                request_serializer=rules__pb2.WanemdRequest.SerializeToString,
                response_deserializer=rules__pb2.WanemdResponse.FromString,
                )
        self.UpdateConfiguration = channel.unary_unary(
                '/wanemd.ServiceManager/UpdateConfiguration',
                request_serializer=rules__pb2.WanemdConfiguration.SerializeToString,
                response_deserializer=rules__pb2.WanemdResponse.FromString,
                )
        self.GetConfiguration = channel.unary_unary(
                '/wanemd.ServiceManager/GetConfiguration',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=rules__pb2.WanemdConfiguration.FromString,
                )


class ServiceManagerServicer(object):
    """TODO: Rename service to something more descriptive - i.e. Wanemd
    Interface exported by the server
    Wanemd Rules RPC
    """

    def ListRule(self, request, context):
        """Lists the specific details of a rule identified by `WanemdRequest.rule_id`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRule(self, request, context):
        """Creates a new filter rule based on the values passed in by `WanemdRequest.rule`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRule(self, request, context):
        """Updates a rule identified by `Rule.id` ith the values passed in `WanemdRequest.rule`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRule(self, request, context):
        """Deletes a rule identified by `WanemdRequest.rule_id`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnableRule(self, request, context):
        """Enables a rule identified by `WanemdRequest.rule_id`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableRule(self, request, context):
        """Disables a rule identified by `WanemdRequest.rule_id`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAllRules(self, request, context):
        """Lists all rules on the system
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAllRules(self, request, context):
        """Deletes all filter rules on the system and restores the default rule
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reset(self, request, context):
        """Resets wanemd to the default state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Disables all wanem functions putting the system into a bridged state with no imparements or shaping
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Start(self, request, context):
        """Enables all wanem functions returning the system to the configured state with full imparement and shaping enforcement
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Restart(self, request, context):
        """Restarts the wanemd service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateConfiguration(self, request, context):
        """Provides an updated wanemd configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConfiguration(self, request, context):
        """Gets wanemd configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServiceManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListRule': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRule,
                    request_deserializer=rules__pb2.WanemdRequest.FromString,
                    response_serializer=rules__pb2.WanemdResponse.SerializeToString,
            ),
            'CreateRule': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRule,
                    request_deserializer=rules__pb2.WanemdRequest.FromString,
                    response_serializer=rules__pb2.WanemdResponse.SerializeToString,
            ),
            'UpdateRule': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRule,
                    request_deserializer=rules__pb2.WanemdRequest.FromString,
                    response_serializer=rules__pb2.WanemdResponse.SerializeToString,
            ),
            'DeleteRule': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRule,
                    request_deserializer=rules__pb2.WanemdRequest.FromString,
                    response_serializer=rules__pb2.WanemdResponse.SerializeToString,
            ),
            'EnableRule': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableRule,
                    request_deserializer=rules__pb2.WanemdRequest.FromString,
                    response_serializer=rules__pb2.WanemdResponse.SerializeToString,
            ),
            'DisableRule': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableRule,
                    request_deserializer=rules__pb2.WanemdRequest.FromString,
                    response_serializer=rules__pb2.WanemdResponse.SerializeToString,
            ),
            'ListAllRules': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAllRules,
                    request_deserializer=rules__pb2.WanemdRequest.FromString,
                    response_serializer=rules__pb2.WanemdResponse.SerializeToString,
            ),
            'DeleteAllRules': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAllRules,
                    request_deserializer=rules__pb2.WanemdRequest.FromString,
                    response_serializer=rules__pb2.WanemdResponse.SerializeToString,
            ),
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=rules__pb2.WanemdRequest.FromString,
                    response_serializer=rules__pb2.WanemdResponse.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=rules__pb2.WanemdRequest.FromString,
                    response_serializer=rules__pb2.WanemdResponse.SerializeToString,
            ),
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=rules__pb2.WanemdRequest.FromString,
                    response_serializer=rules__pb2.WanemdResponse.SerializeToString,
            ),
            'Restart': grpc.unary_unary_rpc_method_handler(
                    servicer.Restart,
                    request_deserializer=rules__pb2.WanemdRequest.FromString,
                    response_serializer=rules__pb2.WanemdResponse.SerializeToString,
            ),
            'UpdateConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateConfiguration,
                    request_deserializer=rules__pb2.WanemdConfiguration.FromString,
                    response_serializer=rules__pb2.WanemdResponse.SerializeToString,
            ),
            'GetConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConfiguration,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=rules__pb2.WanemdConfiguration.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'wanemd.ServiceManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServiceManager(object):
    """TODO: Rename service to something more descriptive - i.e. Wanemd
    Interface exported by the server
    Wanemd Rules RPC
    """

    @staticmethod
    def ListRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wanemd.ServiceManager/ListRule',
            rules__pb2.WanemdRequest.SerializeToString,
            rules__pb2.WanemdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wanemd.ServiceManager/CreateRule',
            rules__pb2.WanemdRequest.SerializeToString,
            rules__pb2.WanemdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wanemd.ServiceManager/UpdateRule',
            rules__pb2.WanemdRequest.SerializeToString,
            rules__pb2.WanemdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wanemd.ServiceManager/DeleteRule',
            rules__pb2.WanemdRequest.SerializeToString,
            rules__pb2.WanemdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnableRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wanemd.ServiceManager/EnableRule',
            rules__pb2.WanemdRequest.SerializeToString,
            rules__pb2.WanemdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wanemd.ServiceManager/DisableRule',
            rules__pb2.WanemdRequest.SerializeToString,
            rules__pb2.WanemdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAllRules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wanemd.ServiceManager/ListAllRules',
            rules__pb2.WanemdRequest.SerializeToString,
            rules__pb2.WanemdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAllRules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wanemd.ServiceManager/DeleteAllRules',
            rules__pb2.WanemdRequest.SerializeToString,
            rules__pb2.WanemdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wanemd.ServiceManager/Reset',
            rules__pb2.WanemdRequest.SerializeToString,
            rules__pb2.WanemdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wanemd.ServiceManager/Stop',
            rules__pb2.WanemdRequest.SerializeToString,
            rules__pb2.WanemdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wanemd.ServiceManager/Start',
            rules__pb2.WanemdRequest.SerializeToString,
            rules__pb2.WanemdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Restart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wanemd.ServiceManager/Restart',
            rules__pb2.WanemdRequest.SerializeToString,
            rules__pb2.WanemdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wanemd.ServiceManager/UpdateConfiguration',
            rules__pb2.WanemdConfiguration.SerializeToString,
            rules__pb2.WanemdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wanemd.ServiceManager/GetConfiguration',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            rules__pb2.WanemdConfiguration.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
