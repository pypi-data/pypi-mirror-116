# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['py_models_parser', 'py_models_parser.parsers']

package_data = \
{'': ['*']}

install_requires = \
['parsimonious>=0.8.1,<0.9.0']

entry_points = \
{'console_scripts': ['pmp = py_models_parser.cli:main']}

setup_kwargs = {
    'name': 'py-models-parser',
    'version': '0.6.0',
    'description': 'Parser for Different Python Models (Pydantic, Enums, ORMs: Tortoise, SqlAlchemy, GinoORM, PonyORM, Pydal tables) to extract information about columns(attrs), model, table args,etc in one format.',
    'long_description': '\nPy-Models-Parser\n----------------\n\n\n.. image:: https://img.shields.io/pypi/v/py-models-parser\n   :target: https://img.shields.io/pypi/v/py-models-parser\n   :alt: badge1\n \n.. image:: https://img.shields.io/pypi/l/py-models-parser\n   :target: https://img.shields.io/pypi/l/py-models-parser\n   :alt: badge2\n \n.. image:: https://img.shields.io/pypi/pyversions/py-models-parser\n   :target: https://img.shields.io/pypi/pyversions/py-models-parser\n   :alt: badge3\n \n.. image:: https://github.com/xnuinside/py-models-parser/actions/workflows/main.yml/badge.svg\n   :target: https://github.com/xnuinside/py-models-parser/actions/workflows/main.yml/badge.svg\n   :alt: workflow\n\n\nIt\'s as second Parser that done by me, first is a https://github.com/xnuinside/simple-ddl-parser for SQL DDL with different dialects.\n\nPy-Models-Parser can parse & extract information from models & table definitions:\n\n\n* Sqlalchemy ORM (https://docs.sqlalchemy.org/en/14/orm/),\n* Gino ORM (https://python-gino.org/),\n* Tortoise ORM (https://tortoise-orm.readthedocs.io/en/latest/),\n* Encode ORM (https://github.com/encode/orm)\n* Django ORM Model (https://docs.djangoproject.com/en/3.2/topics/db/queries/),\n* Pydantic (https://pydantic-docs.helpmanual.io/),\n* Python Enum (https://docs.python.org/3/library/enum.html),\n* Pony ORM (https://ponyorm.org/),\n* Piccolo ORM models (https://piccolo-orm.readthedocs.io/en/latest/piccolo/schema/defining.html),\n* Pydal Tables definitions (http://www.web2py.com/books/default/chapter/29/06/the-database-abstraction-layer#The-DAL-A-quick-tour),\n* Python Dataclasses (https://docs.python.org/3/library/dataclasses.html),\n* pure Python Classes (https://docs.python.org/3/tutorial/classes.html#class-objects)\n\nNumber of supported models will be increased, check \'TODO\' section, if you want to have support of different models types - please open the issue.\n\nPy-Models-Parser written with PEG parser and it\'s python implementation - parsimonious. It\'s pretty new and I did not cover all possible test cases, so if you will have an issue  - please just open an issue in this case with example, I will fix it as soon as possible.\n\nPy-Models-Parser take as input different Python code with Models and provide output in standard form:\n\n.. code-block:: python\n\n\n       [\n           \'name\': \'ModelName\',\n           \'parents\': [\'BaseModel\'], # class parents that defined in (), for example: `class MaterialType(str, Enum):` parents - str, Enum\n           \'attrs\':\n       {\n           \'type\': \'integer\',\n           \'name\': \'attr_name\',\n           \'default\': \'default_value\',\n           \'properties\': {\n               ...\n           }\n       },\n       \'properties\': {\n           \'table_name\': ...\n       }\n       ]\n\nFor ORM models \'attrs\' contains Columns of course.\n\n3 keys - \'type\', \'name\', \'default\' exists in parse result \'attrs\' of all Models\n\'properties\' key contains additional information for attribut or column depend on Model type, for example, in ORM models it can contains \'foreign_key\' key if this column used ForeignKey, or \'server_default\' if it is a SqlAlchemy model or GinoORM.\n\nModel level \'properties\' contains information relative to model, for example, if it ORM model - table_name\n\nNOTE: it\'s is a text parser, so it don\'t import or load your code, parser work with source code as text, not objects in Python. So to run parser you DO NOT NEED install dependencies for models, that you tries to parse - only models.\n\nHow to install\n--------------\n\n.. code-block:: bash\n\n\n       pip install py-models-parser\n\nHow to use\n----------\n\nLibrary detect automaticaly that type of models you tries to parse. You can check a lot of examples in test/ folder on the GitHub\n\n\n#. You can parse models from python string:\n\n.. code-block:: python\n\n\n   from py_models_parser import parse\n\n   models_str =  """from gino import Gino\n\n   db = Gino()\n\n\n   class OrderItems(db.Model):\n\n       __tablename__ = \'order_items\'\n\n       product_no = db.Column(db.Integer(), db.ForeignKey(\'products.product_no\'), ondelete="RESTRICT", primary_key=True)\n       order_id = db.Column(db.Integer(), db.ForeignKey(\'orders.order_id\'), ondelete="CASCADE", primary_key=True)\n       type = db.Column(db.Integer(), db.ForeignKey(\'types.type_id\'), ondelete="RESTRICT", onupdate="CASCADE")\n\n       """\n   result = parse(models_str)\n\n\n#. Parse models from file:\n\n.. code-block:: python\n\n\n       from py_models_parser import parse_from_file\n\n\n       file_path = "path/to/your/models.py"\n       # for example: tests/data/dataclass_defaults.py\n       result = parse_from_file(file_path)\n\n\n#. Parse models from file with command line\n\n.. code-block:: bash\n\n\n       pmp path_to_models.py \n\n       # for example: pmp tests/data/dataclass_defaults.py\n\nOutput from cli can be dumped in \'output_models.json\' file - use flag \'-d\' \'--dump\' if you want to change target file name, provide it after argument like \'-d target_file.json\'\n\n.. code-block:: bash\n\n\n       # example how to dump output from cli\n\n       pmp path_to_models.py -d target_file.json\n\nOutput example\n^^^^^^^^^^^^^^\n\nYou can find a lot of output examples in tests - https://github.com/xnuinside/py-models-parser/tree/main/tests\n\nFor model from point 1 (above) library will produce the result:\n\n.. code-block:: python\n\n\n       [\n           {\n               "attrs": [\n                   {\n                       "default": None,\n                       "name": "product_no",\n                       "properties": {\n                           "foreign_key": "\'products.product_no\'",\n                           "ondelete": \'"RESTRICT"\',\n                           "primary_key": "True",\n                       },\n                       "type": "db.Integer()",\n                   },\n                   {\n                       "default": None,\n                       "name": "order_id",\n                       "properties": {\n                           "foreign_key": "\'orders.order_id\'",\n                           "ondelete": \'"CASCADE"\',\n                           "primary_key": "True",\n                       },\n                       "type": "db.Integer()",\n                   },\n                   {\n                       "default": None,\n                       "name": "type",\n                       "properties": {\n                           "foreign_key": "\'types.type_id\'",\n                           "ondelete": \'"RESTRICT"\',\n                           "onupdate": \'"CASCADE"\',\n                       },\n                       "type": "db.Integer()",\n                   },\n               ],\n               "name": "OrderItems",\n               "parents": ["db.Model"],\n               "properties": {"table_name": "\'order_items\'"},\n           }\n       ]\n\nTODO: in next Release\n---------------------\n\n\n#. Add more tests for supported models\n#. Add support for SQLAlchemy Core Tables\n\nChangelog\n---------\n\n**v0.6.0**\nFeatures:\n\n\n#. Added support for Encode ORM models https://github.com/encode/orm\n#. Added support for Piccolo ORM models https://piccolo-orm.readthedocs.io/en/latest/piccolo/schema/defining.html\n\n**v0.5.1**\nFixes:\n\n\n#. Sometimes multiple parents names in "parents" output was joined in one string - fixed.\n\n**v0.5.0**\n\n\n#. Added base support for Pydal tables definitions\n#. Added support for python list syntax like []\n\n**v0.4.0**\n\n\n#. return tuples (multiple values) is parsed correctly now\n#. symbols like ``*&^%$#!±~``\\ §<>` now does not cause any errors\n#. classes without any args does not cause an error anymore\n\n**v0.3.0**\n\n\n#. Added cli - ``pmp`` command with args -d, --dump  \n#. Added support for simple Django ORM models\n#. Added base support for pure Python Classes\n\n**v0.2.0**\n\n\n#. Added support for Dataclasses\n#. Added parse_from_file method\n#. Added correct work with types with comma inside, like: Union[dict, list] or Union[dict, list, tuple, anything] \n\n**v0.1.1**\n\n\n#. Added base parser logic & tests for Pydantic, Enums, SQLAlchemy Models, GinoORM models, TortoiseORM models \n',
    'author': 'Iuliia Volkova',
    'author_email': 'xnuinside@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/xnuinside/py-models-parser',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
