# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2021 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 20.0.463
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from deepsecurity.models.policy_info import PolicyInfo  # noqa: F401,E501


class PolicyMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'migrate_to': 'PolicyInfo',
        'migrate_from': 'PolicyInfo'
    }

    attribute_map = {
        'migrate_to': 'migrateTo',
        'migrate_from': 'migrateFrom'
    }

    def __init__(self, migrate_to=None, migrate_from=None):  # noqa: E501
        """PolicyMapping - a model defined in Swagger"""  # noqa: E501

        self._migrate_to = None
        self._migrate_from = None
        self.discriminator = None

        if migrate_to is not None:
            self.migrate_to = migrate_to
        if migrate_from is not None:
            self.migrate_from = migrate_from

    @property
    def migrate_to(self):
        """Gets the migrate_to of this PolicyMapping.  # noqa: E501

        The policy on the Workload Security.  # noqa: E501

        :return: The migrate_to of this PolicyMapping.  # noqa: E501
        :rtype: PolicyInfo
        """
        return self._migrate_to

    @migrate_to.setter
    def migrate_to(self, migrate_to):
        """Sets the migrate_to of this PolicyMapping.

        The policy on the Workload Security.  # noqa: E501

        :param migrate_to: The migrate_to of this PolicyMapping.  # noqa: E501
        :type: PolicyInfo
        """

        self._migrate_to = migrate_to

    @property
    def migrate_from(self):
        """Gets the migrate_from of this PolicyMapping.  # noqa: E501

        The policy on this Deep Security Manager.  # noqa: E501

        :return: The migrate_from of this PolicyMapping.  # noqa: E501
        :rtype: PolicyInfo
        """
        return self._migrate_from

    @migrate_from.setter
    def migrate_from(self, migrate_from):
        """Sets the migrate_from of this PolicyMapping.

        The policy on this Deep Security Manager.  # noqa: E501

        :param migrate_from: The migrate_from of this PolicyMapping.  # noqa: E501
        :type: PolicyInfo
        """

        self._migrate_from = migrate_from

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

