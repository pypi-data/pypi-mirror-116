# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2021 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 20.0.463
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EndpointBasecampAgentDeploymentScript(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'platform': 'str',
        'script_body': 'str'
    }

    attribute_map = {
        'platform': 'platform',
        'script_body': 'scriptBody'
    }

    def __init__(self, platform=None, script_body=None):  # noqa: E501
        """EndpointBasecampAgentDeploymentScript - a model defined in Swagger"""  # noqa: E501

        self._platform = None
        self._script_body = None
        self.discriminator = None

        if platform is not None:
            self.platform = platform
        if script_body is not None:
            self.script_body = script_body

    @property
    def platform(self):
        """Gets the platform of this EndpointBasecampAgentDeploymentScript.  # noqa: E501

        Platform type for Endpoint Basecamp Agent deployment.  # noqa: E501

        :return: The platform of this EndpointBasecampAgentDeploymentScript.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this EndpointBasecampAgentDeploymentScript.

        Platform type for Endpoint Basecamp Agent deployment.  # noqa: E501

        :param platform: The platform of this EndpointBasecampAgentDeploymentScript.  # noqa: E501
        :type: str
        """
        allowed_values = ["linux", "windows"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"  # noqa: E501
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def script_body(self):
        """Gets the script_body of this EndpointBasecampAgentDeploymentScript.  # noqa: E501

        Endpoint Basecamp Agent deployment script.  # noqa: E501

        :return: The script_body of this EndpointBasecampAgentDeploymentScript.  # noqa: E501
        :rtype: str
        """
        return self._script_body

    @script_body.setter
    def script_body(self, script_body):
        """Sets the script_body of this EndpointBasecampAgentDeploymentScript.

        Endpoint Basecamp Agent deployment script.  # noqa: E501

        :param script_body: The script_body of this EndpointBasecampAgentDeploymentScript.  # noqa: E501
        :type: str
        """

        self._script_body = script_body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EndpointBasecampAgentDeploymentScript, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EndpointBasecampAgentDeploymentScript):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

