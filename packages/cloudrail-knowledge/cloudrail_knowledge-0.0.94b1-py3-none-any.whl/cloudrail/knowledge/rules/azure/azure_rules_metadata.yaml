templates:
  - azure_defender_enabled_description: Cloudrail will review the Security Center subscription pricing configuration in your environment. If the tier is not set to “Standard” for {0} resources, Cloudrail will highlight it as a violation.
  - azure_defender_enabled_human_readable_logic: Cloudrail will review the Security Center Subscription Pricing configuration within your Azure subscription and Terraform plan to ensure Azure Defender is enabled (“Standard” tier pricing) for {0}.
  - azure_defender_enabled_console_remediation_steps: Follow the guide at https://docs.microsoft.com/en-us/azure/security-center/enable-azure-defender in order to enable Azure Defender for {0}.
  - azure_defender_enabled_console_remediation_steps_tf: For the azurerm_security_center_subscription_pricing resource, set the tier argument to “Standard” and ensure the resource_type argument contains the value “{0}”.

rules_metadata:
  - rule_id: non_car_azure_database_public_access
    cloud_provider: azure
    name: Ensure Azure database server is not set to be public
    severity: major
    description: Cloudrail will review settings of all of the database servers configured in Azure through the
      "Azure Database for …" functionality.
      If a database server is set to be public, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review all of the Azure database servers declared in Terraform, and those already
      existing in the Azure environment, to determine if any of them is set to have public access enabled.
    console_remediation_steps: Follow the guides at https://docs.microsoft.com/en-us/azure/azure-sql/database/connectivity-settings,
      https://docs.microsoft.com/en-us/azure/postgresql/howto-deny-public-network-access,
      https://docs.microsoft.com/en-us/azure/mysql/howto-deny-public-network-access,
      https://docs.microsoft.com/en-us/azure/mariadb/howto-deny-public-network-access,
      in order to disable public network access for the database.
    iac_remediation_steps: In the database server resource (such as azurerm_postgresql_server, azurerm_mssql_server, etc.),
      set public_network_access_enabled to false.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - database



  - rule_id: non_car_unused_network_security_group
    cloud_provider: azure
    name: Ensure no unused Network Security Group exists in the subscription
    severity: medium
    description:
      Network Security Groups should be maintained carefully, in order to provide network access for desired entities.
      Having unused Network Security Groups is giving the opportunity to accidentally assign vulnerable network access to your resources.
    human_readable_logic:
      Cloudrail will review all of the Network Security Groups defined in your subscription.
      For each Network Security Group which is present, but not attached to any network interfaces, Cloudrail will raise a violation.
    console_remediation_steps: Delete the unused Network Security Group from your Azure Portal.
    iac_remediation_steps: Remove the unused azurerm_network_security_group resource, from your TF template.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - compute

  - rule_id: non_car_function_app_enforces_ftps_only
    cloud_provider: azure
    name: Ensure Function App enforces FTPS only
    severity: medium
    description: Cloudrail will review the Function App configuration in your environment.
      If a function app has FTP enabled and it is not enforcing FTPS only,
      Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Function Apps configuration within your Azure subscription and
      Terraform plan to check if they are enforcing FTPS only or if they have FTP disabled.
    console_remediation_steps: Follow the guide at
      https://docs.microsoft.com/en-us/azure/app-service/deploy-ftp?tabs=portal#enforce-ftps in order to select
      FTPS Only in FTP state.
    iac_remediation_steps: For the azurerm_function_app resource, set the site_config block with
      ftps_state argument set to "FtpsOnly".
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - compute

  - rule_id: non_car_ftps_should_be_required_in_web_app
    cloud_provider: azure
    name: FTPS should be required in your Web App
    severity: medium
    description: Cloudrail will review the App service configuration in your environment. If an app has FTP enabled and is not enforcing FTPS only, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the App services configuration within your Azure subscription and Terraform plan to check if they are enforcing FTPS only or if they have FTP disabled.
    console_remediation_steps: Follow the guide at https://docs.microsoft.com/en-us/azure/app-service/deploy-ftp?tabs=portal#enforce-ftps in order to disable FTP or select FTPS Only in FTP state.
    iac_remediation_steps: For the azurerm_app_service resource, set the site_config block with ftps_state argument set to “FtpsOnly” to enforce FTPS or to “Disabled” if you want to disable FTP.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - compute

  - rule_id: non_car_authentication_enabled_in_function_app
    cloud_provider: azure
    name: Ensure authentication is enabled in Function Apps
    severity: medium
    description: Cloudrail will review the Function Apps configuration in your environment.
      If a function does not have authentication enabled, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Function Apps configuration within your Azure subscription and
      Terraform plan to check if authentication is enabled.
    console_remediation_steps: Follow the guide at
      https://docs.microsoft.com/en-us/azure/azure-functions/functions-how-to-use-azure-function-app-settings?tabs=portal#auth
      in order to enable authentication for the Function App.
    iac_remediation_steps: For the azurerm_function_app resource,
      set the auth_settings block with enabled argument set to true.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - compute


  - rule_id: non_car_vpn_gateway_disallow_basic_sku
    cloud_provider: azure
    name: Ensure Azure VPN gateways don't use the basic SKU
    severity: medium
    description:
      The Azure VPN Gateway has different SKUs to choose from, each with different capabilities.
      The "basic" one is lacking many features and will generally not support anything beyond the smallest
      load.
    human_readable_logic:
      Cloudrail will review all of the VPN gateways in your Azure environment. If any uses the "basic" SKU, Cloudrail will raise a violation.
    console_remediation_steps: Change the SKU of the VPN gateway by deleting the old one and creating a new one with a different SKU.
    remediation_steps_tf: Change the 'sku' in the azurerm_virtual_network_gateway to a value that is not "Basic".
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - network

  - rule_id: non_car_auto_provisioning_log_analytics_agent_enabled
    cloud_provider: azure
    name: Ensure Auto provisioning of the Log Analytics agent is enabled on your subscription
    severity: medium
    description: Cloudrail will review the Security Center Auto Provisioning configuration in your environment.
      If the auto provision of the Log Analytics agent is not set to On, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Function Apps configuration within your Azure subscription and
      Terraform plan to check if authentication is enabled.
    console_remediation_steps: Follow the guide at
      https://docs.microsoft.com/en-us/azure/security-center/security-center-enable-data-collection#enable-auto-provisioning-of-the-log-analytics-agent-and-extensions-
      in order to enable the automatic provision of the Log Analytics agent.
    remediation_steps_tf: For the azurerm_security_center_auto_provisioning resource, set the auto_provision argument to “On”.
    rule_type: non_context_aware
    security_layer: logging
    resource_type:
      - security_services

  - rule_id: non_car_client_certificates_required_in_function_app
    cloud_provider: azure
    name: Ensure client certificates are required in Function App
    severity: medium
    description: Cloudrail will review the Function Apps configuration in your environment.
      If a function does not have client certificates mode set to Required, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Function Apps configuration within your Azure subscription and
      Terraform plan to ensure client certificates are required.
    console_remediation_steps: Follow the guide at
      https://docs.microsoft.com/en-us/azure/app-service/app-service-web-configure-tls-mutual-auth in order to
      require client certificates for Function App.
    iac_remediation_steps: For the azurerm_function_app resource,
      set the client_cert_mode argument to "Required".
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - compute

  - rule_id: non_car_http_latest_in_function_app
    cloud_provider: azure
    name: Ensure HTTP version is the latest in Function Apps
    severity: medium
    description:
      Cloudrail will review the App Service (Function Apps) configuration in your environment.
      If an app does not use the latest HTTP version, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Function Apps configuration within your Azure subscription and
      Cloudrail will review the App Service configuration within your Azure subscription and Terraform plan to check
      if latest http version is configured for web apps.
    console_remediation_steps:
      Follow the guide at <https://azure.microsoft.com/en-us/blog/announcing-http-2-support-in-azure-app-service/>
      in order to configure HTTP version for the web app.
    remediation_steps_tf:
      For the azurerm_function_app resource, set the site_config block with http2_enabled argument set to true.
    rule_type: non_context_aware
    security_layer: iam
    resource_type:
      - compute

  - rule_id: non_car_function_app_using_latest_tls_version
    cloud_provider: azure
    name: Ensure Function App is using the latest Azure supported TLS version (1.2)
    severity: major
    description:
      Cloudrail will review the Function Apps configuration in your environment.
      If a function does not use the latest Azure supported TLS version (1.2), Cloudrail will highlight it as a violation.
    human_readable_logic:
      Cloudrail will review the Function Apps configuration within your Azure subscription
      and Terraform plan to ensure they are using the latest Azure supported TLS version (1.2).
    console_remediation_steps:
      Follow the guide at <https://docs.microsoft.com/en-us/azure/app-service/configure-ssl-bindings#enforce-tls-versions>
      in order to set the Minimum TLS Version to 1.2 for the Function App.
    remediation_steps_tf:
      For the azurerm_function_app resource, in site_config block, set the min_tls_version argument to “1.2”.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - compute

  - rule_id: non_car_email_notification_high_severity_alerts_enabled
    cloud_provider: azure
    name: Ensure Email notification for high severity alerts is enabled
    severity: medium
    description: Cloudrail will review the Security Center configuration in your environment. If email notification of high severity alerts is not enabled, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Security Center Contact configuration within your Azure subscription and Terraform plan to ensure email notifications of security alerts is enabled.
    console_remediation_steps: Follow the guide at https://docs.microsoft.com/en-us/azure/security-center/security-center-provide-security-contact-details in order to enable email notifications for security alerts.
    remediation_steps_tf: For the azurerm_security_center_contact resource, set the alert_notifications argument to true.
    rule_type: non_context_aware
    security_layer: logging
    resource_type:
      - security_services

  - rule_id: non_car_postgresql_server_enforcing_ssl
    cloud_provider: azure
    name: Ensure PostgreSQL Servers are enforcing SSL
    severity: major
    description:
      Cloudrail will review the PostgreSQL servers configuration in your environment.
      If a server is not enforcing SSL connections, Cloudrail will highlight it as a violation.
    human_readable_logic:
      Cloudrail will review the PostgreSQL Servers configuration within your Azure subscription and Terraform plan to ensure that SSL enforcement is enabled.
    console_remediation_steps:
      Follow the guide at <https://docs.microsoft.com/en-us/azure/postgresql/concepts-ssl-connection-security> in order to enable “Enforce SSL connection” for the PostgreSQL server.
    iac_remediation_steps: For the azurerm_postgresql_server resource, set the ssl_enforcement_enabled argument to true.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - database

  - rule_id: non_car_mysql_server_enforcing_ssl
    cloud_provider: azure
    name: Ensure MySQL Servers are enforcing SSL
    severity: major
    description:
      Cloudrail will review the MySQL servers configuration in your environment.
      If a server is not enforcing SSL connections, Cloudrail will highlight it as a violation.
    human_readable_logic:
      Cloudrail will review the MySQL Servers configuration within your Azure subscription and Terraform plan to ensure that SSL enforcement is enabled.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/mysql/howto-configure-ssl#step-3--enforcing-ssl-connections-in-azure> in order to enable “Enforce SSL connection” for the MySQL server.
    iac_remediation_steps: For the azurerm_mysql_server resource, set the ssl_enforcement_enabled argument to true.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - database

  - rule_id: non_car_authentication_enabled_in_web_app
    cloud_provider: azure
    name: Ensure authentication is enabled in Web Apps
    severity: medium
    description: Cloudrail will review the App Service (Web Apps) configuration in your environment. If an app does not have authentication enabled, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the App Service configuration within your Azure subscription and Terraform plan to check if authentication is enabled for web apps.
    console_remediation_steps: Follow the guide at https://docs.microsoft.com/en-us/azure/app-service/overview-authentication-authorization in order to enable authentication for the web app.
    iac_remediation_steps: For the azurerm_app_service resource, set the auth_settings block with enabled argument set to true.
    rule_type: non_context_aware
    security_layer: iam
    resource_type:
      - compute

  - rule_id: non_car_storage_account_default_network_access_denied
    cloud_provider: azure
    name: Ensure Storage Account has default network access denied
    severity: medium
    description: 
      Cloudrail will review the Storage Accounts configuration in your environment. If the account network rules are not denying default network access, Cloudrail will highlight it as a violation.
    human_readable_logic: 
      Cloudrail will review the Storage Account configuration within your Azure subscription and Terraform plan to ensure that its network rules (either defined in-line or using azurerm_storage_account_network_rules resource) are denying default network access.
    console_remediation_steps: 
      Follow the guide at <https://docs.microsoft.com/en-us/azure/storage/common/storage-network-security?tabs=azure-portal#change-the-default-network-access-rule> in order to deny access by default.
    iac_remediation_steps: 
      For the azurerm_storage_account resource, in the network_rules block, set the default_action argument to “Deny”. 
      If azurerm_storage_account_network_rules resource is being used, set the default_action argument to “Deny”.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - storage

  - rule_id: non_car_function_app_accessible_only_via_https
    cloud_provider: azure
    name: Ensure Function App is only accessible via HTTPS
    severity: medium
    description: Cloudrail will review the Function Apps configuration in your environment. If a function does not have HTTPS only enabled, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Function Apps configuration within your Azure subscription and Terraform plan to check if HTTPS only is enabled.
    console_remediation_steps: Follow the guide at https://docs.microsoft.com/en-us/azure/app-service/configure-ssl-bindings#enforce-https in order to configured HTTPS Only for the Function App.
    iac_remediation_steps: For the azurerm_function_app resource, set the https_only argument to true.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - compute

  - rule_id: non_car_web_app_accessible_only_via_https
    cloud_provider: azure
    name: Ensure Web App is only accessible via HTTPS
    severity: medium
    description: Cloudrail will review the Web Apps configuration in your environment. If a function does not have HTTPS only enabled, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Web Apps configuration within your Azure subscription and Terraform plan to check if HTTPS only is enabled.
    console_remediation_steps: Follow the guide at https://docs.microsoft.com/en-us/azure/app-service/configure-ssl-bindings#enforce-https in order to configured HTTPS Only for the Web App.
    iac_remediation_steps: For the azurerm_app_service resource, set the https_only argument to true.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - compute

  - rule_id: non_car_sql_servers_auditing_enabled
    cloud_provider: azure
    name: Ensure SQL servers have auditing enabled
    severity: medium
    description:
      Having ‘auditing’ enabled on SQL servers would help to track database activities.
      Cloudrail will review the MS SQL servers configuration in your environment and if a server does not have an auditing policy configured,
      Cloudrail will highlight it as a violation.
    human_readable_logic:
      Cloudrail will review the SQL servers configuration within your Azure subscription and Terraform plan to ensure that auditing is enabled.
    console_remediation_steps:
      Follow the guide at <https://docs.microsoft.com/en-us/azure/azure-sql/database/auditing-overview> in order to configure auditing for SQL servers.
    iac_remediation_steps:
      For the azurerm_mssql_server resource, add the extended_auditing_policy block and set the retention_in_days argument to 0 (unlimited) or a value greater than 90 and set the log_monitoring_enabled argument to true if you wish to send audit logs to Azure Monitor. If using the azurerm_mssql_server_extended_auditing_policy resource, create it with the same previous arguments.
    rule_type: non_context_aware
    security_layer: logging
    resource_type:
      - database

  - rule_id: non_car_web_app_using_latest_tls_version
    cloud_provider: azure
    name: Ensure Web App is using the latest Azure supported TLS version (1.2)
    severity: major
    description: Cloudrail will review the Web Apps configuration in your environment. If an app does not use the latest Azure supported TLS version (1.2), Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Web Apps configuration within your Azure subscription and Terraform plan to ensure they are using the latest Azure supported TLS version (1.2).
    console_remediation_steps: Follow the guide at https://docs.microsoft.com/en-us/azure/app-service/configure-ssl-bindings#enforce-tls-versions in order to set the Minimum TLS Version to 1.2 for the Web App.
    iac_remediation_steps: For the azurerm_app_service resource, in site_config block, set the min_tls_version argument to 1.2.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - compute

  - rule_id: non_car_storage_account_secure_transfer
    cloud_provider: azure
    name: Ensure Storage Account requires secure transfer
    severity: medium
    description: Cloudrail will review the Storage Accounts configuration in your environment. If an account is not requiring secure transfer (HTTPS), Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Storage Account configuration within your Azure subscription and Terraform plan to ensure that secure transfer is enabled.
    console_remediation_steps: Follow the guide at https://docs.microsoft.com/en-us/azure/storage/common/storage-require-secure-transfer in order to enable secure transfer.
    iac_remediation_steps: For the azurerm_storage_account resource, set the enable_https_traffic_only argument to true.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - storage

  - rule_id: non_car_azure_defender_for_container_registries_enabled
    cloud_provider: azure
    name: Ensure Azure Defender for container registries is enabled
    severity: major
    description:
      template: azure_defender_enabled_description
      params:
        - Container Registries
    human_readable_logic:
      template: azure_defender_enabled_human_readable_logic
      params:
        - Container Registries
    console_remediation_steps:
      template: azure_defender_enabled_console_remediation_steps
      params:
        - Container Registries
    remediation_steps_tf:
      template: azure_defender_enabled_console_remediation_steps_tf
      params:
        - ContainerRegistry
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - security_services

  - rule_id: non_car_key_vault_purge_protection_enabled
    cloud_provider: azure
    name: Ensure Key Vaults have purge protection enabled
    severity: medium
    description: Cloudrail will review the Key Vaults configuration in your environment. If a vault does not have purge protection enabled, Cloudrail will highlight it as a violation. Cloudrail does not access the contents of the vaults themselves.
    human_readable_logic: Cloudrail will review the Key Vault configuration within your Azure subscription and Terraform plan to ensure purge protection is enabled.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/key-vault/general/soft-delete-overview> in order to enable purge protection for a vault.
    remediation_steps_tf: For the azurerm_key_vault resource, set the purge_protection_enabled argument to true.
    rule_type: non_context_aware
    security_layer: disaster_recovery
    resource_type:
      - security_services

  - rule_id: non_car_azure_defender_for_azure_sql_servers_enabled
    cloud_provider: azure
    name: Ensure Azure Defender for Azure SQL Database servers is enabled
    severity: major
    description:
      template: azure_defender_enabled_description
      params:
        - Sql Servers
    human_readable_logic:
      template: azure_defender_enabled_human_readable_logic
      params:
        - Sql Servers
    console_remediation_steps:
      template: azure_defender_enabled_console_remediation_steps
      params:
        - Sql Servers
    remediation_steps_tf:
      template: azure_defender_enabled_console_remediation_steps_tf
      params:
        - SqlServers
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - security_services

  - rule_id: non_car_azure_defender_for_kubernetes_enabled
    cloud_provider: azure
    name: Ensure Azure Defender for Kubernetes is enabled
    severity: major
    description:
      template: azure_defender_enabled_description
      params:
        - Kubernetes
    human_readable_logic:
      template: azure_defender_enabled_human_readable_logic
      params:
        - Kubernetes
    console_remediation_steps:
      template: azure_defender_enabled_console_remediation_steps
      params:
        - Kubernetes
    remediation_steps_tf:
      template: azure_defender_enabled_console_remediation_steps_tf
      params:
        - KubernetesService
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - security_services

  - rule_id: non_car_azure_defender_for_storage_enabled
    cloud_provider: azure
    name: Ensure Azure Defender for Storage is enabled
    severity: major
    description:
      template: azure_defender_enabled_description
      params:
        - Storage
    human_readable_logic:
      template: azure_defender_enabled_human_readable_logic
      params:
        - Storage
    console_remediation_steps:
      template: azure_defender_enabled_console_remediation_steps
      params:
        - Storage
    remediation_steps_tf:
      template: azure_defender_enabled_console_remediation_steps_tf
      params:
        - StorageAccounts
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - security_services

  - rule_id: non_car_azure_defender_for_servers_enabled
    cloud_provider: azure
    name: Ensure Azure Defender for Servers is enabled
    severity: major
    description:
      template: azure_defender_enabled_description
      params:
        - Servers
    human_readable_logic:
      template: azure_defender_enabled_human_readable_logic
      params:
        - Servers
    console_remediation_steps:
      template: azure_defender_enabled_console_remediation_steps
      params:
        - Servers
    remediation_steps_tf:
      template: azure_defender_enabled_console_remediation_steps_tf
      params:
        - VirtualMachines
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - security_services
      
  - rule_id: car_key_vault_diagnostic_logs_enabled
    cloud_provider: azure
    name: Ensure Key Vault has diagnostic logs enabled
    severity: medium
    description: Cloudrail will review the Key Vault configuration in your environment. If a vault does not have diagnostic logs enabled, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Security Center Contact configuration within your Azure subscription and Terraform plan to ensure email notifications of security alerts is enabled.
    console_remediation_steps: Follow the guide at https://docs.microsoft.com/en-us/azure/key-vault/general/alert in order to enable diagnostic logs for Key Vault.
    remediation_steps_tf: Create an azurerm_monitor_diagnostic_setting resource and set the target_resource_id to the Key Vault ID. In the log block, set the enabled argument to true. In log block, retention_policy block, set enabled argument to true and days argument to 0 (indefinitely) or a value greater than or equal to 365.
    rule_type: context_aware
    security_layer: logging
    resource_type:
      - security_services

  - rule_id: non_car_storage_account_network_access_trusted_azure_services
    cloud_provider: azure
    name: Ensure Storage Account is allowing network access to trusted Azure services
    severity: medium
    description: 
      Cloudrail will review the Storage Accounts configuration in your environment. If the account network rules are not allowing access to trusted Azure services, Cloudrail will highlight it as a violation.
    human_readable_logic: 
      Cloudrail will review the Storage Account configuration within your Azure subscription and Terraform plan to ensure that trusted Azure services have network access to the account.
    console_remediation_steps: 
      Follow the guide at <https://docs.microsoft.com/en-us/azure/storage/common/storage-network-security?tabs=azure-portal#grant-access-to-trusted-azure-services> in order to grant access to trusted Azure services.
    iac_remediation_steps: 
      For the azurerm_storage_account resource, in the network_rules block, set the bypass argument to “AzureServices”. If azurerm_storage_account_network_rules resource is being used, set the bypass argument to “AzureServices”.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - storage
