templates:
  - azure_defender_enabled_description: Cloudrail will review the Security Center subscription pricing configuration in your environment. If the tier is not set to “Standard” for {0} resources, Cloudrail will highlight it as a violation.
  - azure_defender_enabled_human_readable_logic: Cloudrail will review the Security Center Subscription Pricing configuration within your Azure subscription and Terraform plan to ensure Azure Defender is enabled (“Standard” tier pricing) for {0}.
  - azure_defender_enabled_console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/security-center/enable-azure-defender> in order to enable Azure Defender for {0}.
  - azure_defender_enabled_console_remediation_steps_tf: For the azurerm_security_center_subscription_pricing resource, set the tier argument to “Standard” and ensure the resource_type argument contains the value “{0}”.

  - vm_not_publicly_accessible_name: Ensure VM is not publicly accessible via {0}
  - vm_not_publicly_accessible_description: Having Virtual Machines accessible publicly from the Internet on known administrative or management ports can be problematic. Cloudraill will attempt to determine if any of the virtual machines are accessible directly at their public IP address, or indirectly via NAT, at {0}’s port. If they are, a violation will be raised.
  - vm_not_publicly_accessible_human_readable_name: Cloudrail will review the Virtual Machines configuration within your Azure subscription and Terraform plan. For each virtual machine, it will check the attached network interfaces that are reachable from the Internet, either using a public IP or an inbound NAT rule. It will ensure that the Network Security Groups of the NIC and the subnet are not allowing inbound TCP access to destination port {0}z ({1}, “*”, or a port range containing {1}) for any source IP address prefix (“*”, “Internet”).
  - vm_not_publicly_accessible_console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/virtual-network/manage-network-security-group> in order to modify the Network Security Group rule to restrict {0} access from the Internet by setting a specific source IP address.
  - vm_not_publicly_accessible_iac_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/virtual-network/manage-network-security-group> in order to modify the Network Security Group rule to restrict {0} access from the Internet by setting a specific source IP address.

rules_metadata:
  - rule_id: non_car_azure_database_public_access
    cloud_provider: azure
    name: Ensure Azure database server is not set to be public
    severity: major
    description: Cloudrail will review settings of all of the database servers configured in Azure through the
      "Azure Database for …" functionality.
      If a database server is set to be public, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review all of the Azure database servers declared in Terraform, and those already
      existing in the Azure environment, to determine if any of them is set to have public access enabled.
    console_remediation_steps: Follow the guides at <https://docs.microsoft.com/en-us/azure/azure-sql/database/connectivity-settings>,
      <https://docs.microsoft.com/en-us/azure/postgresql/howto-deny-public-network-access>,
      <https://docs.microsoft.com/en-us/azure/mysql/howto-deny-public-network-access>,
      <https://docs.microsoft.com/en-us/azure/mariadb/howto-deny-public-network-access>,
      in order to disable public network access for the database.
    iac_remediation_steps: In the database server resource (such as azurerm_postgresql_server, azurerm_mssql_server, etc.),
      set public_network_access_enabled to false.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - database

  - rule_id: CKV_AZURE_1
    cloud_provider: azure
    name: Ensure Azure Instance authenticates using SSH keys
    severity: major
    description: Azure instances should require SSH public key authentication instead of password
      authentication. Using basic authentication leaves instances vulnerable to brute-force or
      password guessing attacks.
    human_readable_logic: Cloudrail uses checkov to review the Azure instances configuration and
      ensure they are requiring SSH public key instead of password authentication. This rule will
      only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-portal>
      in order to create a virtual machine with SSH public key authentication instead of password authentication.
    iac_remediation_steps: For the azurerm_linux_virtual_machine resource, remove admin_password argument and set
      disable_password_authentication to true. In admin_ssk_key configuration block, set username and public_key parameters.
    rule_type: non_context_aware
    security_layer: iam
    resource_type:
      - compute

  - rule_id: CKV_AZURE_4
    cloud_provider: azure
    name: Ensure AKS logging to Azure Monitoring is configured
    severity: major
    description: Azure AKS metrics should be collected in order enable real-time analysis of unknown
      behaviors in AKS clusters.
    human_readable_logic: Cloudrail uses checkov to review the Azure AKS clusters configuration and
      ensure logging is enabled. This rule will only review Terraform content and not any resources
      in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/azure-monitor/containers/container-insights-enable-existing-clusters#enable-directly-from-aks-cluster-in-the-portal>
      in order to enable monitoring for an AKS cluster.
    iac_remediation_steps: For the azurerm_kubernetes_cluster resource, in addon_profile configuration block,
      add oms_agent block with enabled argument set to true and log_analytics_workspace_id argument set to
      the ID of the Log Analytics Workspace which the OMS Agent should send data to.
    rule_type: non_context_aware
    security_layer: logging
    resource_type:
      - kubernetes

  - rule_id: CKV_AZURE_5
    cloud_provider: azure
    name: Ensure RBAC is enabled on AKS clusters
    severity: medium
    description: Azure AKS clusters with RBAC enabled allow fine-grained control over cluster resources and access control
      based on roles.
    human_readable_logic: Cloudrail uses checkov to review the Azure AKS clusters configuration and
      ensure role_based_access_control is enabled. This rule will only review Terraform content and not any resources in
      your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal>
      in order to create an AKS cluster with RBAC authentication enabled.
    iac_remediation_steps: For the azurerm_kubernetes_cluster resource, add a role_based_access_control block
      with enabled argument set to true.
    rule_type: non_context_aware
    security_layer: iam
    resource_type:
      - kubernetes

  - rule_id: CKV_AZURE_6
    cloud_provider: azure
    name: Ensure Azure AKS has an API Server Authorized IP Ranges enabled
    severity: major
    description: The Azure AKS API server should only be accessible from a limited set of IP ranges.
    human_readable_logic: Cloudrail uses checkov to review the Azure AKS clusters configuration and ensure
      api_server_authorized_ip_ranges argument is configured. This rule will only review Terraform content and not any
      resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/aks/api-server-authorized-ip-ranges#update-disable-and-find-authorized-ip-ranges-using-azure-portal>
      in order to configure the authorized IP ranges that will have access to the AKS API server.
    iac_remediation_steps: For the azurerm_kubernetes_cluster resource, ensure the api_server_authorized_ip_ranges resource
      is set to a range of authorized IP addresses.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - kubernetes

  - rule_id: CKV_AZURE_7
    cloud_provider: azure
    name: Ensure AKS cluster has Network Policy configured
    severity: medium
    description: Having a Network Policy configured on AKS clusters will allow to determine which Pods and Services can
      access one another.
    human_readable_logic: Cloudrail uses checkov to review the Azure AKS cluster configuration and ensure it has a
      network_profile configuration block. This rule will only review Terraform content and not any resources in your
      cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/aks/use-network-policies>
      in order to create an AKS cluster with a Network Policy.
    iac_remediation_steps: For the azurerm_kubernetes_cluster resource resource, ensure the network_profile configuration
      block is configured.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - kubernetes

  - rule_id: CKV_AZURE_8
    cloud_provider: azure
    name: Ensure AKS cluster has Kube Dashboard disabled
    severity: medium
    description: It is recommended to disable the Kubernetes Dashboard for AKS clusters in order to prevent exposing it as
      an additional attack vector.
    human_readable_logic: Cloudrail uses checkov to review the Azure AKS cluster configuration and ensure the Kubernetes
      dashboard is disabled. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/aks/kubernetes-dashboard#disable-the-kubernetes-dashboard>
      in order to disable the Kubernetes dashboard.
    iac_remediation_steps: For the azurerm_kubernetes_cluster resource, in the addon_profile block, ensure the kube_dashboard
      block has the enabled argument set to false.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - kubernetes

  - rule_id: CKV_AZURE_11
    cloud_provider: azure
    name: Ensure SQL Databases do not allow ingress from 0.0.0.0/0
    severity: major
    description: SQL Server firewall rules should restrict the IP address range that can connect to the databases in order
      to reduce the attack surface.
    human_readable_logic: Cloudrail uses checkov to review the SQL firewall rules and ensure they are not allowing access
      from any IP. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/azure-sql/database/firewall-configure#use-the-azure-portal-to-manage-server-level-ip-firewall-rules>
      in order to configured the SQL server firewall rules with specific Start and End IPs.
    iac_remediation_steps: For the azurerm_mariadb_firewall_rule, azurerm_mariadb_firewall_rule, azurerm_postgresql_firewall_rule,
      and azurerm_mysql_firewall_rule resources, set start_ip_address and end_ip_address arguments to a value other than
      0.0.0.0 and 255.255.255.255.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - firewall

  - rule_id: CKV_AZURE_14
    cloud_provider: azure
    name: Ensure App Service web app redirects all HTTP traffic to HTTPS
    severity: medium
    description: Web apps should enforce HTTPS-only traffic to increase security. HTTPS uses SSL/TLS protocol to protect
      data in transit.
    human_readable_logic: Cloudrail uses checkov to review the App Service web apps configuration and ensure all HTTP traffic
      is being redirected to HTTPS. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/app-service/configure-ssl-bindings#enforce-https>
      in order to enable HTTP redirect to HTTPS by setting the parameter HTTPS Only to ON.
    iac_remediation_steps: For the azurerm_app_service resource, set the https_only argument to true.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - compute

  - rule_id: CKV_AZURE_15
    cloud_provider: azure
    name: Ensure App Service web app is using the latest version of TLS encryption
    severity: medium
    description: Web apps should use the latest version of TLS encryption protocol (TSL 1.2) which is the recommended value
      by industry standards.
    human_readable_logic: Cloudrail uses checkov to review the App Service web apps configuration and ensure it is using
      TLS 1.2 version. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/app-service/configure-ssl-bindings#enforce-tls-versions>
      in order to enforce the use of the latest TLS version by setting the Minimum TLS Version to 1.2.
    iac_remediation_steps: For the azurerm_app_service resource, in site_conf block, set the min_tls_version argument to 1.2.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - compute

  - rule_id: CKV_AZURE_25
    cloud_provider: azure
    name: Ensure SQL Servers have 'Threat Detection Types' set to 'All'
    severity: major
    description: Enabling all Threat Detection Types will protect SQL Servers against SQL injection attacks, database
      vulnerabilities, and others.
    human_readable_logic: Cloudrail uses checkov to review the Security Alert Policies for SQL Servers and ensure there
      are not disabled alerts. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/azure-sql/database/threat-detection-overview>
      in order to enable all Threat Detection Types for the SQL Server.
    iac_remediation_steps: For the azurerm_mssql_server_security_alert_policy resource, ensure disabled_alerts arguments is empty.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - database

  - rule_id: CKV_AZURE_28
    cloud_provider: azure
    name: Ensure MySQL servers have Enforce SSL Connection enabled
    severity: major
    description: Data exchanged between clients and Azure MySQL servers should be protected in transit to avoid
      man-in-the-middle attacks.
    human_readable_logic: Cloudrail uses checkov to review MySQL Servers configuration in order to ensure SSL enforcement
      is enabled. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/mysql/howto-configure-ssl#step-3--enforcing-ssl-connections-in-azure>
      in order to enable Enforce SSL connection.
    iac_remediation_steps: For the azurerm_mysql_server resource, set the ssl_enforcement_enabled argument to true.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - database

  - rule_id: CKV_AZURE_29
    cloud_provider: azure
    name: Ensure PostgreSQL servers have Enforce SSL Connection enabled
    severity: major
    description: Data exchanged between clients and Azure PostgreSQL servers should be protected in transit to avoid
      man-in-the-middle attacks.
    human_readable_logic: Cloudrail uses checkov to review PostgreSQL Servers configuration in order to ensure SSL enforcement
      is enabled. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/postgresql/concepts-ssl-connection-security#configure-enforcement-of-tls>
      in order to enable Enforce SSL connection.
    iac_remediation_steps: For the azurerm_postgresql_server resource, set the ssl_enforcement_enabled argument to true.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - database

  - rule_id: CKV_AZURE_33
    cloud_provider: azure
    name: Ensure Storage logging is enabled for Queue service for read, write and delete requests
    severity: major
    description: The Azure Queue Storage sevice stores messages that may be read by any client with access to the storage
      account. It is recommended to enable the logging for read, write, and delete events in order to monitor user activity.
    human_readable_logic: Cloudrail uses checkov to review the Storate Account configuration in order to ensure logging is
      enabled for read, write, and delete events. This rule will only review Terraform content and not any resources in
      your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/storage/queues/monitor-queue-storage?tabs=azure-portal>
      in order to enable StorageRead, StorageWrite, and StorageDelete.
    iac_remediation_steps: For the azurerm_storage_account resource, in the queue_properties, logging block,
      set delete/read/write arguments to true.
    rule_type: non_context_aware
    security_layer: logging
    resource_type:
      - storage

  - rule_id: CKV_AZURE_34
    cloud_provider: azure
    name: Ensure Public Access Level is set to Private for blob containers
    severity: medium
    description: Public read access to a container and its blobs should not be allowed in order to prevent sensitive
      information exposure.
    human_readable_logic: Cloudrail uses checkov to review the Storage Account configuration and ensure the container access
      type is set to private. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/storage/blobs/anonymous-read-access-configure?tabs=portal#set-the-public-access-level-for-a-container>
      in order to change the public access level for the container at set it to 'No public read access'.
    iac_remediation_steps: For the azurerm_storage_container resource, set the container_access_type argument to private.
    rule_type: non_context_aware
    security_layer: iam
    resource_type:
      - storage

  - rule_id: CKV_AZURE_35
    cloud_provider: azure
    name: Ensure default network access rule for Storage Accounts is set to deny
    severity: medium
    description: In order to add an extra layer of protection to Storage Accounts, network access should be restricted by
      default in order to only allow access from a selected groups of IPs.
    human_readable_logic: Cloudrail uses checkov to review the Storage Account configuration and ensure the default action
      for its network rules is set to Deny. This rule will only review Terraform content and not any resources in your
      cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/storage/common/storage-network-security?tabs=azure-portal#change-the-default-network-access-rule>
      in order to change the default network access rule.
    iac_remediation_steps: For the azurerm_storage_account resource with network_rules block, set the default_action to Deny.
      For azurerm_storage_account_network_rules resources, ensure the default_action argument is set to Deny.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - storage

  - rule_id: CKV_AZURE_41
    cloud_provider: azure
    name: Ensure that the expiration date is set on all Key Vault Secrets
    severity: medium
    description: Key Vaul Secrets should have an expiration date in order to ensure they cannot be used beyond their lifetime.
    human_readable_logic: Cloudrail uses checkov to review the Key Vault Secrets configuration and ensure they have an
      expiration date set. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/key-vault/secrets/about-secrets>
      in order to set an expiration date for Key Vault secrets.
    iac_remediation_steps: For the azurerm_key_vault_secret resource, set a value for the expiration_date argument.
    rule_type: non_context_aware
    security_layer: iam
    resource_type:
      - key_mgmt

  - rule_id: CKV_AZURE_42
    cloud_provider: azure
    name: Ensure Key Vault is recoverable
    severity: major
    description: Azure Key Vault resource should be protected in order to prevent permanent deletion/purging of its keys,
      secrets, and certificates.
    human_readable_logic: Cloudrail uses checkov to review the Key Vault configuration and ensure it has purge protection
      and soft deletion enabled. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/key-vault/general/key-vault-recovery?tabs=azure-portal>
      in order to enable soft delete and purge protection for the Key Vault.
    iac_remediation_steps: For the azurerm_key_vault resource, set soft_delete_enabled and purge_protection_enabled
      arguments to true.
    rule_type: non_context_aware
    security_layer: disaster_recovery
    resource_type:
      - key_mgmt

  - rule_id: CKV_AZURE_44
    cloud_provider: azure
    name: Ensure Storage Account is using the latest version of TLS encryption
    severity: medium
    description: Azure Storage Account should use the latest version of TLS (1.2) in order to be compliant with industry
      standards.
    human_readable_logic: Cloudrail uses checkov to review the Storage Account configuration and ensure it is enforcing the
      use of TLS 1.2. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/storage/common/transport-layer-security-configure-minimum-version?tabs=portal#configure-the-minimum-tls-version-for-a-storage-account>
      in order to configure the minimum TLS version for a storage account.
    iac_remediation_steps: For the azurerm_storage_account resource, set the min_tls_version argument to TLS1_2.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - storage

  - rule_id: CKV_AZURE_45
    cloud_provider: azure
    name: Ensure that no credentials are exposed in VM custom_data
    severity: major
    description: It is not recommended to include credentials in the VM custom data field in order to avoid its exposure
      to unauthorized parties. Azure Key Vault should be used to manage credentials for VMs.
    human_readable_logic: Cloudrail uses checkov to review the virtual machine configuration and ensure it does not contain
      credentials in the custom data field. This rule will only review Terraform content and not any resources in your
      cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/security/fundamentals/data-encryption-best-practices>
      in order to implement best practices to pass credentials to Azure VMs.
    iac_remediation_steps: For the azurerm_virtual_machine resource, in the os_profile block, ensure custom_data argument
      does not include any credentials.
    rule_type: non_context_aware
    security_layer: iam
    resource_type:
      - compute

  - rule_id: CKV_AZURE_47
    cloud_provider: azure
    name: Ensure MariaDB servers have Enforce SSL Connection enabled
    severity: major
    description: Data exchanged between clients and Azure MariaDB servers should be protected in transit to avoid
      man-in-the-middle attacks.
    human_readable_logic: Cloudrail uses checkov to review Azure MariaDB server configuraion and ensure it is enforcing SSL connection.
      This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/mariadb/howto-configure-ssl> in
      order to enable SSL connection for MariaDB.
    iac_remediation_steps: For the azurerm_mariadb_server resource, set the ssl_enforcement_enabled argument to true.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - database

  - rule_id: CKV_AZURE_48
    cloud_provider: azure
    name: Ensure MariaDB servers have Public Network Access Enabled disabled
    severity: major
    description: MariaDB servers should only be accesible through private endpoints instead of public IPs in order to
      avoid its exposure to unauthorized parties.
    human_readable_logic: Cloudrail uses checkov to review Azure MariaDB server configuration and ensure it is not allowing
      public access. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/mariadb/howto-deny-public-network-access>
      in order to deny public network access to MariaDB servers.
    iac_remediation_steps: For the azurerm_mariadb_server resource, set the public_network_access_enabled argument to false.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - database

  - rule_id: CKV_AZURE_49
    cloud_provider: azure
    name: Ensure Azure Linux Scale Set does not use basic authentication
    severity: major
    description: Using SSH authentication instead of basic (username/password) authentication will protect against brute-force
      attacks.
    human_readable_logic: Cloudrail uses checkov to review Azure Linux Scale Set configuration and ensure it it not using
      basic authentication. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps:
    iac_remediation_steps: For the azurerm_linux_virtual_machine_scale_set resource, remove admin_password argument and set
      disable_password_authentication to true. In admin_ssk_key configuration block, set username and public_key parameters.
    rule_type: non_context_aware
    security_layer: iam
    resource_type:
      - compute

  - rule_id: CKV_AZURE_52
    cloud_provider: azure
    name: Ensure MSSQL is using the latest version of TLS encryption
    severity: medium
    description: Azure MSSQL should use the latest version of TLS (1.2) in order to be compliant with industry standards.
    human_readable_logic: Cloudrail uses checkov to review MSSQL server configuration and ensure it is requiring a minimum
      TLS version of 1.2. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/minimal-tls-version-configure>
      in order to set the minimum TLS version to 1.2.
    iac_remediation_steps: For the azurerm_mssql_server resource, set the minimum_tls_version argument to "1.2".
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - database

  - rule_id: CKV_AZURE_53
    cloud_provider: azure
    name: Ensure MySQL servers have Public Network Access Enabled disabled
    severity: major
    description: MySQL servers should only be accesible through private endpoints instead of public IPs in order to
      reduce its exposure to unauthorized parties. This rule will only review Terraform content and not any resources in
      your cloud environment.
    human_readable_logic: Cloudrail uses checkov to review MySQL server configuration and ensure it is not allowing public
      access. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/mysql/howto-deny-public-network-access>
      in order to deny public network access to MySQL servers.
    iac_remediation_steps: For the azurerm_mysql_server resource, set the public_network_access_enabled argument to false.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - database

  - rule_id: CKV_AZURE_54
    cloud_provider: azure
    name: Ensure MySQL is using the latest version of TLS encryption
    severity: medium
    description: Azure MySQL should use the latest version of TLS (1.2) in order to be compliant with industry standards.
    human_readable_logic: Cloudrail uses checkov to review MySQL server configuration and ensure it is requiring a minimum
      TLS version of 1.2. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/mysql/howto-tls-configurations>
      in order to set the minimum TLS version to 1.2.
    iac_remediation_steps: For the azurerm_mysql_server resource, set the ssl_minimal_tls_version_enforced argument to "TLS1_2".
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - database

  - rule_id: CKV_AZURE_59
    cloud_provider: azure
    name: Ensure that Storage Accounts protect data in transit
    severity: major
    description: Data exchanged between clients and Azure Storage Accounts should be encrypted in order to prevent malicious
      parties from intercepting it.
    human_readable_logic: Cloudrail uses checkov to review Storage Account configuration and ensure it is enforcing the use
      of HTTPS protocol. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at https://docs.microsoft.com/en-us/azure/storage/common/storage-require-secure-transfer
      in order to enable secure transfer for the Storage Account.
    iac_remediation_steps: For the azurerm_storage_account resource, set the enable_https_traffic_only argument to true.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - storage

  - rule_id: CKV_AZURE_64
    cloud_provider: azure
    name: Ensure Azure File Sync has Public Network Access disabled
    severity: medium
    description: Azure File Sync should only be accesible through private endpoints instead of public IPs in order to
      avoid its exposure to unauthorized parties.
    human_readable_logic: Cloudrail uses checkov to review Azure File Sync configuration and ensure it is not allowing
      public network access. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/storage/file-sync/file-sync-networking-endpoints?tabs=azure-portal>
      in order to disable public network access to Azure File Sync.
    iac_remediation_steps: For the azurerm_storage_sync resource, set the incoming_traffic_policy argument to AllowVirtualNetworksOnly.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - storage

  - rule_id: CKV_AZURE_68
    cloud_provider: azure
    name: Ensure PostgreSQL servers have Public Network Access disabled
    severity: major
    description: PostgreSQL servers should only be accesible through private endpoints instead of public IPs in order to
      avoid its exposure to unauthorized parties.
    human_readable_logic: Cloudrail uses checkov to review Azure PostgreSQL server configuration and ensure it is not allowing
      public network access. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/postgresql/howto-deny-public-network-access>
      in order to deny public network access to PostgreSQL servers.
    iac_remediation_steps: For the azurerm_postgresql_server resource, set the public_network_access_enabled argument to false.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - database

  - rule_id: CKV_AZURE_70
    cloud_provider: azure
    name: Ensure that Function apps is only accessible over HTTPS
    severity: medium
    description: In order to protect data in transit, Azure Function Apps should only use HTTPS transport protocol.
    human_readable_logic: Cloudrail uses checkov to review Azure Function Apps and ensure it is enforcing HTTPS traffic only.
      This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/azure-functions/security-concepts>
      in order to configure Azure Function Apps to use HTTPS only.
    iac_remediation_steps: For the azurerm_function_app resource, set the https_only argument to true.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - compute

  - rule_id: CKV_AZURE_72
    cloud_provider: azure
    name: Ensure that remote debugging is not enabled for App Services
    severity: major
    description: Remote debugging should be disabled for Azure App Services web apps in order to enhance security and
      protect from unauthorized access as this feature requires some inbound ports to be openened.
    human_readable_logic: Cloudrail uses checkov to review Azure App Services configuration and ensure the remote debugging
      feature is disabled. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/app-service/configure-common#configure-general-settings>
      in order to disable remote debugging for the App Service.
    iac_remediation_steps: For the azurerm_app_service resource, set the remote_debugging_enabled argument to false.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - compute

  - rule_id: CKV_AZURE_77
    cloud_provider: azure
    name: Ensure that UDP Services are restricted from the Internet
    severity: major
    description: UDP ports should not be exposed to the Internet in order to protect from DDoS amplification attacks that
      reflect spoofed UDP traffic from Azure VMs.
    human_readable_logic: Cloudrail uses checkov to review Network Security Groups configuration and ensure no UDP ports
      are open to the Internet. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/virtual-network/manage-network-security-group>
      in order to modify the Network Security Group and delete the rule that is exposing the UDP ports or restrict the
      Source IP addresses/CIDR ranges that can reach those UDP ports.
    iac_remediation_steps: For the azurerm_network_security_group resource, in security_rule block, and/or for azurerm_network_security_rule resource,
      delete the rules that are allowing inbound traffic to UDP ports or modify source_address_prefix to restrict which IP
      address can reach the UDP ports.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - firewall

  - rule_id: CKV_AZURE_89
    cloud_provider: azure
    name: Ensure Azure Cache for Redis has Public Network Access disabled
    severity: major
    description: Azure Cache for Redis should only be accesible through private endpoints instead of public IPs in order to
      avoid its exposure to unauthorized parties.
    human_readable_logic: Cloudrail uses checkov to review Azure Cache for Redis configuration and ensure it is not allowing
      public access. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/azure-cache-for-redis/cache-private-link>
      in order to disable public network access flag and use private endpoints instead.
    iac_remediation_steps: For the azurerm_redis_cache resource, set the public_network_access_enabled argument to false.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - database

  - rule_id: CKV_AZURE_94
    cloud_provider: azure
    name: Ensure that MySQL server enables geo-redundant backups
    severity: major
    description: Having MySQL database geo-redundant backups will allow you to restore your data to a different Azure region
      in case of a regional outage.
    human_readable_logic: Cloudrail uses checkov to review Azure MySQL server configuration and ensure geo-redundant backups
      are enabled. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/mysql/howto-restore-server-portal#set-backup-configuration>
      in order to enable the Geo-Redundant flag in Backup Redundancy Options.
    iac_remediation_steps: For the azurerm_mysql_server resource, set the geo_redundant_backup_enabled argument to true.
    rule_type: non_context_aware
    security_layer: disaster_recovery
    resource_type:
      - database

  - rule_id: CKV_AZURE_98
    cloud_provider: azure
    name: Ensure that Azure Container group is deployed into virtual network
    severity: medium
    description: By deploying container groups into an Azure Virtual Network, your containers can communicate securely with
      other resources in the virtual network.
    human_readable_logic: Cloudrail uses checkov to review Azure Container group configuration and ensure it is being deployed
      into a Virtual Network. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/container-instances/container-instances-vnet>
      in order to deploy Azure Container group into a virtual network.
    iac_remediation_steps: For the azurerm_container_group resource, set the network_profile_id argument to the Network
      profile ID for deploying to virtual network.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - compute

  - rule_id: CKV_AZURE_99
    cloud_provider: azure
    name: Ensure Cosmos DB accounts have restricted access
    severity: medium
    description: Access to Azure Cosmos DB accounts should be only granted to specific IP address ranges in order to avoid
      its exposure to unauthorized parties.
    human_readable_logic: Cloudrail uses checkov to review Azure Cosmos DB configuration and ensure it has public network
      access disabled, the virtual network filter is enabled, and a virtual network rule or ip range filter is configured.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/cosmos-db/how-to-configure-vnet-service-endpoint>
      and <https://docs.microsoft.com/en-us/azure/cosmos-db/how-to-configure-firewall> in order to restrict the access to
      Azure Cosmos DB.
    iac_remediation_steps: For the azurerm_cosmosdb_account resource, set the public_network_access_enabled argument to false,
      set is_virtual_network_filter_enabled argument to true, and set virtual_network rule argument or ip_range_filter argument.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - database

  - rule_id: CKV_AZURE_101
    cloud_provider: azure
    name: Ensure Azure Cosmos DB has Public Network Access disabled
    severity: major
    description: Azure Cosmos DB should only be accesible through private endpoints instead of public IPs in order to
      avoid its exposure to unauthorized parties.
    human_readable_logic: Cloudrail uses checkov to review Azure Cosmos DB configuration and ensure it is not allowing
      public access. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/cosmos-db/how-to-configure-private-endpoints#blocking-public-network-access-during-account-creation>
      in order to disable public network access for Cosmos DB account.
    iac_remediation_steps: For the azurerm_cosmosdb_account resource, set public_network_access_enabled argument to false.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - database

  - rule_id: CKV_AZURE_102
    cloud_provider: azure
    name: Ensure that PostgreSQL server enables geo-redundant backups
    severity: major
    description: Having PostgreSQL database geo-redundant backups will allow you to restore your data to a different Azure region
      in case of a regional outage.
    human_readable_logic: Cloudrail uses checkov to review Azure PostgreSQL server configuration and ensure geo-redundant backups
      are enabled. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/postgresql/howto-restore-server-portal#set-backup-configuration>
      in order to enable the Geo-Redundant flag in Backup Redundancy Options.
    iac_remediation_steps: For the azurerm_postgresql_server resource, set the geo_redundant_backup_enabled argument to true.
    rule_type: non_context_aware
    security_layer: disaster_recovery
    resource_type:
      - database

  - rule_id: CKV_AZURE_104
    cloud_provider: azure
    name: Ensure Azure Data factory has Public Network Access disabled
    severity: major
    description: Azure Data factory should only be accesible through private endpoints instead of public IPs in order to
      avoid its exposure to unauthorized parties.
    human_readable_logic: Cloudrail uses checkov to review Azure Data factory configuration and ensure it is not allowing
      public access. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/data-factory/data-factory-private-link?WT.mc_id=Portal-Microsoft_Azure_CreateUIDef#set-up-private-link-for-azure-data-factory>
      in order to disable the public endpoint for Data Factory.
    iac_remediation_steps: For the azurerm_data_factory resource, set public_network_enabled argument to false.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - database

  - rule_id: CKV_AZURE_106
    cloud_provider: azure
    name: Ensure Azure Event Grid Domain has Public Network Access disabled
    severity: major
    description: Azure Event Grid Domain should only be accesible through private endpoints instead of public IPs in order to
      avoid its exposure to unauthorized parties.
    human_readable_logic: Cloudrail uses checkov to review Azure Event Grid Domain configuration and ensure it is not allowing
      public access. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/event-grid/configure-firewall>
      in order to disable public network access.
    iac_remediation_steps: For the azurerm_eventgrid_domain resource, set the public_network_access_enabled argument to false.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - notification

  - rule_id: CKV_AZURE_107
    cloud_provider: azure
    name: Ensure that API management services use virtual networks
    severity: medium
    description: Deploying API Management inside a virtual network will allow to access Azure resource in a secure way without
      exposing traffic to the Internet.
    human_readable_logic: Cloudrail uses checkov to review Azure API Management configuration and ensure it is being deployed
      in a virtual network. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/api-management/api-management-using-with-vnet>
      in order to configure API Management with virtual networks.
    iac_remediation_steps: For the azurerm_api_management resource, set the virtual_network_configuration block and subnet_id argument.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - content_delivery

  - rule_id: CKV_AZURE_108
    cloud_provider: azure
    name: Ensure Azure IoT Hub has Public Network Access disabled
    severity: major
    description: Azure IoT Hub should only be accesible through private endpoints instead of public IPs in order to
      avoid its exposure to unauthorized parties.
    human_readable_logic: Cloudrail uses checkov to review Azure IoT Hub configuration and ensure it is not allowing
      public access. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-public-network-access>
      in order to set Allow public network access to Disabled.
    iac_remediation_steps: For the azurerm_iothub resource, set the public_network_access_enabled argument to false.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - queuing

  - rule_id: CKV_AZURE_109
    cloud_provider: azure
    name: Ensure that Key Vault only allows matched firewall rules
    severity: medium
    description: Key Vault's firewall prevents unauthorized traffic from reaching your key vault. By setting the default
      action to "deny", only matched ip rules or virtual network subnet ids will be passed.
    human_readable_logic: Cloudrail uses checkov to review Azure Key Vault configuration and ensure it has "deny" as default
      action. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/key-vault/general/network-security>
      in order to configure Key Vault firewall and change the default action to "deny".
    iac_remediation_steps: For the azurerm_key_vault resource, in the network_acls block, set default_action argument to "deny".
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - key_mgmt

  - rule_id: CKV_AZURE_110
    cloud_provider: azure
    name: Ensure that Key Vault enables purge protection
    severity: medium
    description: Purge protection is an optional Key Vault feature not enabled by default. Enabling purge protection will
      prevent a deleted vault or object to be purged until the retention period is passed.
    human_readable_logic: Cloudrail uses checkov to review Azure Key Vault and ensure purge protection is enabled.
      This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/key-vault/general/soft-delete-overview#purge-protection>
      in order to enable purge protection for the Key Vault.
    iac_remediation_steps: For the azurerm_key_vault resource, set the purge_protection_enabled argument to true.
    rule_type: non_context_aware
    security_layer: disaster_recovery
    resource_type:
      - key_mgmt

  - rule_id: CKV_AZURE_111
    cloud_provider: azure
    name: Ensure that Key Vault enables soft delete
    severity: medium
    description: Enabling the soft-delete feature will allow recovery of deleted vaults and objects by setting a retention
      period. This feature will prevent data loss due to accidental deletion of Key Vault and its objects.
    human_readable_logic: Cloudrail uses checkov to review Azure Key Vault and ensure soft-delete is enabled.
      This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/key-vault/general/key-vault-recovery?tabs=azure-portal>
      in order to enable soft-delete for the Azure Key Vault.
    iac_remediation_steps: For the azurerm_key_vault resource, set the soft_delete_enabled argument to true.
    rule_type: non_context_aware
    security_layer: disaster_recovery
    resource_type:
      - key_mgmt

  - rule_id: CKV_AZURE_113
    cloud_provider: azure
    name: Ensure MSSQL servers have Public Network Access disabled
    severity: major
    description: MSSQL servers should only be accesible through private endpoints instead of public IPs in order to
      reduce its exposure to unauthorized parties. This rule will only review Terraform content and not any resources in
      your cloud environment.
    human_readable_logic: Cloudrail uses checkov to review MSSQL server configuration and ensure it is not allowing public
      access. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/azure-sql/database/connectivity-settings>
      in order to disable public network access.
    iac_remediation_steps: For the azurerm_mssql_server resource, set public_network_access_enabled argument to false.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - database

  - rule_id: CKV_AZURE_115
    cloud_provider: azure
    name: Ensure that AKS enables private clusters
    severity: medium
    description: By using a private cluster, you can ensure network traffic between your API server and your node pools
      remains on the private network only, so no traffic is exposed to the Internet.
    human_readable_logic: Cloudrail uses checkov to review Azure AKS cluster configuration and ensure it has private cluster
      enabled. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/aks/private-clusters> in order to
      create private AKS clusters.
    iac_remediation_steps: For the azurerm_kubernetes_cluster resource, set the private_cluster_enabled to true.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - kubernetes

  - rule_id: CKV_AZURE_124
    cloud_provider: azure
    name: Ensure Azure Cognitive Search has Public Network Access disabled
    severity: medium
    description: Azure Cognitive Search should only be accesible through private endpoints instead of public IPs in order to
      avoid its exposure to unauthorized parties.
    human_readable_logic: Cloudrail uses checkov to review Azure Cognitive Search configuration and ensure it is not allowing
      public network access. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/search/service-configure-firewall>
      in order to disable the public endpoint for Cognitive Search.
    iac_remediation_steps: For the azurerm_search_service resource, set the public_network_access_enabled argument to false.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - storage

  - rule_id: CKV_AZURE_127
    cloud_provider: azure
    name: Ensure that MySQL server enables Threat detection policy
    severity: medium
    description: Enabling Threat detection for MySQL will allow to detect anomalous activities indicating unusual and potentially
      harmful attempts to access or exploit databases.
    human_readable_logic: Cloudrail uses checkov to review MySQL server configuration and ensure it has Threat detection policy
      enabled. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/mysql/howto-database-threat-protection-portal>
      in order to enable Threat protection.
    iac_remediation_steps: For the azurerm_mysql_server resource, in threat_detection_policy block, set enabled argument to true.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - database

  - rule_id: CKV_AZURE_128
    cloud_provider: azure
    name: Ensure that PostgreSQL server enables Threat detection policy
    severity: medium
    description: Enabling Threat detection for PostgreSQL will allow to detect anomalous activities indicating unusual and potentially
      harmful attempts to access or exploit databases.
    human_readable_logic: Cloudrail uses checkov to review PostgreSQL server configuration and ensure it has Threat detection policy
      enabled. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/postgresql/howto-database-threat-protection-portal>
      in order to enable Threat protection.
    iac_remediation_steps: For the azurerm_postgresql_server resource, in threat_detection_policy block, set enabled argument to true.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - database

  - rule_id: CKV_AZURE_129
    cloud_provider: azure
    name: Ensure that MariaDB server enables geo-redundant backups
    severity: major
    description: Having MariaDB database geo-redundant backups will allow you to restore your data to a different Azure region
      in case of a regional outage.
    human_readable_logic: Cloudrail uses checkov to review Azure MariaDB server configuration and ensure geo-redundant backups
      are enabled. This rule will only review Terraform content and not any resources in your cloud environment.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/mariadb/howto-restore-server-portal#set-backup-configuration>
      in order to enable the Geo-Redundant flag in Backup Redundancy Options.
    iac_remediation_steps: For the azurerm_mariadb_server resource, set the geo_redundant_backup_enabled to true.
    rule_type: non_context_aware
    security_layer: disaster_recovery
    resource_type:
      - database

  - rule_id: non_car_unused_network_security_group
    cloud_provider: azure
    name: Ensure no unused Network Security Group exists in the subscription
    severity: medium
    description:
      Network Security Groups should be maintained carefully, in order to provide network access for desired entities.
      Having unused Network Security Groups is giving the opportunity to accidentally assign vulnerable network access to your resources.
    human_readable_logic:
      Cloudrail will review all of the Network Security Groups defined in your subscription.
      For each Network Security Group which is present, but not attached to any network interfaces, Cloudrail will raise a violation.
    console_remediation_steps: Delete the unused Network Security Group from your Azure Portal.
    iac_remediation_steps: Remove the unused azurerm_network_security_group resource, from your TF template.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - compute

  - rule_id: non_car_function_app_enforces_ftps_only
    cloud_provider: azure
    name: Ensure Function App enforces FTPS only
    severity: medium
    description: Cloudrail will review the Function App configuration in your environment.
      If a function app has FTP enabled and it is not enforcing FTPS only,
      Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Function Apps configuration within your Azure subscription and
      Terraform plan to check if they are enforcing FTPS only or if they have FTP disabled.
    console_remediation_steps: Follow the guide at
      <https://docs.microsoft.com/en-us/azure/app-service/deploy-ftp?tabs=portal#enforce-ftps> in order to select
      FTPS Only in FTP state.
    iac_remediation_steps: For the azurerm_function_app resource, set the site_config block with
      ftps_state argument set to "FtpsOnly".
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - compute

  - rule_id: non_car_ftps_should_be_required_in_web_app
    cloud_provider: azure
    name: FTPS should be required in your Web App
    severity: medium
    description: Cloudrail will review the App service configuration in your environment. If an app has FTP enabled and is not enforcing FTPS only, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the App services configuration within your Azure subscription and Terraform plan to check if they are enforcing FTPS only or if they have FTP disabled.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/app-service/deploy-ftp?tabs=portal#enforce-ftps> in order to disable FTP or select FTPS Only in FTP state.
    iac_remediation_steps: For the azurerm_app_service resource, set the site_config block with ftps_state argument set to “FtpsOnly” to enforce FTPS or to “Disabled” if you want to disable FTP.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - compute

  - rule_id: non_car_authentication_enabled_in_function_app
    cloud_provider: azure
    name: Ensure authentication is enabled in Function Apps
    severity: medium
    description: Cloudrail will review the Function Apps configuration in your environment.
      If a function does not have authentication enabled, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Function Apps configuration within your Azure subscription and
      Terraform plan to check if authentication is enabled.
    console_remediation_steps: Follow the guide at
      <https://docs.microsoft.com/en-us/azure/azure-functions/functions-how-to-use-azure-function-app-settings?tabs=portal#auth>
      in order to enable authentication for the Function App.
    iac_remediation_steps: For the azurerm_function_app resource,
      set the auth_settings block with enabled argument set to true.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - compute


  - rule_id: non_car_vpn_gateway_disallow_basic_sku
    cloud_provider: azure
    name: Ensure Azure VPN gateways don't use the basic SKU
    severity: medium
    description:
      The Azure VPN Gateway has different SKUs to choose from, each with different capabilities.
      The "basic" one is lacking many features and will generally not support anything beyond the smallest
      load.
    human_readable_logic:
      Cloudrail will review all of the VPN gateways in your Azure environment. If any uses the "basic" SKU, Cloudrail will raise a violation.
    console_remediation_steps: Change the SKU of the VPN gateway by deleting the old one and creating a new one with a different SKU.
    remediation_steps_tf: Change the 'sku' in the azurerm_virtual_network_gateway to a value that is not "Basic".
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - network

  - rule_id: non_car_auto_provisioning_log_analytics_agent_enabled
    cloud_provider: azure
    name: Ensure Auto provisioning of the Log Analytics agent is enabled on your subscription
    severity: medium
    description: Cloudrail will review the Security Center Auto Provisioning configuration in your environment.
      If the auto provision of the Log Analytics agent is not set to On, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Function Apps configuration within your Azure subscription and
      Terraform plan to check if authentication is enabled.
    console_remediation_steps: Follow the guide at
      <https://docs.microsoft.com/en-us/azure/security-center/security-center-enable-data-collection#enable-auto-provisioning-of-the-log-analytics-agent-and-extensions->
      in order to enable the automatic provision of the Log Analytics agent.
    remediation_steps_tf: For the azurerm_security_center_auto_provisioning resource, set the auto_provision argument to “On”.
    rule_type: non_context_aware
    security_layer: logging
    resource_type:
      - security_services

  - rule_id: non_car_client_certificates_required_in_function_app
    cloud_provider: azure
    name: Ensure client certificates are required in Function App
    severity: medium
    description: Cloudrail will review the Function Apps configuration in your environment.
      If a function does not have client certificates mode set to Required, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Function Apps configuration within your Azure subscription and
      Terraform plan to ensure client certificates are required.
    console_remediation_steps: Follow the guide at
      https://docs.microsoft.com/en-us/azure/app-service/app-service-web-configure-tls-mutual-auth in order to
      require client certificates for Function App.
    iac_remediation_steps: For the azurerm_function_app resource,
      set the client_cert_mode argument to "Required".
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - compute

  - rule_id: non_car_http_latest_in_function_app
    cloud_provider: azure
    name: Ensure HTTP version is the latest in Function Apps
    severity: medium
    description:
      Cloudrail will review the App Service (Function Apps) configuration in your environment.
      If an app does not use the latest HTTP version, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Function Apps configuration within your Azure subscription and
      Cloudrail will review the App Service configuration within your Azure subscription and Terraform plan to check
      if latest http version is configured for web apps.
    console_remediation_steps:
      Follow the guide at <https://azure.microsoft.com/en-us/blog/announcing-http-2-support-in-azure-app-service/>
      in order to configure HTTP version for the web app.
    remediation_steps_tf:
      For the azurerm_function_app resource, set the site_config block with http2_enabled argument set to true.
    rule_type: non_context_aware
    security_layer: iam
    resource_type:
      - compute

  - rule_id: non_car_function_app_using_latest_tls_version
    cloud_provider: azure
    name: Ensure Function App is using the latest Azure supported TLS version (1.2)
    severity: major
    description:
      Cloudrail will review the Function Apps configuration in your environment.
      If a function does not use the latest Azure supported TLS version (1.2), Cloudrail will highlight it as a violation.
    human_readable_logic:
      Cloudrail will review the Function Apps configuration within your Azure subscription
      and Terraform plan to ensure they are using the latest Azure supported TLS version (1.2).
    console_remediation_steps:
      Follow the guide at <https://docs.microsoft.com/en-us/azure/app-service/configure-ssl-bindings#enforce-tls-versions>
      in order to set the Minimum TLS Version to 1.2 for the Function App.
    remediation_steps_tf:
      For the azurerm_function_app resource, in site_config block, set the min_tls_version argument to “1.2”.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - compute

  - rule_id: non_car_email_notification_high_severity_alerts_enabled
    cloud_provider: azure
    name: Ensure Email notification for high severity alerts is enabled
    severity: medium
    description: Cloudrail will review the Security Center configuration in your environment. If email notification of high severity alerts is not enabled, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Security Center Contact configuration within your Azure subscription and Terraform plan to ensure email notifications of security alerts is enabled.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/security-center/security-center-provide-security-contact-details> in order to enable email notifications for security alerts.
    remediation_steps_tf: For the azurerm_security_center_contact resource, set the alert_notifications argument to true.
    rule_type: non_context_aware
    security_layer: logging
    resource_type:
      - security_services

  - rule_id: non_car_postgresql_server_enforcing_ssl
    cloud_provider: azure
    name: Ensure PostgreSQL Servers are enforcing SSL
    severity: major
    description:
      Cloudrail will review the PostgreSQL servers configuration in your environment.
      If a server is not enforcing SSL connections, Cloudrail will highlight it as a violation.
    human_readable_logic:
      Cloudrail will review the PostgreSQL Servers configuration within your Azure subscription and Terraform plan to ensure that SSL enforcement is enabled.
    console_remediation_steps:
      Follow the guide at <https://docs.microsoft.com/en-us/azure/postgresql/concepts-ssl-connection-security> in order to enable “Enforce SSL connection” for the PostgreSQL server.
    iac_remediation_steps: For the azurerm_postgresql_server resource, set the ssl_enforcement_enabled argument to true.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - database

  - rule_id: non_car_mysql_server_enforcing_ssl
    cloud_provider: azure
    name: Ensure MySQL Servers are enforcing SSL
    severity: major
    description:
      Cloudrail will review the MySQL servers configuration in your environment.
      If a server is not enforcing SSL connections, Cloudrail will highlight it as a violation.
    human_readable_logic:
      Cloudrail will review the MySQL Servers configuration within your Azure subscription and Terraform plan to ensure that SSL enforcement is enabled.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/mysql/howto-configure-ssl#step-3--enforcing-ssl-connections-in-azure> in order to enable “Enforce SSL connection” for the MySQL server.
    iac_remediation_steps: For the azurerm_mysql_server resource, set the ssl_enforcement_enabled argument to true.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - database

  - rule_id: non_car_authentication_enabled_in_web_app
    cloud_provider: azure
    name: Ensure authentication is enabled in Web Apps
    severity: medium
    description: Cloudrail will review the App Service (Web Apps) configuration in your environment. If an app does not have authentication enabled, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the App Service configuration within your Azure subscription and Terraform plan to check if authentication is enabled for web apps.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/app-service/overview-authentication-authorization> in order to enable authentication for the web app.
    iac_remediation_steps: For the azurerm_app_service resource, set the auth_settings block with enabled argument set to true.
    rule_type: non_context_aware
    security_layer: iam
    resource_type:
      - compute

  - rule_id: non_car_storage_account_default_network_access_denied
    cloud_provider: azure
    name: Ensure Storage Account has default network access denied
    severity: medium
    description: 
      Cloudrail will review the Storage Accounts configuration in your environment. If the account network rules are not denying default network access, Cloudrail will highlight it as a violation.
    human_readable_logic: 
      Cloudrail will review the Storage Account configuration within your Azure subscription and Terraform plan to ensure that its network rules (either defined in-line or using azurerm_storage_account_network_rules resource) are denying default network access.
    console_remediation_steps: 
      Follow the guide at <https://docs.microsoft.com/en-us/azure/storage/common/storage-network-security?tabs=azure-portal#change-the-default-network-access-rule> in order to deny access by default.
    iac_remediation_steps: 
      For the azurerm_storage_account resource, in the network_rules block, set the default_action argument to “Deny”. 
      If azurerm_storage_account_network_rules resource is being used, set the default_action argument to “Deny”.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - storage

  - rule_id: non_car_function_app_accessible_only_via_https
    cloud_provider: azure
    name: Ensure Function App is only accessible via HTTPS
    severity: medium
    description: Cloudrail will review the Function Apps configuration in your environment. If a function does not have HTTPS only enabled, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Function Apps configuration within your Azure subscription and Terraform plan to check if HTTPS only is enabled.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/app-service/configure-ssl-bindings#enforce-https> in order to configured HTTPS Only for the Function App.
    iac_remediation_steps: For the azurerm_function_app resource, set the https_only argument to true.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - compute

  - rule_id: non_car_web_app_accessible_only_via_https
    cloud_provider: azure
    name: Ensure Web App is only accessible via HTTPS
    severity: medium
    description: Cloudrail will review the Web Apps configuration in your environment. If a function does not have HTTPS only enabled, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Web Apps configuration within your Azure subscription and Terraform plan to check if HTTPS only is enabled.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/app-service/configure-ssl-bindings#enforce-https> in order to configured HTTPS Only for the Web App.
    iac_remediation_steps: For the azurerm_app_service resource, set the https_only argument to true.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - compute

  - rule_id: non_car_sql_servers_auditing_enabled
    cloud_provider: azure
    name: Ensure SQL servers have auditing enabled
    severity: medium
    description:
      Having ‘auditing’ enabled on SQL servers would help to track database activities.
      Cloudrail will review the MS SQL servers configuration in your environment and if a server does not have an auditing policy configured,
      Cloudrail will highlight it as a violation.
    human_readable_logic:
      Cloudrail will review the SQL servers configuration within your Azure subscription and Terraform plan to ensure that auditing is enabled.
    console_remediation_steps:
      Follow the guide at <https://docs.microsoft.com/en-us/azure/azure-sql/database/auditing-overview> in order to configure auditing for SQL servers.
    iac_remediation_steps:
      For the azurerm_mssql_server resource, add the extended_auditing_policy block and set the retention_in_days argument to 0 (unlimited) or a value greater than 90 and set the log_monitoring_enabled argument to true if you wish to send audit logs to Azure Monitor. If using the azurerm_mssql_server_extended_auditing_policy resource, create it with the same previous arguments.
    rule_type: non_context_aware
    security_layer: logging
    resource_type:
      - database

  - rule_id: non_car_web_app_using_latest_tls_version
    cloud_provider: azure
    name: Ensure Web App is using the latest Azure supported TLS version (1.2)
    severity: major
    description: Cloudrail will review the Web Apps configuration in your environment. If an app does not use the latest Azure supported TLS version (1.2), Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Web Apps configuration within your Azure subscription and Terraform plan to ensure they are using the latest Azure supported TLS version (1.2).
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/app-service/configure-ssl-bindings#enforce-tls-versions> in order to set the Minimum TLS Version to 1.2 for the Web App.
    iac_remediation_steps: For the azurerm_app_service resource, in site_config block, set the min_tls_version argument to 1.2.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - compute

  - rule_id: non_car_storage_account_secure_transfer
    cloud_provider: azure
    name: Ensure Storage Account requires secure transfer
    severity: medium
    description: Cloudrail will review the Storage Accounts configuration in your environment. If an account is not requiring secure transfer (HTTPS), Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Storage Account configuration within your Azure subscription and Terraform plan to ensure that secure transfer is enabled.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/storage/common/storage-require-secure-transfer> in order to enable secure transfer.
    iac_remediation_steps: For the azurerm_storage_account resource, set the enable_https_traffic_only argument to true.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - storage

  - rule_id: non_car_azure_defender_for_container_registries_enabled
    cloud_provider: azure
    name: Ensure Azure Defender for container registries is enabled
    severity: major
    description:
      template: azure_defender_enabled_description
      params:
        - Container Registries
    human_readable_logic:
      template: azure_defender_enabled_human_readable_logic
      params:
        - Container Registries
    console_remediation_steps:
      template: azure_defender_enabled_console_remediation_steps
      params:
        - Container Registries
    remediation_steps_tf:
      template: azure_defender_enabled_console_remediation_steps_tf
      params:
        - ContainerRegistry
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - security_services

  - rule_id: non_car_key_vault_purge_protection_enabled
    cloud_provider: azure
    name: Ensure Key Vaults have purge protection enabled
    severity: medium
    description: Cloudrail will review the Key Vaults configuration in your environment. If a vault does not have purge protection enabled, Cloudrail will highlight it as a violation. Cloudrail does not access the contents of the vaults themselves.
    human_readable_logic: Cloudrail will review the Key Vault configuration within your Azure subscription and Terraform plan to ensure purge protection is enabled.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/key-vault/general/soft-delete-overview> in order to enable purge protection for a vault.
    remediation_steps_tf: For the azurerm_key_vault resource, set the purge_protection_enabled argument to true.
    rule_type: non_context_aware
    security_layer: disaster_recovery
    resource_type:
      - security_services

  - rule_id: non_car_azure_defender_for_azure_sql_servers_enabled
    cloud_provider: azure
    name: Ensure Azure Defender for Azure SQL Database servers is enabled
    severity: major
    description:
      template: azure_defender_enabled_description
      params:
        - Sql Servers
    human_readable_logic:
      template: azure_defender_enabled_human_readable_logic
      params:
        - Sql Servers
    console_remediation_steps:
      template: azure_defender_enabled_console_remediation_steps
      params:
        - Sql Servers
    remediation_steps_tf:
      template: azure_defender_enabled_console_remediation_steps_tf
      params:
        - SqlServers
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - security_services

  - rule_id: non_car_azure_defender_for_kubernetes_enabled
    cloud_provider: azure
    name: Ensure Azure Defender for Kubernetes is enabled
    severity: major
    description:
      template: azure_defender_enabled_description
      params:
        - Kubernetes
    human_readable_logic:
      template: azure_defender_enabled_human_readable_logic
      params:
        - Kubernetes
    console_remediation_steps:
      template: azure_defender_enabled_console_remediation_steps
      params:
        - Kubernetes
    remediation_steps_tf:
      template: azure_defender_enabled_console_remediation_steps_tf
      params:
        - KubernetesService
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - security_services

  - rule_id: non_car_azure_defender_for_storage_enabled
    cloud_provider: azure
    name: Ensure Azure Defender for Storage is enabled
    severity: major
    description:
      template: azure_defender_enabled_description
      params:
        - Storage
    human_readable_logic:
      template: azure_defender_enabled_human_readable_logic
      params:
        - Storage
    console_remediation_steps:
      template: azure_defender_enabled_console_remediation_steps
      params:
        - Storage
    remediation_steps_tf:
      template: azure_defender_enabled_console_remediation_steps_tf
      params:
        - StorageAccounts
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - security_services

  - rule_id: non_car_azure_defender_for_servers_enabled
    cloud_provider: azure
    name: Ensure Azure Defender for Servers is enabled
    severity: major
    description:
      template: azure_defender_enabled_description
      params:
        - Servers
    human_readable_logic:
      template: azure_defender_enabled_human_readable_logic
      params:
        - Servers
    console_remediation_steps:
      template: azure_defender_enabled_console_remediation_steps
      params:
        - Servers
    remediation_steps_tf:
      template: azure_defender_enabled_console_remediation_steps_tf
      params:
        - VirtualMachines
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - security_services
      
  - rule_id: car_key_vault_diagnostic_logs_enabled
    cloud_provider: azure
    name: Ensure Key Vault has diagnostic logs enabled
    severity: medium
    description: Cloudrail will review the Key Vault configuration in your environment. If a vault does not have diagnostic logs enabled, Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Security Center Contact configuration within your Azure subscription and Terraform plan to ensure email notifications of security alerts is enabled.
    console_remediation_steps: Follow the guide at <https://docs.microsoft.com/en-us/azure/key-vault/general/alert> in order to enable diagnostic logs for Key Vault.
    remediation_steps_tf: Create an azurerm_monitor_diagnostic_setting resource and set the target_resource_id to the Key Vault ID. In the log block, set the enabled argument to true. In log block, retention_policy block, set enabled argument to true and days argument to 0 (indefinitely) or a value greater than or equal to 365.
    rule_type: context_aware
    security_layer: logging
    resource_type:
      - security_services

  - rule_id: non_car_storage_account_network_access_trusted_azure_services
    cloud_provider: azure
    name: Ensure Storage Account is allowing network access to trusted Azure services
    severity: medium
    description: 
      Cloudrail will review the Storage Accounts configuration in your environment. If the account network rules are not allowing access to trusted Azure services, Cloudrail will highlight it as a violation.
    human_readable_logic: 
      Cloudrail will review the Storage Account configuration within your Azure subscription and Terraform plan to ensure that trusted Azure services have network access to the account.
    console_remediation_steps: 
      Follow the guide at <https://docs.microsoft.com/en-us/azure/storage/common/storage-network-security?tabs=azure-portal#grant-access-to-trusted-azure-services> in order to grant access to trusted Azure services.
    iac_remediation_steps: 
      For the azurerm_storage_account resource, in the network_rules block, set the bypass argument to “AzureServices”. If azurerm_storage_account_network_rules resource is being used, set the bypass argument to “AzureServices”.
    rule_type: non_context_aware
    security_layer: networking
    resource_type:
      - storage

  - rule_id: non_car_diagnostic_logs_enabled_in_app_services
    cloud_provider: azure
    name: Ensure diagnostic logs are enabled in App Services
    severity: medium
    description: Cloudrail will review the App Services configuration in your environment.
      If an app does not have diagnostic logs enabled (detailed error messages, HTTP logging, and failed requests tracing), Cloudrail will highlight it as a violation.
    human_readable_logic: Cloudrail will review the Function Apps configuration within your Azure subscription and
      Terraform plan to check if authentication is enabled.
    console_remediation_steps: Follow the guide at
      https://docs.microsoft.com/en-us/azure/security-center/security-center-enable-data-collection#enable-auto-provisioning-of-the-log-analytics-agent-and-extensions-
      in order to enable the automatic provision of the Log Analytics agent.
    remediation_steps_tf: For the azurerm_security_center_auto_provisioning resource, set the auto_provision argument to “On”.
    rule_type: non_context_aware
    security_layer: logging
    resource_type:
      - security_services

  - rule_id: non_car_kubernetes_cluster_rbac_enabled
    cloud_provider: azure
    name: Ensure Kubernetes cluster has Role-Based Access Control (RBAC) enabled
    severity: medium
    description:
      Cloudrail will review the Kubernetes cluster configuration in your environment. If a cluster is not configured with role-based access control (RBAC) enabled, Cloudrail will highlight it as a violation.
    human_readable_logic:
      Cloudrail will review the Kubernetes clusters configuration within your Azure subscription and Terraform plan to ensure role-based access control is enabled.
    console_remediation_steps:
      Follow the guide at <https://docs.microsoft.com/en-us/azure/aks/manage-azure-rbac> in order to enable RBAC for a Kubernetes cluster.
    iac_remediation_steps:
      For the azurerm_kubernetes_cluster resource, in the role_based_access_control block set the enabled argument to true.
    rule_type: non_context_aware
    security_layer: iam
    resource_type:
      - kubernetes

  - rule_id: car_vm_not_publicly_accessible_rdp
    cloud_provider: azure
    name:
      template: vm_not_publicly_accessible_name
      params:
        - RDP
    severity: major
    description:
      template: vm_not_publicly_accessible_description
      params:
        - RDP
    human_readable_logic:
      template: vm_not_publicly_accessible_human_readable_name
      params:
        - RDP
        - 3389
    console_remediation_steps:
      template: vm_not_publicly_accessible_console_remediation_steps
      params:
        - RDP
    iac_remediation_steps:
      template: vm_not_publicly_accessible_iac_remediation_steps
      params:
        - RDP
    rule_type: context_aware
    security_layer: networking
    resource_type:
      - network

  - rule_id: car_vm_not_publicly_accessible_ssh
    cloud_provider: azure
    name:
      template: vm_not_publicly_accessible_name
      params:
        - SSH
    severity: major
    description:
      template: vm_not_publicly_accessible_description
      params:
        - SSH
    human_readable_logic:
      template: vm_not_publicly_accessible_human_readable_name
      params:
        - SSH
        - 22
    console_remediation_steps:
      template: vm_not_publicly_accessible_console_remediation_steps
      params:
        - SSH
    iac_remediation_steps:
      template: vm_not_publicly_accessible_iac_remediation_steps
      params:
        - SSH
    rule_type: context_aware
    security_layer: networking
    resource_type:
      - network

  - rule_id: non_car_unattached_managed_disks_encrypted
    cloud_provider: azure
    name: Ensure unattached Managed Disk are encrypted
    severity: medium
    description:
      Cloudrail will review the unattached Managed Disks configuration in your environment. If a disk is not encrypted, Cloudrail will highlight it as a violation.
    human_readable_logic:
      Cloudrail will review the unattached Managed Disks configuration within your Azure subscription and Terraform plan to ensure they are encrypted. To find unattached disks on the TF plan, the azurerm_virtual_machine_data_disk_attachment resources should be scanned.
    console_remediation_steps:
      Follow the guide at <https://docs.microsoft.com/en-us/azure/virtual-machines/disk-encryption> to enable disk encryption.
    iac_remediation_steps:
      For the azurerm_managed_disk resource, set the encryption_settings block with enabled argument set to true, or create an azurerm_disk_encryption_set resource and set the disk_encryption_set_id argument.
    rule_type: non_context_aware
    security_layer: encryption
    resource_type:
      - storage
