from crowdkit.aggregation.base_aggregator import BaseAggregator
from pandas.core.frame import DataFrame
from pandas.core.series import Series

class NoisyBradleyTerry(BaseAggregator):
    """A modification of Bradley-Terry with parameters for performers' skills and
    their biases.
    Attributes:
        result_ (Series): 'Labels' scores
            A pandas.Series index by labels and holding corresponding label's scores
        skills_ (Series): Performers' skills
            A pandas.Series index by performers and holding corresponding performer's skill
        biases_ (Series): Predicted biases for each performer. Indicates the probability of a performer to choose the left item.
            A series of performers' biases indexed by performers
    """

    def __init__(self, n_iter: int = 100, random_state: int = 0) -> None:
        """Method generated by attrs for class NoisyBradleyTerry.
        """
        ...

    def fit(self, data: DataFrame) -> 'NoisyBradleyTerry':
        """Args:
            data (DataFrame): Performers' pairwise comparison results
                A pandas.DataFrame containing `performer`, `left`, `right`, and `label` columns'.
                For each row `label` must be equal to either `left` or `right`.

        Returns:
            NoisyBradleyTerry: self
        """
        ...

    def fit_predict(self, data: DataFrame) -> Series:
        """Args:
            data (DataFrame): Performers' pairwise comparison results
                A pandas.DataFrame containing `performer`, `left`, `right`, and `label` columns'.
                For each row `label` must be equal to either `left` or `right`.

        Returns:
            Series: 'Labels' scores
                A pandas.Series index by labels and holding corresponding label's scores
        """
        ...

    n_iter: int
    random_state: int
    result_: Series
    skills_: Series
    biases_: Series
