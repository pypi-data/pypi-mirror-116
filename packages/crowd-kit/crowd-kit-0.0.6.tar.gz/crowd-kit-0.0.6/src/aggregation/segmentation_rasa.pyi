from crowdkit.aggregation.base_aggregator import BaseAggregator
from numpy import ndarray
from pandas.core.frame import DataFrame
from pandas.core.series import Series


class SegmentationRASA(BaseAggregator):
    """Segmentation RASA - chooses a pixel if sum of weighted votes of each performers' more than 0.5.
    Algorithm works iteratively, at each step, the performers are reweighted in proportion to their distances
    to the current answer estimation. The distance is considered as 1-iou. Modification of the RASA method for texts.

    Jiyi Li. 2019.
    A Dataset of Crowdsourced Word Sequences: Collections and Answer Aggregation for Ground Truth Creation.
    Proceedings of the First Workshop on Aggregating and Analysing Crowdsourced Annotations for NLP,
    pages 24â€“28 Hong Kong, China, November 3, 2019.
    http://doi.org/10.18653/v1/D19-5904
    Attributes:
        segmentations_ (ndarray): Tasks' segmentations
            A pandas.Series indexed by `task` such that `labels.loc[task]`
            is the tasks's aggregated segmentation.
    """

    def __init__(self, n_iter: int = 10) -> None:
        """Method generated by attrs for class SegmentationRASA.
        """
        ...

    def _aggregate_one(self, segmentations: Series) -> ndarray:
        """Performs Segmentation RASA algorithm for a single image.
        Args:
            segmentations (Series): Single task segmentations
                A pandas.Series containing segmentations for a single task - 2d boolean ndarray.

        Returns:
            ndarray: Segmentation
                A numpy 2d ndarray, which is a bitmask of segmentation.
        """
        ...

    @staticmethod
    def _calculate_weights(segmentations: Series, mv: ndarray) -> ndarray:
        """Calculates weights of each performers, from current majority vote estimation.
        Args:
            segmentations (Series): Single task segmentations
                A pandas.Series containing segmentations for a single task - 2d boolean ndarray.

            mv (ndarray): Segmentation
                A numpy 2d ndarray, which is a bitmask of segmentation.

        Returns:
            ndarray: Errors
                A numpy 1d ndarray, which contains the probability of correct answers for performers.
        """
        ...

    @staticmethod
    def _segmentation_weighted_majority_vote(segmentations: Series, weights: ndarray) -> ndarray:
        """Performs weighted majority vote algorithm.

        From the weights of all performers and their segmentation, performs a
        weighted majority vote for the inclusion of each pixel in the answer.
        Args:
            segmentations (Series): Single task segmentations
                A pandas.Series containing segmentations for a single task - 2d boolean ndarray.

            weights (ndarray): Errors
                A numpy 1d ndarray, which contains the probability of correct answers for performers.

        Returns:
            ndarray: Segmentation
                A numpy 2d ndarray, which is a bitmask of segmentation.
        """
        ...

    def fit(self, data: DataFrame) -> 'SegmentationRASA':
        """Args:
            data (DataFrame): Performers' segmentations
                A pandas.DataFrame containing `performer`, `task` and `segmentation` columns'.

        Returns:
            SegmentationRASA: self
        """
        ...

    def fit_predict(self, data: DataFrame) -> ndarray:
        """Args:
            data (DataFrame): Performers' segmentations
                A pandas.DataFrame containing `performer`, `task` and `segmentation` columns'.

        Returns:
            ndarray: Tasks' segmentations
                A pandas.Series indexed by `task` such that `labels.loc[task]`
                is the tasks's aggregated segmentation.
        """
        ...

    n_iter: int
    segmentations_: ndarray

