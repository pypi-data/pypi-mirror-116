# coding: utf-8

"""
    Vantage

    Vantage API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@vantage.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vantage.configuration import Configuration


class Product(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'category': 'str',
        'name': 'str',
        'service_id': 'str',
        'provider_id': 'str',
        'details': 'object'
    }

    attribute_map = {
        'id': 'id',
        'category': 'category',
        'name': 'name',
        'service_id': 'service_id',
        'provider_id': 'provider_id',
        'details': 'details'
    }

    def __init__(self, id=None, category=None, name=None, service_id=None, provider_id=None, details=None, _configuration=None):  # noqa: E501
        """Product - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._category = None
        self._name = None
        self._service_id = None
        self._provider_id = None
        self._details = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if category is not None:
            self.category = category
        if name is not None:
            self.name = name
        if service_id is not None:
            self.service_id = service_id
        if provider_id is not None:
            self.provider_id = provider_id
        if details is not None:
            self.details = details

    @property
    def id(self):
        """Gets the id of this Product.  # noqa: E501


        :return: The id of this Product.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Product.


        :param id: The id of this Product.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def category(self):
        """Gets the category of this Product.  # noqa: E501

        The category of the cloud product  # noqa: E501

        :return: The category of this Product.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Product.

        The category of the cloud product  # noqa: E501

        :param category: The category of this Product.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def name(self):
        """Gets the name of this Product.  # noqa: E501

        The common name of the product.  # noqa: E501

        :return: The name of this Product.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Product.

        The common name of the product.  # noqa: E501

        :param name: The name of this Product.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def service_id(self):
        """Gets the service_id of this Product.  # noqa: E501

        A unique slug for the service the product belongs to.  # noqa: E501

        :return: The service_id of this Product.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this Product.

        A unique slug for the service the product belongs to.  # noqa: E501

        :param service_id: The service_id of this Product.  # noqa: E501
        :type: str
        """

        self._service_id = service_id

    @property
    def provider_id(self):
        """Gets the provider_id of this Product.  # noqa: E501

        A unique slug for the provider the product belongs to.  # noqa: E501

        :return: The provider_id of this Product.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this Product.

        A unique slug for the provider the product belongs to.  # noqa: E501

        :param provider_id: The provider_id of this Product.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    @property
    def details(self):
        """Gets the details of this Product.  # noqa: E501

        An object of metadata about the product.  # noqa: E501

        :return: The details of this Product.  # noqa: E501
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Product.

        An object of metadata about the product.  # noqa: E501

        :param details: The details of this Product.  # noqa: E501
        :type: object
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Product, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Product):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Product):
            return True

        return self.to_dict() != other.to_dict()
