# coding: utf-8

"""
    Taurus Data Jobs

    The Taurus Data Jobs internal and Control Plane API. Data Jobs allows Data Engineers to implement automated pull ingestion (E in ELT) and batch data transformation into Data Warehouse (T in ELT). See also https://github.com/vmware/versatile-data-kit/wiki/Introduction  The API has resource-oriented URLs, JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The API enables creating, deploying, managing and executing Data Jobs in runtime environment.<br> <br> The API reflects the usual Data Job Development lifecycle:<br> <li> Create a new data job (webhook to further configure job -e.g authorize its createion, setup permissions, etc). <li> Download keytab. Develop and run the data job locally. <li> Deploy data job in cloud runtime enviornment to run on scheduled basis. <br><br> If Authentication is required pass OAuth2 access token in http header 'Authorization: Bearer [access-token-here]'  The API promotes some best practices (inspired by https://12factor.net ): <li> Explicitly declare and isolate dependencies <li> Strict separation of config from code. Config varies substantially across deploys, code does not. <li> Separation between the build, release/deploy, and run stages <li> Data Jobs are stateless and share-nothing processes. Any data that needs to persist must be stored in a stateful backing service (e.g IProperties). <li> Implementation is assumed to be be atomic and idempotent - should be OK for a job to fail somewhere in the middle; subsequent restart should not cause data corruption. <li> Keep development, staging, and production as similar as possible <br><br> <b>API Evolution</b><br> In the following sections, there are some terms that have a special meaning in the context of the APIs. <br><br> <li> <i>Stable</i> - The implementation of API has been battle-tested (has been in production for some time - probably at least a month)                      API is subject to the semantic versioning model and will follow                      deprecation policy <li> <i>Experimental</i> - May disappear without notice and is not subject to semantic versioning                            Implementation of the API is not considered stable nor well tested.                            Generally this is given to clients to experiment within testing environment. Must not be used in Production. <li> <i>Deprecated</i> - API is expected to be removed within next one or two major version upgrade.                          The deprecation notice/comment will say when the API will be removed and what alternatives should be used instead.   # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from setuptools import setup, find_packages  # noqa: H301

NAME = "vdk-control-service-api"
VERSION = "1.0.2"
# To install the library, run the following
#
# python setup.py install
#
# prerequisite: setuptools
# http://pypi.python.org/pypi/setuptools

REQUIRES = ["urllib3 >= 1.15", "six >= 1.10", "certifi", "python-dateutil"]

setup(
    name=NAME,
    version=VERSION,
    description="Taurus Data Jobs",
    author="OpenAPI Generator community",
    author_email="team@openapitools.org",
    url="",
    keywords=["OpenAPI", "OpenAPI-Generator", "Taurus Data Jobs"],
    install_requires=REQUIRES,
    packages=find_packages(exclude=["test", "tests"]),
    include_package_data=True,
    long_description="""\
    The Taurus Data Jobs internal and Control Plane API. Data Jobs allows Data Engineers to implement automated pull ingestion (E in ELT) and batch data transformation into Data Warehouse (T in ELT). See also https://github.com/vmware/versatile-data-kit/wiki/Introduction  The API has resource-oriented URLs, JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The API enables creating, deploying, managing and executing Data Jobs in runtime environment.&lt;br&gt; &lt;br&gt; The API reflects the usual Data Job Development lifecycle:&lt;br&gt; &lt;li&gt; Create a new data job (webhook to further configure job -e.g authorize its createion, setup permissions, etc). &lt;li&gt; Download keytab. Develop and run the data job locally. &lt;li&gt; Deploy data job in cloud runtime enviornment to run on scheduled basis. &lt;br&gt;&lt;br&gt; If Authentication is required pass OAuth2 access token in http header &#39;Authorization: Bearer [access-token-here]&#39;  The API promotes some best practices (inspired by https://12factor.net ): &lt;li&gt; Explicitly declare and isolate dependencies &lt;li&gt; Strict separation of config from code. Config varies substantially across deploys, code does not. &lt;li&gt; Separation between the build, release/deploy, and run stages &lt;li&gt; Data Jobs are stateless and share-nothing processes. Any data that needs to persist must be stored in a stateful backing service (e.g IProperties). &lt;li&gt; Implementation is assumed to be be atomic and idempotent - should be OK for a job to fail somewhere in the middle; subsequent restart should not cause data corruption. &lt;li&gt; Keep development, staging, and production as similar as possible &lt;br&gt;&lt;br&gt; &lt;b&gt;API Evolution&lt;/b&gt;&lt;br&gt; In the following sections, there are some terms that have a special meaning in the context of the APIs. &lt;br&gt;&lt;br&gt; &lt;li&gt; &lt;i&gt;Stable&lt;/i&gt; - The implementation of API has been battle-tested (has been in production for some time - probably at least a month)                      API is subject to the semantic versioning model and will follow                      deprecation policy &lt;li&gt; &lt;i&gt;Experimental&lt;/i&gt; - May disappear without notice and is not subject to semantic versioning                            Implementation of the API is not considered stable nor well tested.                            Generally this is given to clients to experiment within testing environment. Must not be used in Production. &lt;li&gt; &lt;i&gt;Deprecated&lt;/i&gt; - API is expected to be removed within next one or two major version upgrade.                          The deprecation notice/comment will say when the API will be removed and what alternatives should be used instead.   # noqa: E501
    """
)
