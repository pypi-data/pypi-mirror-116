Metadata-Version: 2.1
Name: DiscordStatusPy
Version: 0.0.1
Summary: Async API wrapper around discordstatus.com
Home-page: https://github.com/Booplicate/DiscordStatusPy
Author: Booplicate
License: UNKNOWN
Project-URL: Bug Tracker, https://github.com/Booplicate/DiscordStatusPy/issues
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3.9
Classifier: License :: OSI Approved :: GNU Affero General Public License v3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiohttp (>=3.7.4)

# DiscordStatusPy - async API wrapper around [discordstatus](https://discordstatus.com)

### Requirements:
Tested with the stack below. May or may not work on other versions.
 - `Python 3.9.6`
 - `AIOHTTP 3.7.4`

### Usage:
Example 1:

```python
import asyncio
import DiscordStatusPy

async def main():
    # With suppress_exc we will suppress all raised exceptions and return None
    maintenances = await DiscordStatusPy.get_maintenances(suppress_exc=True)
    print(maintenances['scheduled_maintenances'])

asyncio.run(main())
```

While you can access the API via the appropriate functions,
it's better performance-wise if you use the APIClient class,
especially if you're making multiple calls.

Always close connection when you don't need your APIClient instance anymore.
For that call its `close` method:
```python
await my_client.close()
```
Or use an async content manager which will do that for you:
```python
async with APIClient() as client:
    # Do stuff
# Now it's closed
```

Example 2:

```python
import asyncio
from DiscordStatusPy import APIClient

async def main():
    # With check_content_type we will check responseâ€™s content type
    async with APIClient(check_content_type=True) as client:
        status = await client.get_status()
        incidents = await client.get_incidents()
        print(status['status']['description'])
        print(incidents)

    # Alternatively (less desirable)
    client = APIClient()
    components = await client.get_components()
    print(components)
    await client.close()

asyncio.run(main())
```


