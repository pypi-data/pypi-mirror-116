{"version":3,"file":"chunks/app_views_organizationIntegrations_pluginDetailedView_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/organizationIntegrations/installedPlugin.tsx","webpack:///./app/views/organizationIntegrations/pluginDetailedView.tsx"],"sourcesContent":["import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport ProjectBadge from 'app/components/idBadge/projectBadge';\nimport Switch from 'app/components/switchButton';\nimport {IconDelete, IconFlag, IconSettings} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {AvatarProject, Organization, PluginNoProject, PluginProjectItem} from 'app/types';\nimport {IntegrationAnalyticsKey} from 'app/utils/integrationEvents';\nimport withApi from 'app/utils/withApi';\n\nexport type Props = {\n  api: Client;\n  plugin: PluginNoProject;\n  projectItem: PluginProjectItem;\n  organization: Organization;\n  onResetConfiguration: (projectId: string) => void;\n  onPluginEnableStatusChange: (projectId: string, status: boolean) => void;\n  trackIntegrationEvent: (eventKey: IntegrationAnalyticsKey) => void; // analytics callback\n  className?: string;\n};\n\nexport class InstalledPlugin extends Component<Props> {\n  get projectId() {\n    return this.props.projectItem.projectId;\n  }\n  getConfirmMessage() {\n    return (\n      <Fragment>\n        <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n          {t(\n            'Deleting this installation will disable the integration for this project and remove any configurations.'\n          )}\n        </Alert>\n      </Fragment>\n    );\n  }\n\n  pluginUpdate = async (data: object, method: 'POST' | 'DELETE' = 'POST') => {\n    const {organization, projectItem, plugin} = this.props;\n    // no try/catch so the caller will have to have it\n    await this.props.api.requestPromise(\n      `/projects/${organization.slug}/${projectItem.projectSlug}/plugins/${plugin.id}/`,\n      {\n        method,\n        data,\n      }\n    );\n  };\n\n  updatePluginEnableStatus = async (enabled: boolean) => {\n    if (enabled) {\n      await this.pluginUpdate({enabled});\n    } else {\n      await this.pluginUpdate({}, 'DELETE');\n    }\n  };\n\n  handleReset = async () => {\n    try {\n      addLoadingMessage(t('Removing...'));\n      await this.pluginUpdate({reset: true});\n      addSuccessMessage(t('Configuration was removed'));\n      this.props.onResetConfiguration(this.projectId);\n      this.props.trackIntegrationEvent('integrations.uninstall_completed');\n    } catch (_err) {\n      addErrorMessage(t('Unable to remove configuration'));\n    }\n  };\n\n  handleUninstallClick = () => {\n    this.props.trackIntegrationEvent('integrations.uninstall_clicked');\n  };\n\n  toggleEnablePlugin = async (projectId: string, status: boolean = true) => {\n    try {\n      addLoadingMessage(t('Enabling...'));\n      await this.updatePluginEnableStatus(status);\n      addSuccessMessage(\n        status ? t('Configuration was enabled.') : t('Configuration was disabled.')\n      );\n      this.props.onPluginEnableStatusChange(projectId, status);\n      this.props.trackIntegrationEvent(\n        status ? 'integrations.enabled' : 'integrations.disabled'\n      );\n    } catch (_err) {\n      addErrorMessage(\n        status\n          ? t('Unable to enable configuration.')\n          : t('Unable to disable configuration.')\n      );\n    }\n  };\n\n  get projectForBadge(): AvatarProject {\n    // this function returns the project as needed for the ProjectBadge component\n    const {projectItem} = this.props;\n    return {\n      slug: projectItem.projectSlug,\n      platform: projectItem.projectPlatform ? projectItem.projectPlatform : undefined,\n    };\n  }\n\n  render() {\n    const {className, plugin, organization, projectItem} = this.props;\n    return (\n      <Container>\n        <Access access={['org:integrations']}>\n          {({hasAccess}) => (\n            <IntegrationFlex className={className}>\n              <IntegrationItemBox>\n                <ProjectBadge project={this.projectForBadge} />\n              </IntegrationItemBox>\n              <div>\n                {\n                  <StyledButton\n                    borderless\n                    icon={<IconSettings />}\n                    disabled={!hasAccess}\n                    to={`/settings/${organization.slug}/projects/${projectItem.projectSlug}/plugins/${plugin.id}/`}\n                    data-test-id=\"integration-configure-button\"\n                  >\n                    {t('Configure')}\n                  </StyledButton>\n                }\n              </div>\n              <div>\n                <Confirm\n                  priority=\"danger\"\n                  onConfirming={this.handleUninstallClick}\n                  disabled={!hasAccess}\n                  confirmText=\"Delete Installation\"\n                  onConfirm={() => this.handleReset()}\n                  message={this.getConfirmMessage()}\n                >\n                  <StyledButton\n                    disabled={!hasAccess}\n                    borderless\n                    icon={<IconDelete />}\n                    data-test-id=\"integration-remove-button\"\n                  >\n                    {t('Uninstall')}\n                  </StyledButton>\n                </Confirm>\n              </div>\n              <Switch\n                isActive={projectItem.enabled}\n                toggle={() =>\n                  this.toggleEnablePlugin(projectItem.projectId, !projectItem.enabled)\n                }\n                isDisabled={!hasAccess}\n              />\n            </IntegrationFlex>\n          )}\n        </Access>\n      </Container>\n    );\n  }\n}\n\nexport default withApi(InstalledPlugin);\n\nconst Container = styled('div')`\n  padding: ${space(2)};\n  border: 1px solid ${p => p.theme.border};\n  border-bottom: none;\n  background-color: ${p => p.theme.background};\n\n  &:last-child {\n    border-bottom: 1px solid ${p => p.theme.border};\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  color: ${p => p.theme.gray300};\n`;\n\nconst IntegrationFlex = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst IntegrationItemBox = styled('div')`\n  flex: 1;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  min-width: 0;\n`;\n","import styled from '@emotion/styled';\n\nimport * as modal from 'app/actionCreators/modal';\nimport Button from 'app/components/button';\nimport ContextPickerModal from 'app/components/contextPickerModal';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {PluginProjectItem, PluginWithProjectList} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';\nimport InstalledPlugin from './installedPlugin';\n\ntype State = {\n  plugins: PluginWithProjectList[];\n};\n\ntype Tab = AbstractIntegrationDetailedView['state']['tab'];\n\nclass PluginDetailedView extends AbstractIntegrationDetailedView<\n  AbstractIntegrationDetailedView['props'],\n  State & AbstractIntegrationDetailedView['state']\n> {\n  getEndpoints(): ([string, string, any] | [string, string])[] {\n    const {orgId, integrationSlug} = this.props.params;\n    return [\n      ['plugins', `/organizations/${orgId}/plugins/configs/?plugins=${integrationSlug}`],\n    ];\n  }\n\n  get integrationType() {\n    return 'plugin' as const;\n  }\n\n  get plugin() {\n    return this.state.plugins[0];\n  }\n\n  get description() {\n    return this.plugin.description || '';\n  }\n\n  get author() {\n    return this.plugin.author?.name;\n  }\n\n  get resourceLinks() {\n    return this.plugin.resourceLinks || [];\n  }\n\n  get installationStatus() {\n    return this.plugin.projectList.length > 0 ? 'Installed' : 'Not Installed';\n  }\n\n  get integrationName() {\n    return `${this.plugin.name}${this.plugin.isHidden ? ' (Legacy)' : ''}`;\n  }\n\n  get featureData() {\n    return this.plugin.featureDescriptions;\n  }\n\n  handleResetConfiguration = (projectId: string) => {\n    // make a copy of our project list\n    const projectList = this.plugin.projectList.slice();\n    // find the index of the project\n    const index = projectList.findIndex(item => item.projectId === projectId);\n    // should match but quit if it doesn't\n    if (index < 0) {\n      return;\n    }\n    // remove from array\n    projectList.splice(index, 1);\n    // update state\n    this.setState({\n      plugins: [{...this.state.plugins[0], projectList}],\n    });\n  };\n\n  handlePluginEnableStatus = (projectId: string, enable: boolean = true) => {\n    // make a copy of our project list\n    const projectList = this.plugin.projectList.slice();\n    // find the index of the project\n    const index = projectList.findIndex(item => item.projectId === projectId);\n    // should match but quit if it doesn't\n    if (index < 0) {\n      return;\n    }\n\n    // update item in array\n    projectList[index] = {\n      ...projectList[index],\n      enabled: enable,\n    };\n\n    // update state\n    this.setState({\n      plugins: [{...this.state.plugins[0], projectList}],\n    });\n  };\n\n  handleAddToProject = () => {\n    const plugin = this.plugin;\n    const {organization, router} = this.props;\n    this.trackIntegrationEvent('integrations.plugin_add_to_project_clicked');\n    modal.openModal(\n      modalProps => (\n        <ContextPickerModal\n          {...modalProps}\n          nextPath={`/settings/${organization.slug}/projects/:projectId/plugins/${plugin.id}/`}\n          needProject\n          needOrg={false}\n          onFinish={path => {\n            modalProps.closeModal();\n            router.push(path);\n          }}\n        />\n      ),\n      {}\n    );\n  };\n\n  getTabDisplay(tab: Tab) {\n    // we want to show project configurations to make it more clear\n    if (tab === 'configurations') {\n      return 'project configurations';\n    }\n    return 'overview';\n  }\n\n  renderTopButton(disabledFromFeatures: boolean, userHasAccess: boolean) {\n    if (userHasAccess) {\n      return (\n        <AddButton\n          data-test-id=\"install-button\"\n          disabled={disabledFromFeatures}\n          onClick={this.handleAddToProject}\n          size=\"small\"\n          priority=\"primary\"\n        >\n          {t('Add to Project')}\n        </AddButton>\n      );\n    }\n\n    return this.renderRequestIntegrationButton();\n  }\n\n  renderConfigurations() {\n    const plugin = this.plugin;\n    const {organization} = this.props;\n    if (plugin.projectList.length) {\n      return (\n        <div>\n          {plugin.projectList.map((projectItem: PluginProjectItem) => (\n            <InstalledPlugin\n              key={projectItem.projectId}\n              organization={organization}\n              plugin={plugin}\n              projectItem={projectItem}\n              onResetConfiguration={this.handleResetConfiguration}\n              onPluginEnableStatusChange={this.handlePluginEnableStatus}\n              trackIntegrationEvent={this.trackIntegrationEvent}\n            />\n          ))}\n        </div>\n      );\n    }\n    return this.renderEmptyConfigurations();\n  }\n}\n\nconst AddButton = styled(Button)`\n  margin-bottom: ${space(1)};\n`;\n\nexport default withOrganization(PluginDetailedView);\n"],"names":["InstalledPlugin","Component","async","data","method","organization","projectItem","plugin","this","props","api","requestPromise","slug","projectSlug","id","enabled","pluginUpdate","addLoadingMessage","t","reset","addSuccessMessage","onResetConfiguration","projectId","trackIntegrationEvent","_err","addErrorMessage","status","updatePluginEnableStatus","onPluginEnableStatusChange","getConfirmMessage","Fragment","type","icon","size","platform","projectPlatform","undefined","render","className","Container","access","hasAccess","IntegrationFlex","IntegrationItemBox","project","projectForBadge","StyledButton","borderless","disabled","to","priority","onConfirming","handleUninstallClick","confirmText","onConfirm","handleReset","message","isActive","toggle","toggleEnablePlugin","isDisabled","withApi","space","p","theme","border","background","Button","gray300","PluginDetailedView","AbstractIntegrationDetailedView","projectList","slice","index","findIndex","item","splice","setState","plugins","state","enable","router","modal","openModal","modalProps","nextPath","needProject","needOrg","onFinish","path","closeModal","push","getEndpoints","orgId","integrationSlug","params","description","author","name","resourceLinks","length","isHidden","featureDescriptions","getTabDisplay","tab","renderTopButton","disabledFromFeatures","userHasAccess","AddButton","onClick","handleAddToProject","renderRequestIntegrationButton","renderConfigurations","map","handleResetConfiguration","handlePluginEnableStatus","renderEmptyConfigurations","withOrganization"],"sourceRoot":""}