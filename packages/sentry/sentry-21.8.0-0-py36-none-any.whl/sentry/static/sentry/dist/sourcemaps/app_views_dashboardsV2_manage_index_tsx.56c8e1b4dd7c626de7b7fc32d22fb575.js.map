{"version":3,"file":"chunks/app_views_dashboardsV2_manage_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/dashboards.tsx","webpack:///./app/components/activity/item/avatar.tsx","webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/dashboardsV2/contextMenu.tsx","webpack:///./app/views/dashboardsV2/manage/dashboardCard.tsx","webpack:///./app/views/dashboardsV2/manage/dashboardList.tsx","webpack:///./app/views/dashboardsV2/manage/index.tsx","webpack:///./app/views/dashboardsV2/types.tsx","webpack:///./app/views/dashboardsV2/utils.tsx"],"sourcesContent":["import {addErrorMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport {t} from 'app/locale';\nimport {DashboardDetails, Widget} from 'app/views/dashboardsV2/types';\n\nexport function createDashboard(\n  api: Client,\n  orgId: string,\n  newDashboard: DashboardDetails,\n  duplicate?: boolean\n): Promise<DashboardDetails> {\n  const {title, widgets} = newDashboard;\n\n  const promise: Promise<DashboardDetails> = api.requestPromise(\n    `/organizations/${orgId}/dashboards/`,\n    {\n      method: 'POST',\n      data: {title, widgets, duplicate},\n    }\n  );\n\n  promise.catch(response => {\n    const errorResponse = response?.responseJSON ?? null;\n\n    if (errorResponse) {\n      addErrorMessage(errorResponse);\n    } else {\n      addErrorMessage(t('Unable to create dashboard'));\n    }\n  });\n\n  return promise;\n}\n\nexport function fetchDashboard(\n  api: Client,\n  orgId: string,\n  dashboardId: string\n): Promise<DashboardDetails> {\n  const promise: Promise<DashboardDetails> = api.requestPromise(\n    `/organizations/${orgId}/dashboards/${dashboardId}/`,\n    {\n      method: 'GET',\n    }\n  );\n\n  promise.catch(response => {\n    const errorResponse = response?.responseJSON ?? null;\n\n    if (errorResponse) {\n      addErrorMessage(errorResponse);\n    } else {\n      addErrorMessage(t('Unable to load dashboard'));\n    }\n  });\n  return promise;\n}\n\nexport function updateDashboard(\n  api: Client,\n  orgId: string,\n  dashboard: DashboardDetails\n): Promise<DashboardDetails> {\n  const data = {\n    title: dashboard.title,\n    widgets: dashboard.widgets,\n  };\n\n  const promise: Promise<DashboardDetails> = api.requestPromise(\n    `/organizations/${orgId}/dashboards/${dashboard.id}/`,\n    {\n      method: 'PUT',\n      data,\n    }\n  );\n\n  promise.catch(response => {\n    const errorResponse = response?.responseJSON ?? null;\n\n    if (errorResponse) {\n      addErrorMessage(errorResponse);\n    } else {\n      addErrorMessage(t('Unable to update dashboard'));\n    }\n  });\n\n  return promise;\n}\n\nexport function deleteDashboard(\n  api: Client,\n  orgId: string,\n  dashboardId: string\n): Promise<undefined> {\n  const promise: Promise<undefined> = api.requestPromise(\n    `/organizations/${orgId}/dashboards/${dashboardId}/`,\n    {\n      method: 'DELETE',\n    }\n  );\n\n  promise.catch(response => {\n    const errorResponse = response?.responseJSON ?? null;\n\n    if (errorResponse) {\n      addErrorMessage(errorResponse);\n    } else {\n      addErrorMessage(t('Unable to delete dashboard'));\n    }\n  });\n\n  return promise;\n}\n\nexport function validateWidget(\n  api: Client,\n  orgId: string,\n  widget: Widget\n): Promise<undefined> {\n  const promise: Promise<undefined> = api.requestPromise(\n    `/organizations/${orgId}/dashboards/widgets/`,\n    {\n      method: 'POST',\n      data: widget,\n    }\n  );\n  return promise;\n}\n","import styled from '@emotion/styled';\n\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport Placeholder from 'app/components/placeholder';\nimport {IconSentry} from 'app/icons';\nimport {AvatarUser} from 'app/types';\n\ntype Props = {\n  type: 'system' | 'user';\n  user?: AvatarUser;\n  className?: string;\n  size?: number;\n};\n\nfunction ActivityAvatar({className, type, user, size = 38}: Props) {\n  if (user) {\n    return <UserAvatar user={user} size={size} className={className} />;\n  }\n\n  if (type === 'system') {\n    // Return Sentry avatar\n    return (\n      <SystemAvatar className={className} size={size}>\n        <StyledIconSentry size=\"md\" />\n      </SystemAvatar>\n    );\n  }\n\n  return (\n    <Placeholder\n      className={className}\n      width={`${size}px`}\n      height={`${size}px`}\n      shape=\"circle\"\n    />\n  );\n}\n\nexport default ActivityAvatar;\n\ntype SystemAvatarProps = {\n  size: number;\n};\n\nconst SystemAvatar = styled('span')<SystemAvatarProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: ${p => p.size}px;\n  height: ${p => p.size}px;\n  background-color: ${p => p.theme.textColor};\n  color: ${p => p.theme.background};\n  border-radius: 50%;\n`;\n\nconst StyledIconSentry = styled(IconSentry)`\n  padding-bottom: 3px;\n`;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {MouseEvent} from 'react';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\n\nimport DropdownMenu from 'app/components/dropdownMenu';\nimport {IconEllipsis} from 'app/icons';\n\nconst ContextMenu = ({children}) => (\n  <DropdownMenu>\n    {({isOpen, getRootProps, getActorProps, getMenuProps}) => {\n      const topLevelCx = classNames('dropdown', {\n        'anchor-right': true,\n        open: isOpen,\n      });\n\n      return (\n        <MoreOptions\n          {...getRootProps({\n            className: topLevelCx,\n          })}\n        >\n          <DropdownTarget\n            {...getActorProps<HTMLDivElement>({\n              onClick: (event: MouseEvent) => {\n                event.stopPropagation();\n                event.preventDefault();\n              },\n            })}\n          >\n            <IconEllipsis data-test-id=\"context-menu\" size=\"md\" />\n          </DropdownTarget>\n          {isOpen && (\n            <ul {...getMenuProps({})} className={classNames('dropdown-menu')}>\n              {children}\n            </ul>\n          )}\n        </MoreOptions>\n      );\n    }}\n  </DropdownMenu>\n);\n\nconst MoreOptions = styled('span')`\n  display: flex;\n  color: ${p => p.theme.textColor};\n`;\n\nconst DropdownTarget = styled('div')`\n  display: flex;\n  cursor: pointer;\n  padding: 0 5px;\n`;\n\nexport default ContextMenu;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport ActivityAvatar from 'app/components/activity/item/avatar';\nimport Card from 'app/components/card';\nimport Link from 'app/components/links/link';\nimport {t} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {User} from 'app/types';\n\ntype Props = {\n  title: string;\n  detail: React.ReactNode;\n  to: React.ComponentProps<typeof Link>['to'];\n  renderWidgets: () => React.ReactNode;\n  createdBy?: User;\n  dateStatus?: React.ReactNode;\n  onEventClick?: () => void;\n  renderContextMenu?: () => void;\n};\n\nfunction DashboardCard({\n  title,\n  detail,\n  createdBy,\n  renderWidgets,\n  dateStatus,\n  to,\n  onEventClick,\n  renderContextMenu,\n}: Props) {\n  function onClick() {\n    onEventClick?.();\n  }\n\n  return (\n    <Link data-test-id={`card-${title}`} onClick={onClick} to={to}>\n      <StyledDashboardCard interactive>\n        <CardHeader>\n          <CardContent>\n            <Title>{title}</Title>\n            <Detail>{detail}</Detail>\n          </CardContent>\n          <AvatarWrapper>\n            {createdBy ? (\n              <ActivityAvatar type=\"user\" user={createdBy} size={34} />\n            ) : (\n              <ActivityAvatar type=\"system\" size={34} />\n            )}\n          </AvatarWrapper>\n        </CardHeader>\n        <CardBody>{renderWidgets()}</CardBody>\n        <CardFooter>\n          <DateSelected>\n            {dateStatus ? (\n              <DateStatus>\n                {t('Created')} {dateStatus}\n              </DateStatus>\n            ) : (\n              <DateStatus />\n            )}\n          </DateSelected>\n          {renderContextMenu && renderContextMenu()}\n        </CardFooter>\n      </StyledDashboardCard>\n    </Link>\n  );\n}\n\nconst AvatarWrapper = styled('span')`\n  border: 3px solid ${p => p.theme.border};\n  border-radius: 50%;\n  height: min-content;\n`;\n\nconst CardContent = styled('div')`\n  flex-grow: 1;\n  overflow: hidden;\n  margin-right: ${space(1)};\n`;\n\nconst StyledDashboardCard = styled(Card)`\n  justify-content: space-between;\n  height: 100%;\n  &:focus,\n  &:hover {\n    top: -1px;\n  }\n`;\n\nconst CardHeader = styled('div')`\n  display: flex;\n  padding: ${space(1.5)} ${space(2)};\n`;\n\nconst Title = styled('div')`\n  color: ${p => p.theme.textColor};\n  ${overflowEllipsis};\n`;\n\nconst Detail = styled('div')`\n  font-family: ${p => p.theme.text.familyMono};\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: ${p => p.theme.gray300};\n  ${overflowEllipsis};\n  line-height: 1.5;\n`;\n\nconst CardBody = styled('div')`\n  background: ${p => p.theme.gray100};\n  padding: ${space(1.5)} ${space(2)};\n  max-height: 150px;\n  min-height: 150px;\n  overflow: hidden;\n`;\n\nconst CardFooter = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: ${space(1)} ${space(2)};\n`;\n\nconst DateSelected = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  display: grid;\n  grid-column-gap: ${space(1)};\n  color: ${p => p.theme.textColor};\n  ${overflowEllipsis};\n`;\n\nconst DateStatus = styled('span')`\n  color: ${p => p.theme.purple300};\n  padding-left: ${space(1)};\n`;\n\nexport default DashboardCard;\n","import {Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location, Query} from 'history';\n\nimport WidgetArea from 'sentry-images/dashboard/widget-area.svg';\nimport WidgetBar from 'sentry-images/dashboard/widget-bar.svg';\nimport WidgetBigNumber from 'sentry-images/dashboard/widget-big-number.svg';\nimport WidgetLine from 'sentry-images/dashboard/widget-line-1.svg';\nimport WidgetTable from 'sentry-images/dashboard/widget-table.svg';\nimport WidgetWorldMap from 'sentry-images/dashboard/widget-world-map.svg';\n\nimport {\n  createDashboard,\n  deleteDashboard,\n  fetchDashboard,\n} from 'app/actionCreators/dashboards';\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport MenuItem from 'app/components/menuItem';\nimport Pagination from 'app/components/pagination';\nimport TimeSince from 'app/components/timeSince';\nimport {t, tn} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport withApi from 'app/utils/withApi';\nimport {DashboardListItem, DisplayType} from 'app/views/dashboardsV2/types';\n\nimport ContextMenu from '../contextMenu';\nimport {cloneDashboard} from '../utils';\n\nimport DashboardCard from './dashboardCard';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  location: Location;\n  dashboards: DashboardListItem[] | null;\n  pageLinks: string;\n  onDashboardsChange: () => void;\n};\n\nfunction DashboardList({\n  api,\n  organization,\n  location,\n  dashboards,\n  pageLinks,\n  onDashboardsChange,\n}: Props) {\n  function miniWidget(displayType: DisplayType): string {\n    switch (displayType) {\n      case DisplayType.BAR:\n        return WidgetBar;\n      case DisplayType.AREA:\n        return WidgetArea;\n      case DisplayType.BIG_NUMBER:\n        return WidgetBigNumber;\n      case DisplayType.TABLE:\n        return WidgetTable;\n      case DisplayType.WORLD_MAP:\n        return WidgetWorldMap;\n      case DisplayType.LINE:\n      default:\n        return WidgetLine;\n    }\n  }\n\n  function handleDelete(dashboard: DashboardListItem) {\n    deleteDashboard(api, organization.slug, dashboard.id)\n      .then(() => {\n        trackAnalyticsEvent({\n          eventKey: 'dashboards_manage.delete',\n          eventName: 'Dashboards Manager: Dashboard Deleted',\n          organization_id: parseInt(organization.id, 10),\n          dashboard_id: parseInt(dashboard.id, 10),\n        });\n        onDashboardsChange();\n        addSuccessMessage(t('Dashboard deleted'));\n      })\n      .catch(() => {\n        addErrorMessage(t('Error deleting Dashboard'));\n      });\n  }\n\n  function handleDuplicate(dashboard: DashboardListItem) {\n    fetchDashboard(api, organization.slug, dashboard.id)\n      .then(dashboardDetail => {\n        const newDashboard = cloneDashboard(dashboardDetail);\n        newDashboard.widgets.map(widget => (widget.id = undefined));\n        createDashboard(api, organization.slug, newDashboard, true).then(() => {\n          trackAnalyticsEvent({\n            eventKey: 'dashboards_manage.duplicate',\n            eventName: 'Dashboards Manager: Dashboard Duplicated',\n            organization_id: parseInt(organization.id, 10),\n            dashboard_id: parseInt(dashboard.id, 10),\n          });\n          onDashboardsChange();\n          addSuccessMessage(t('Dashboard duplicated'));\n        });\n      })\n      .catch(() => addErrorMessage(t('Error duplicating Dashboard')));\n  }\n\n  function renderMiniDashboards() {\n    return dashboards?.map((dashboard, index) => {\n      return (\n        <DashboardCard\n          key={`${index}-${dashboard.id}`}\n          title={\n            dashboard.id === 'default-overview' ? 'Default Dashboard' : dashboard.title\n          }\n          to={{\n            pathname: `/organizations/${organization.slug}/dashboard/${dashboard.id}/`,\n            query: {...location.query},\n          }}\n          detail={tn('%s widget', '%s widgets', dashboard.widgetDisplay.length)}\n          dateStatus={\n            dashboard.dateCreated ? <TimeSince date={dashboard.dateCreated} /> : undefined\n          }\n          createdBy={dashboard.createdBy}\n          renderWidgets={() => (\n            <WidgetGrid>\n              {dashboard.widgetDisplay.map((displayType, i) => {\n                return displayType === DisplayType.BIG_NUMBER ? (\n                  <BigNumberWidgetWrapper key={`${i}-${displayType}`}>\n                    <WidgetImage src={miniWidget(displayType)} />\n                  </BigNumberWidgetWrapper>\n                ) : (\n                  <MiniWidgetWrapper key={`${i}-${displayType}`}>\n                    <WidgetImage src={miniWidget(displayType)} />\n                  </MiniWidgetWrapper>\n                );\n              })}\n            </WidgetGrid>\n          )}\n          renderContextMenu={() => (\n            <ContextMenu>\n              <MenuItem\n                data-test-id=\"dashboard-delete\"\n                onClick={event => {\n                  event.preventDefault();\n                  handleDelete(dashboard);\n                }}\n                disabled={dashboards.length <= 1}\n              >\n                {t('Delete')}\n              </MenuItem>\n              <MenuItem\n                data-test-id=\"dashboard-duplicate\"\n                onClick={event => {\n                  event.preventDefault();\n                  handleDuplicate(dashboard);\n                }}\n              >\n                {t('Duplicate')}\n              </MenuItem>\n            </ContextMenu>\n          )}\n        />\n      );\n    });\n  }\n\n  function renderDashboardGrid() {\n    if (!dashboards?.length) {\n      return (\n        <EmptyStateWarning>\n          <p>{t('Sorry, no Dashboards match your filters.')}</p>\n        </EmptyStateWarning>\n      );\n    }\n    return <DashboardGrid>{renderMiniDashboards()}</DashboardGrid>;\n  }\n\n  return (\n    <Fragment>\n      {renderDashboardGrid()}\n      <PaginationRow\n        pageLinks={pageLinks}\n        onCursor={(cursor: string, path: string, query: Query, direction: number) => {\n          const offset = Number(cursor.split(':')[1]);\n\n          const newQuery: Query & {cursor?: string} = {...query, cursor};\n          const isPrevious = direction === -1;\n\n          if (offset <= 0 && isPrevious) {\n            delete newQuery.cursor;\n          }\n\n          trackAnalyticsEvent({\n            eventKey: 'dashboards_manage.paginate',\n            eventName: 'Dashboards Manager: Paginate',\n            organization_id: parseInt(organization.id, 10),\n          });\n\n          browserHistory.push({\n            pathname: path,\n            query: newQuery,\n          });\n        }}\n      />\n    </Fragment>\n  );\n}\n\nconst DashboardGrid = styled('div')`\n  display: grid;\n  grid-template-columns: minmax(100px, 1fr);\n  grid-template-rows: repeat(3, max-content);\n  grid-gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    grid-template-columns: repeat(2, minmax(100px, 1fr));\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    grid-template-columns: repeat(3, minmax(100px, 1fr));\n  }\n`;\n\nconst WidgetGrid = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n  grid-auto-flow: row dense;\n  grid-gap: ${space(0.25)};\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    grid-template-columns: repeat(4, minmax(0, 1fr));\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[3]}) {\n    grid-template-columns: repeat(6, minmax(0, 1fr));\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[4]}) {\n    grid-template-columns: repeat(8, minmax(0, 1fr));\n  }\n`;\n\nconst BigNumberWidgetWrapper = styled('div')`\n  display: flex;\n  align-items: flex-start;\n  width: 100%;\n  height: 100%;\n\n  /* 2 cols */\n  grid-area: span 1 / span 2;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    /* 4 cols */\n    grid-area: span 1 / span 1;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[3]}) {\n    /* 6 and 8 cols */\n    grid-area: span 1 / span 2;\n  }\n`;\n\nconst MiniWidgetWrapper = styled('div')`\n  display: flex;\n  align-items: flex-start;\n  width: 100%;\n  height: 100%;\n  grid-area: span 2 / span 2;\n`;\n\nconst WidgetImage = styled('img')`\n  width: 100%;\n  height: 100%;\n`;\n\nconst PaginationRow = styled(Pagination)`\n  margin-bottom: ${space(3)};\n`;\n\nexport default withApi(DashboardList);\n","import * as ReactRouter from 'react-router';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport pick from 'lodash/pick';\n\nimport {Client} from 'app/api';\nimport Feature from 'app/components/acl/feature';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport DropdownControl, {DropdownItem} from 'app/components/dropdownControl';\nimport LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';\nimport SearchBar from 'app/components/searchBar';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {IconAdd} from 'app/icons';\nimport {t} from 'app/locale';\nimport {PageContent} from 'app/styles/organization';\nimport space from 'app/styles/space';\nimport {Organization, SelectValue} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport {decodeScalar} from 'app/utils/queryString';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\n\nimport {DashboardListItem} from '../types';\n\nimport DashboardList from './dashboardList';\n\nconst SORT_OPTIONS: SelectValue<string>[] = [\n  {label: t('My Dashboards'), value: 'mydashboards'},\n  {label: t('Dashboard Name (A-Z)'), value: 'title'},\n  {label: t('Date Created (Newest)'), value: '-dateCreated'},\n  {label: t('Date Created (Oldest)'), value: 'dateCreated'},\n];\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  location: Location;\n  router: ReactRouter.InjectedRouter;\n} & AsyncView['props'];\n\ntype State = {\n  dashboards: DashboardListItem[] | null;\n  dashboardsPageLinks: string;\n} & AsyncView['state'];\n\nclass ManageDashboards extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization, location} = this.props;\n    return [\n      [\n        'dashboards',\n        `/organizations/${organization.slug}/dashboards/`,\n        {\n          query: {\n            ...pick(location.query, ['cursor', 'query']),\n            sort: this.getActiveSort().value,\n            per_page: '9',\n          },\n        },\n      ],\n    ];\n  }\n\n  getActiveSort() {\n    const {location} = this.props;\n\n    const urlSort = decodeScalar(location.query.sort, 'mydashboards');\n    return SORT_OPTIONS.find(item => item.value === urlSort) || SORT_OPTIONS[0];\n  }\n\n  onDashboardsChange() {\n    this.reloadData();\n  }\n\n  handleSearch(query: string) {\n    const {location, router} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'dashboards_manage.search',\n      eventName: 'Dashboards Manager: Search',\n      organization_id: parseInt(this.props.organization.id, 10),\n    });\n\n    router.push({\n      pathname: location.pathname,\n      query: {...location.query, cursor: undefined, query},\n    });\n  }\n\n  handleSortChange = (value: string) => {\n    const {location} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'dashboards_manage.change_sort',\n      eventName: 'Dashboards Manager: Sort By Changed',\n      organization_id: parseInt(this.props.organization.id, 10),\n      sort: value,\n    });\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        cursor: undefined,\n        sort: value,\n      },\n    });\n  };\n\n  getQuery() {\n    const {query} = this.props.location.query;\n\n    return typeof query === 'string' ? query : undefined;\n  }\n\n  renderActions() {\n    const activeSort = this.getActiveSort();\n\n    return (\n      <StyledActions>\n        <SearchBar\n          defaultQuery=\"\"\n          query={this.getQuery()}\n          placeholder={t('Search Dashboards')}\n          onSearch={query => this.handleSearch(query)}\n        />\n        <DropdownControl buttonProps={{prefix: t('Sort By')}} label={activeSort.label}>\n          {SORT_OPTIONS.map(({label, value}) => (\n            <DropdownItem\n              key={value}\n              onSelect={this.handleSortChange}\n              eventKey={value}\n              isActive={value === activeSort.value}\n            >\n              {label}\n            </DropdownItem>\n          ))}\n        </DropdownControl>\n      </StyledActions>\n    );\n  }\n\n  renderNoAccess() {\n    return (\n      <PageContent>\n        <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n      </PageContent>\n    );\n  }\n\n  renderDashboards() {\n    const {dashboards, dashboardsPageLinks} = this.state;\n    const {organization, location, api} = this.props;\n    return (\n      <DashboardList\n        api={api}\n        dashboards={dashboards}\n        organization={organization}\n        pageLinks={dashboardsPageLinks}\n        location={location}\n        onDashboardsChange={() => this.onDashboardsChange()}\n      />\n    );\n  }\n\n  getTitle() {\n    return t('Dashboards');\n  }\n\n  onCreate() {\n    const {organization, location} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'dashboards_manage.create.start',\n      eventName: 'Dashboards Manager: Dashboard Create Started',\n      organization_id: parseInt(organization.id, 10),\n    });\n    browserHistory.push({\n      pathname: `/organizations/${organization.slug}/dashboards/new/`,\n      query: location.query,\n    });\n  }\n\n  renderBody() {\n    const {organization} = this.props;\n\n    return (\n      <Feature\n        organization={organization}\n        features={['dashboards-edit']}\n        renderDisabled={this.renderNoAccess}\n      >\n        <SentryDocumentTitle title={t('Dashboards')} orgSlug={organization.slug}>\n          <StyledPageContent>\n            <LightWeightNoProjectMessage organization={organization}>\n              <PageContent>\n                <StyledPageHeader>\n                  {t('Dashboards')}\n                  <Button\n                    data-test-id=\"dashboard-create\"\n                    onClick={event => {\n                      event.preventDefault();\n                      this.onCreate();\n                    }}\n                    priority=\"primary\"\n                    icon={<IconAdd size=\"xs\" isCircled />}\n                  >\n                    {t('Create Dashboard')}\n                  </Button>\n                </StyledPageHeader>\n                {this.renderActions()}\n                {this.renderDashboards()}\n              </PageContent>\n            </LightWeightNoProjectMessage>\n          </StyledPageContent>\n        </SentryDocumentTitle>\n      </Feature>\n    );\n  }\n}\n\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n\nconst StyledPageHeader = styled('div')`\n  display: flex;\n  align-items: flex-end;\n  font-size: ${p => p.theme.headerFontSize};\n  color: ${p => p.theme.textColor};\n  justify-content: space-between;\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledActions = styled('div')`\n  display: grid;\n  grid-template-columns: auto max-content;\n  grid-gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    grid-template-columns: auto;\n  }\n`;\n\nexport default withApi(withOrganization(ManageDashboards));\n","import {User} from 'app/types';\n\nexport enum DisplayType {\n  AREA = 'area',\n  BAR = 'bar',\n  LINE = 'line',\n  TABLE = 'table',\n  WORLD_MAP = 'world_map',\n  BIG_NUMBER = 'big_number',\n  STACKED_AREA = 'stacked_area',\n}\n\nexport type WidgetQuery = {\n  name: string;\n  fields: string[];\n  conditions: string;\n  orderby: string;\n};\n\nexport type Widget = {\n  id?: string;\n  title: string;\n  displayType: DisplayType;\n  interval: string;\n  queries: WidgetQuery[];\n};\n\n/**\n * The response shape from dashboard list endpoint\n */\nexport type DashboardListItem = {\n  id: string;\n  title: string;\n  dateCreated?: string;\n  createdBy?: User;\n  widgetDisplay: DisplayType[];\n};\n\n/**\n * Saved dashboard with widgets\n */\nexport type DashboardDetails = {\n  title: string;\n  widgets: Widget[];\n  id: string;\n  dateCreated: string;\n  createdBy?: User;\n};\n\nexport enum DashboardState {\n  VIEW = 'view',\n  EDIT = 'edit',\n  CREATE = 'create',\n  PENDING_DELETE = 'pending_delete',\n}\n","import cloneDeep from 'lodash/cloneDeep';\n\nimport {GlobalSelection} from 'app/types';\nimport {getUtcDateString} from 'app/utils/dates';\nimport EventView from 'app/utils/discover/eventView';\n\nimport {DashboardDetails, WidgetQuery} from './types';\n\nexport function cloneDashboard(dashboard: DashboardDetails): DashboardDetails {\n  return cloneDeep(dashboard);\n}\n\nexport function eventViewFromWidget(\n  title: string,\n  query: WidgetQuery,\n  selection: GlobalSelection\n): EventView {\n  const {start, end, period: statsPeriod} = selection.datetime;\n  const {projects, environments} = selection;\n\n  return EventView.fromSavedQuery({\n    id: undefined,\n    name: title,\n    version: 2,\n    fields: query.fields,\n    query: query.conditions,\n    orderby: query.orderby,\n    projects,\n    range: statsPeriod,\n    start: start ? getUtcDateString(start) : undefined,\n    end: end ? getUtcDateString(end) : undefined,\n    environment: environments,\n  });\n}\n"],"names":["createDashboard","api","orgId","newDashboard","duplicate","title","widgets","promise","requestPromise","method","data","catch","response","errorResponse","responseJSON","addErrorMessage","t","fetchDashboard","dashboardId","updateDashboard","dashboard","id","deleteDashboard","validateWidget","widget","ActivityAvatar","className","type","user","size","SystemAvatar","StyledIconSentry","width","height","shape","p","theme","textColor","background","IconSentry","SentryDocumentTitle","orgSlug","projectSlug","children","docTitle","AsyncView","AsyncComponent","getTitle","render","this","renderComponent","ContextMenu","isOpen","getRootProps","getActorProps","getMenuProps","topLevelCx","classNames","open","MoreOptions","DropdownTarget","onClick","event","stopPropagation","preventDefault","DashboardCard","detail","createdBy","renderWidgets","dateStatus","to","onEventClick","renderContextMenu","StyledDashboardCard","interactive","CardHeader","CardContent","Title","Detail","AvatarWrapper","CardBody","CardFooter","DateSelected","DateStatus","border","space","Card","overflowEllipsis","text","familyMono","fontSizeSmall","gray300","gray100","purple300","DashboardList","organization","location","dashboards","pageLinks","onDashboardsChange","miniWidget","displayType","DisplayType","WidgetBar","WidgetArea","WidgetBigNumber","WidgetTable","WidgetWorldMap","WidgetLine","Fragment","length","DashboardGrid","map","index","pathname","slug","query","tn","widgetDisplay","dateCreated","date","undefined","WidgetGrid","i","BigNumberWidgetWrapper","WidgetImage","src","MiniWidgetWrapper","then","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","dashboard_id","addSuccessMessage","handleDelete","disabled","dashboardDetail","cloneDashboard","handleDuplicate","PaginationRow","onCursor","cursor","path","direction","offset","Number","split","newQuery","browserHistory","breakpoints","Pagination","withApi","SORT_OPTIONS","label","value","ManageDashboards","props","sort","getEndpoints","pick","getActiveSort","per_page","urlSort","decodeScalar","find","item","reloadData","handleSearch","router","push","getQuery","renderActions","activeSort","StyledActions","defaultQuery","placeholder","onSearch","buttonProps","prefix","onSelect","handleSortChange","isActive","renderNoAccess","renderDashboards","dashboardsPageLinks","state","onCreate","renderBody","features","renderDisabled","StyledPageContent","StyledPageHeader","priority","icon","isCircled","PageContent","headerFontSize","withOrganization","DashboardState","cloneDeep","eventViewFromWidget","selection","start","end","period","statsPeriod","datetime","projects","environments","EventView","name","version","fields","conditions","orderby","range","getUtcDateString","environment"],"sourceRoot":""}