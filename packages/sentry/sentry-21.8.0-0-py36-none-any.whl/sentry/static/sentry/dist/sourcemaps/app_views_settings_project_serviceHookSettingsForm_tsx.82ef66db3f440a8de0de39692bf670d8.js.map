{"version":3,"file":"chunks/app_views_settings_project_serviceHookSettingsForm_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"0mBAae,MAAMA,UAAgBC,EAAAA,UAAiB,iDAKtC,IAAIC,EAAAA,KALkC,wBAOzC,CACTC,EACAC,EACAC,KAEAC,KAAKC,MAAMC,UAAYF,KAAKC,MAAMC,SAASL,IAC3CM,EAAAA,EAAAA,KAAkBC,EAAAA,EAAAA,GAAE,oBACpBJ,KAAKK,IAAIC,QAAQN,KAAKC,MAAMM,YAAa,CACvCC,OAAQR,KAAKC,MAAMQ,UACnBZ,KAAAA,EACAa,QAASC,KACPC,EAAAA,EAAAA,MACAd,EAAUa,IAEZE,MAAOA,KACLD,EAAAA,EAAAA,MACAb,EAAQc,SAtBdC,uBACEd,KAAKK,IAAIU,QA0BXC,SACE,MACEd,SAAUe,EACVR,UAAWS,EACXX,YAAaY,KACVC,GACDpB,KAAKC,MAET,OAAO,QAAC,IAAD,CAAMC,SAAUF,KAAKE,YAAckB,KApCzB1B,EAAAA,YAAAA,W,kfCAN,MAAM2B,UAAqBC,EAAAA,UAAuB,2DAKhD,CACbC,EACAC,EACAC,EACAC,KAGA,MAAMC,EAAW3B,KAAK4B,aAAaL,GACnCC,EAASG,EAAUD,GACnBD,EAAOE,EAAUD,MAbnBE,YAAYL,GACV,QAASA,EAeXP,SACE,MAAM,QAACa,KAAYC,GAAc9B,KAAKC,MAEtC,OACE,QAAC,IAAD,IACM6B,EACJC,cAAY,EACZC,MAAO,EACLR,SAAAA,EACAC,OAAAA,EACAF,MAAAA,EACAU,SAAAA,KACGhC,MAQH,MAAMiC,EAAelC,KAAKkC,aAAaC,KAAKnC,KAAMuB,EAAOC,EAAUC,GAE7DW,EAAc,IACfnC,EACHoC,KAAM,KACNC,WAAYf,EACZgB,WAAYN,EACZO,OAAQN,GAGV,OAAIL,GAEA,QAAC,IAAD,CACEY,cAAe,IAAMZ,IAAUN,GAAOmB,YACtCC,UAAW,IAAMT,EAAa,IAFhC,SAIG,EAAEU,KAAAA,MACD,QAAC,IAAD,IACMR,EACJI,OAASd,IAGHG,IAAUN,GAAOmB,YAEnBE,IAIFV,EAAaR,SAQlB,QAAC,IAAD,IAAYU,QAzERf,EAAAA,YAAAA,gB,ieCPrB,MAAMwB,GAA0B,OAAO,MAAP,sBAAH,sDAKvBC,GAAQ,OAAO,QAAP,sBAAH,gHAQLC,GAAgB,OAAO,OAAP,sBAAH,2CAanB,MAAMC,UAAyB1B,EAAAA,UAAuB,uDACzC,CAAC2B,EAAgCvB,KAC1C,MAAM,MAACH,EAAD,SAAQC,GAAYxB,KAAKC,MAC/B,IAAI0B,EAA0B,GAEN,mBAAbH,IAKTG,EADED,EAAEwB,OAAOC,QACA5B,EAAQ,IAAIA,EAAO0B,GAAiB,CAAC1B,GAErCA,EAAM6B,QAAOC,GAAKA,IAAMJ,IAGrCzB,EAASG,EAAUD,OAGrBV,SACE,MAAM,SAACiB,EAAD,QAAWqB,EAAX,MAAoB/B,GAASvB,KAAKC,MAExC,OACE,QAAC4C,EAAD,UACGS,EAAQC,KAAI,EAAEC,EAAaC,MAC1B,QAACC,EAAD,WACE,QAACZ,EAAD,YACE,iBACEa,KAAK,WACLpC,MAAOiC,EACPhC,SAAUxB,KAAKwB,SAASW,KAAKnC,KAAMwD,GACnCvB,SAAUA,EACVkB,SAASS,EAAAA,EAAAA,IAAQrC,KAA0C,IAAhCA,EAAMsC,QAAQL,MAE3C,QAACT,EAAD,UAAgBU,QATCD,QAxBzBR,EAAAA,YAAAA,mBA0CN,UAEMU,GAAiB,OAAO,MAAP,sBAAH,kCAGGI,GAAKA,EAAEC,MAAMC,YAAY,IAH5B,oCAMGF,GAAKA,EAAEC,MAAMC,YAAY,IAN5B,wCASGF,GAAKA,EAAEC,MAAMC,YAAY,IAT5B,kB,iPCxEL,SAASC,EAAUhE,GAChC,OAAO,QAAC,IAAD,IAAgBA,EAAO0D,KAAK,SADbM,EAAAA,YAAAA,a,0xBCQxB,MAAMC,EAAyB,CAAC,cAAe,iBAAiBX,KAAI7B,GAAK,CAACA,EAAGA,KAS9D,MAAMyC,UAAgCxE,EAAAA,UAAiB,8DAClD,KAChB,MAAM,MAACyE,EAAD,UAAQC,GAAarE,KAAKC,MAChCqE,EAAAA,eAAAA,KAAA,oBAAiCF,EAAjC,qBAAmDC,EAAnD,eAGFrD,SACE,MAAM,YAACuD,EAAD,MAAcH,EAAd,UAAqBC,EAArB,OAAgCG,GAAUxE,KAAKC,MAE/CwE,EAAWD,EAAM,oBACNJ,EADM,YACGC,EADH,kBACsBG,EADtB,yBAENJ,EAFM,YAEGC,EAFH,WAIvB,OACE,QAAC,KAAD,WACE,QAAC,IAAD,CACE5D,UAAW+D,EAAS,MAAQ,OAC5BjE,YAAakE,EACbF,YAAaA,EACbG,gBAAiB1E,KAAK0E,gBACtBC,YAAa,CACXC,UAAW,EACXC,aAAc,IAEhBC,YAAaN,GAASpE,EAAAA,EAAAA,GAAE,iBAAkBA,EAAAA,EAAAA,GAAE,eAT9C,WAWE,QAAC,KAAD,WAAcA,EAAAA,EAAAA,GAAE,yBAChB,QAAC,IAAD,YACE,QAAC,IAAD,CAAc2E,KAAK,WAAWC,OAAO5E,EAAAA,EAAAA,GAAE,aACvC,QAAC,IAAD,CACE2E,KAAK,MACLC,OAAO5E,EAAAA,EAAAA,GAAE,OACT6E,UAAQ,EACRC,MAAM9E,EAAAA,EAAAA,GAAE,yCAEV,QAAC,IAAD,CACE2E,KAAK,SACLC,OAAO5E,EAAAA,EAAAA,GAAE,UACT+E,QAAQ,EACRD,MAAM9E,EAAAA,EAAAA,GAAE,6CAJV,SAMG,EAAEmB,MAAAA,EAAOC,SAAAA,MACR,QAAC,IAAD,CACEA,SAAUA,EACVD,MAAOA,EACP+B,QAASY,eA7CNC,EAAAA,YAAAA","sources":["webpack:///./app/views/settings/components/forms/apiForm.tsx","webpack:///./app/views/settings/components/forms/booleanField.tsx","webpack:///./app/views/settings/components/forms/controls/multipleCheckbox.tsx","webpack:///./app/views/settings/components/forms/textField.tsx","webpack:///./app/views/settings/project/serviceHookSettingsForm.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport {addLoadingMessage, clearIndicators} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport {t} from 'app/locale';\nimport Form from 'app/views/settings/components/forms/form';\n\ntype Props = Form['props'] & {\n  onSubmit?: (data: Record<string, any>) => void;\n  apiMethod: string;\n  apiEndpoint: string;\n};\n\nexport default class ApiForm extends Component<Props> {\n  componentWillUnmount() {\n    this.api.clear();\n  }\n\n  api: Client = new Client();\n\n  onSubmit = (\n    data: Record<string, any>,\n    onSuccess: (response: Record<string, any>) => void,\n    onError: (error: any) => void\n  ) => {\n    this.props.onSubmit && this.props.onSubmit(data);\n    addLoadingMessage(t('Saving changes\\u2026'));\n    this.api.request(this.props.apiEndpoint, {\n      method: this.props.apiMethod,\n      data,\n      success: response => {\n        clearIndicators();\n        onSuccess(response);\n      },\n      error: error => {\n        clearIndicators();\n        onError(error);\n      },\n    });\n  };\n\n  render() {\n    const {\n      onSubmit: _onSubmit,\n      apiMethod: _apiMethod,\n      apiEndpoint: _apiEndpoint,\n      ...otherProps\n    } = this.props;\n\n    return <Form onSubmit={this.onSubmit} {...otherProps} />;\n  }\n}\n","import * as React from 'react';\n\nimport Confirm from 'app/components/confirm';\nimport Switch from 'app/components/switchButton';\nimport InputField, {onEvent} from 'app/views/settings/components/forms/inputField';\n\ntype Props = {\n  confirm?: {\n    true?: React.ReactNode;\n    false?: React.ReactNode;\n  };\n} & InputField['props'];\n\nexport default class BooleanField extends React.Component<Props> {\n  coerceValue(value: any) {\n    return !!value;\n  }\n\n  handleChange = (\n    value: any,\n    onChange: onEvent,\n    onBlur: onEvent,\n    e: React.FormEvent<HTMLInputElement>\n  ) => {\n    // We need to toggle current value because Switch is not an input\n    const newValue = this.coerceValue(!value);\n    onChange(newValue, e);\n    onBlur(newValue, e);\n  };\n\n  render() {\n    const {confirm, ...fieldProps} = this.props;\n\n    return (\n      <InputField\n        {...fieldProps}\n        resetOnError\n        field={({\n          onChange,\n          onBlur,\n          value,\n          disabled,\n          ...props\n        }: {\n          onChange: onEvent;\n          onBlur: onEvent;\n          value: any;\n          disabled: boolean;\n        }) => {\n          // Create a function with required args bound\n          const handleChange = this.handleChange.bind(this, value, onChange, onBlur);\n\n          const switchProps = {\n            ...props,\n            size: 'lg' as React.ComponentProps<typeof Switch>['size'],\n            isActive: !!value,\n            isDisabled: disabled,\n            toggle: handleChange,\n          };\n\n          if (confirm) {\n            return (\n              <Confirm\n                renderMessage={() => confirm[(!value).toString()]}\n                onConfirm={() => handleChange({})}\n              >\n                {({open}) => (\n                  <Switch\n                    {...switchProps}\n                    toggle={(e: React.MouseEvent) => {\n                      // If we have a `confirm` prop and enabling switch\n                      // Then show confirm dialog, otherwise propagate change as normal\n                      if (confirm[(!value).toString()]) {\n                        // Open confirm modal\n                        open();\n                        return;\n                      }\n\n                      handleChange(e);\n                    }}\n                  />\n                )}\n              </Confirm>\n            );\n          }\n\n          return <Switch {...switchProps} />;\n        }}\n      />\n    );\n  }\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Choices} from 'app/types';\nimport {defined} from 'app/utils';\n\nconst MultipleCheckboxWrapper = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Label = styled('label')`\n  font-weight: normal;\n  white-space: nowrap;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  width: 20%;\n`;\n\nconst CheckboxLabel = styled('span')`\n  margin-left: 3px;\n`;\n\ntype SelectedValue = (string | number)[];\n\ntype Props = {\n  value: (string | number)[];\n  choices: Choices;\n  onChange?: (value: SelectedValue, event: React.ChangeEvent<HTMLInputElement>) => void;\n  disabled?: boolean;\n};\n\nclass MultipleCheckbox extends React.Component<Props> {\n  onChange = (selectedValue: string | number, e: React.ChangeEvent<HTMLInputElement>) => {\n    const {value, onChange} = this.props;\n    let newValue: SelectedValue = [];\n\n    if (typeof onChange !== 'function') {\n      return;\n    }\n\n    if (e.target.checked) {\n      newValue = value ? [...value, selectedValue] : [value];\n    } else {\n      newValue = value.filter(v => v !== selectedValue);\n    }\n\n    onChange(newValue, e);\n  };\n\n  render() {\n    const {disabled, choices, value} = this.props;\n\n    return (\n      <MultipleCheckboxWrapper>\n        {choices.map(([choiceValue, choiceLabel]) => (\n          <LabelContainer key={choiceValue}>\n            <Label>\n              <input\n                type=\"checkbox\"\n                value={choiceValue}\n                onChange={this.onChange.bind(this, choiceValue)}\n                disabled={disabled}\n                checked={defined(value) && value.indexOf(choiceValue) !== -1}\n              />\n              <CheckboxLabel>{choiceLabel}</CheckboxLabel>\n            </Label>\n          </LabelContainer>\n        ))}\n      </MultipleCheckboxWrapper>\n    );\n  }\n}\n\nexport default MultipleCheckbox;\n\nconst LabelContainer = styled('div')`\n  width: 100%;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    width: 50%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    width: 33.333%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    width: 25%;\n  }\n`;\n","import InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = InputField['props'];\n\nexport default function TextField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"text\" />;\n}\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport {Choices, ServiceHook} from 'app/types';\nimport ApiForm from 'app/views/settings/components/forms/apiForm';\nimport BooleanField from 'app/views/settings/components/forms/booleanField';\nimport MultipleCheckbox from 'app/views/settings/components/forms/controls/multipleCheckbox';\nimport FormField from 'app/views/settings/components/forms/formField';\nimport TextField from 'app/views/settings/components/forms/textField';\n\nconst EVENT_CHOICES: Choices = ['event.alert', 'event.created'].map(e => [e, e]);\n\ntype Props = {\n  orgId: string;\n  projectId: string;\n  initialData: Partial<ServiceHook> & {isActive: boolean};\n  hookId?: string;\n};\n\nexport default class ServiceHookSettingsForm extends Component<Props> {\n  onSubmitSuccess = () => {\n    const {orgId, projectId} = this.props;\n    browserHistory.push(`/settings/${orgId}/projects/${projectId}/hooks/`);\n  };\n\n  render() {\n    const {initialData, orgId, projectId, hookId} = this.props;\n\n    const endpoint = hookId\n      ? `/projects/${orgId}/${projectId}/hooks/${hookId}/`\n      : `/projects/${orgId}/${projectId}/hooks/`;\n\n    return (\n      <Panel>\n        <ApiForm\n          apiMethod={hookId ? 'PUT' : 'POST'}\n          apiEndpoint={endpoint}\n          initialData={initialData}\n          onSubmitSuccess={this.onSubmitSuccess}\n          footerStyle={{\n            marginTop: 0,\n            paddingRight: 20,\n          }}\n          submitLabel={hookId ? t('Save Changes') : t('Create Hook')}\n        >\n          <PanelHeader>{t('Hook Configuration')}</PanelHeader>\n          <PanelBody>\n            <BooleanField name=\"isActive\" label={t('Active')} />\n            <TextField\n              name=\"url\"\n              label={t('URL')}\n              required\n              help={t('The URL which will receive events.')}\n            />\n            <FormField\n              name=\"events\"\n              label={t('Events')}\n              inline={false}\n              help={t('The event types you wish to subscribe to.')}\n            >\n              {({value, onChange}) => (\n                <MultipleCheckbox\n                  onChange={onChange}\n                  value={value}\n                  choices={EVENT_CHOICES}\n                />\n              )}\n            </FormField>\n          </PanelBody>\n        </ApiForm>\n      </Panel>\n    );\n  }\n}\n"],"names":["ApiForm","Component","Client","data","onSuccess","onError","this","props","onSubmit","addLoadingMessage","t","api","request","apiEndpoint","method","apiMethod","success","response","clearIndicators","error","componentWillUnmount","clear","render","_onSubmit","_apiMethod","_apiEndpoint","otherProps","BooleanField","React","value","onChange","onBlur","e","newValue","coerceValue","confirm","fieldProps","resetOnError","field","disabled","handleChange","bind","switchProps","size","isActive","isDisabled","toggle","renderMessage","toString","onConfirm","open","MultipleCheckboxWrapper","Label","CheckboxLabel","MultipleCheckbox","selectedValue","target","checked","filter","v","choices","map","choiceValue","choiceLabel","LabelContainer","type","defined","indexOf","p","theme","breakpoints","TextField","EVENT_CHOICES","ServiceHookSettingsForm","orgId","projectId","browserHistory","initialData","hookId","endpoint","onSubmitSuccess","footerStyle","marginTop","paddingRight","submitLabel","name","label","required","help","inline"],"sourceRoot":""}