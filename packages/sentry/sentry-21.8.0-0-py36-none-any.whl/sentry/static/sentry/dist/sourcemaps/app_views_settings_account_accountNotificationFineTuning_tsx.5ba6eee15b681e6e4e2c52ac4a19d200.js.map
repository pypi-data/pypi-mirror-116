{"version":3,"file":"chunks/app_views_settings_account_accountNotificationFineTuning_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/account/notifications/fields.tsx","webpack:///./app/views/settings/account/notifications/notificationSettingsByOrganization.tsx","webpack:///./app/views/settings/account/notifications/notificationSettingsByProjects.tsx","webpack:///./app/views/settings/account/notifications/notificationSettingsByType.tsx","webpack:///./app/views/settings/account/accountNotificationFineTuning.tsx","webpack:///./app/views/settings/components/defaultSearchBar.tsx"],"sourcesContent":["import {t} from 'app/locale';\n\nexport type FineTuneField = {\n  title: string;\n  description: string;\n  type: 'select';\n  choices?: string[][];\n  defaultValue?: string;\n  defaultFieldName?: string;\n};\n\nexport const ACCOUNT_NOTIFICATION_FIELDS: Record<string, FineTuneField> = {\n  alerts: {\n    title: 'Project Alerts',\n    description: t(\n      'Notifications from Alert Rules that your team has setup. Youâ€™ll always receive notifications from Alerts configured to be sent directly to you.'\n    ),\n    type: 'select',\n    choices: [\n      ['-1', t('Default')],\n      ['1', t('On')],\n      ['0', t('Off')],\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'subscribeByDefault',\n  },\n  workflow: {\n    title: 'Workflow Notifications',\n    description: t(\n      'Control workflow notifications, e.g. changes in issue assignment, resolution status, and comments.'\n    ),\n    type: 'select',\n    choices: [\n      ['-1', t('Default')],\n      ['0', t('Always')],\n      ['1', t('Only on issues I subscribe to')],\n      ['2', t('Never')],\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'workflowNotifications',\n  },\n  deploy: {\n    title: t('Deploy Notifications'),\n    description: t(\n      'Control deploy notifications that include release, environment, and commit overviews.'\n    ),\n    type: 'select',\n    choices: [\n      ['-1', t('Default')],\n      ['2', t('Always')],\n      ['3', t('Only on deploys with my commits')],\n      ['4', t('Never')],\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'deployNotifications',\n  },\n  reports: {\n    title: t('Weekly Reports'),\n    description: t(\n      \"Reports contain a summary of what's happened within the organization.\"\n    ),\n    type: 'select',\n    // API only saves organizations that have this disabled, so we should default to \"On\"\n    defaultValue: '1',\n    choices: [\n      ['1', t('On')],\n      ['0', t('Off')],\n    ],\n    defaultFieldName: 'weeklyReports',\n  },\n\n  email: {\n    title: t('Email Routing'),\n    description: t(\n      'On a per project basis, route emails to an alternative email address.'\n    ),\n    type: 'select',\n    // No choices here because it's going to have dynamic content\n    // Component will create choices\n  },\n};\n","import React from 'react';\n\nimport {t} from 'app/locale';\nimport {OrganizationSummary} from 'app/types';\nimport withOrganizations from 'app/utils/withOrganizations';\nimport {\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n} from 'app/views/settings/account/notifications/constants';\nimport {\n  getParentData,\n  getParentField,\n} from 'app/views/settings/account/notifications/utils';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\n\ntype Props = {\n  notificationType: string;\n  notificationSettings: NotificationSettingsObject;\n  organizations: OrganizationSummary[];\n  onChange: (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ) => NotificationSettingsObject;\n};\n\ntype State = {};\n\nclass NotificationSettingsByOrganization extends React.Component<Props, State> {\n  render() {\n    const {notificationType, notificationSettings, onChange, organizations} = this.props;\n\n    return (\n      <Form\n        saveOnBlur\n        apiMethod=\"PUT\"\n        apiEndpoint=\"/users/me/notification-settings/\"\n        initialData={getParentData(notificationType, notificationSettings, organizations)}\n      >\n        <JsonForm\n          title={t('Organizations')}\n          fields={organizations.map(organization =>\n            getParentField(notificationType, notificationSettings, organization, onChange)\n          )}\n        />\n      </Form>\n    );\n  }\n}\n\nexport default withOrganizations(NotificationSettingsByOrganization);\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Pagination from 'app/components/pagination';\nimport {t} from 'app/locale';\nimport {Project} from 'app/types';\nimport {sortProjects} from 'app/utils';\nimport {\n  MIN_PROJECTS_FOR_PAGINATION,\n  MIN_PROJECTS_FOR_SEARCH,\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n} from 'app/views/settings/account/notifications/constants';\nimport {\n  getParentData,\n  getParentField,\n  groupByOrganization,\n} from 'app/views/settings/account/notifications/utils';\nimport {\n  RenderSearch,\n  SearchWrapper,\n} from 'app/views/settings/components/defaultSearchBar';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\n\ntype Props = {\n  notificationType: string;\n  notificationSettings: NotificationSettingsObject;\n  onChange: (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ) => NotificationSettingsObject;\n} & AsyncComponent['props'];\n\ntype State = {\n  projects: Project[];\n} & AsyncComponent['state'];\n\nclass NotificationSettingsByProjects extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      projects: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['projects', '/projects/']];\n  }\n\n  getProjectCount = (): number => {\n    /** Check the notification settings for how many projects there are. */\n    const {notificationType, notificationSettings} = this.props;\n\n    return Object.values(notificationSettings[notificationType]?.project || {}).length;\n  };\n\n  getGroupedProjects = (): {[key: string]: Project[]} => {\n    /**\n     * The UI expects projects to be grouped by organization but can also use\n     * this function to make a single group with all organizations.\n     */\n    const {projects: stateProjects} = this.state;\n\n    return Object.fromEntries(\n      Object.values(groupByOrganization(sortProjects(stateProjects))).map(\n        ({organization, projects}) => [`${organization.name} Projects`, projects]\n      )\n    );\n  };\n\n  renderBody() {\n    const {notificationType, notificationSettings, onChange} = this.props;\n    const {projects, projectsPageLinks} = this.state;\n\n    const canSearch = this.getProjectCount() >= MIN_PROJECTS_FOR_SEARCH;\n    const shouldPaginate = projects.length >= MIN_PROJECTS_FOR_PAGINATION;\n\n    // eslint-disable-next-line react/prop-types\n    const renderSearch: RenderSearch = ({defaultSearchBar}) => (\n      <StyledSearchWrapper>{defaultSearchBar}</StyledSearchWrapper>\n    );\n    return (\n      <React.Fragment>\n        {canSearch &&\n          this.renderSearchInput({\n            stateKey: 'projects',\n            url: '/projects/',\n            placeholder: t('Search Projects'),\n            children: renderSearch,\n          })}\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/users/me/notification-settings/\"\n          initialData={getParentData(notificationType, notificationSettings, projects)}\n        >\n          {projects.length === 0 ? (\n            <EmptyMessage>{t('No projects found')}</EmptyMessage>\n          ) : (\n            Object.entries(this.getGroupedProjects()).map(([groupTitle, parents]) => (\n              <JsonForm\n                key={groupTitle}\n                title={groupTitle}\n                fields={parents.map(parent =>\n                  getParentField(notificationType, notificationSettings, parent, onChange)\n                )}\n              />\n            ))\n          )}\n        </Form>\n        {canSearch && shouldPaginate && (\n          <Pagination pageLinks={projectsPageLinks} {...this.props} />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default NotificationSettingsByProjects;\n\nconst StyledSearchWrapper = styled(SearchWrapper)`\n  * {\n    width: 100%;\n  }\n`;\n","import React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport {t} from 'app/locale';\nimport {\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n} from 'app/views/settings/account/notifications/constants';\nimport FeedbackAlert from 'app/views/settings/account/notifications/feedbackAlert';\nimport {ACCOUNT_NOTIFICATION_FIELDS} from 'app/views/settings/account/notifications/fields';\nimport {NOTIFICATION_SETTING_FIELDS} from 'app/views/settings/account/notifications/fields2';\nimport NotificationSettingsByOrganization from 'app/views/settings/account/notifications/notificationSettingsByOrganization';\nimport NotificationSettingsByProjects from 'app/views/settings/account/notifications/notificationSettingsByProjects';\nimport {\n  getCurrentDefault,\n  getCurrentProviders,\n  getParentIds,\n  getStateToPutForDefault,\n  getStateToPutForParent,\n  getStateToPutForProvider,\n  isEverythingDisabled,\n  isGroupedByProject,\n  mergeNotificationSettings,\n  providerListToString,\n} from 'app/views/settings/account/notifications/utils';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport {FieldObject} from 'app/views/settings/components/forms/type';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = {\n  notificationType: string;\n} & AsyncComponent['props'];\n\ntype State = {\n  notificationSettings: NotificationSettingsObject;\n} & AsyncComponent['state'];\n\nclass NotificationSettingsByType extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      notificationSettings: {},\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {notificationType} = this.props;\n\n    const query = {type: notificationType};\n    return [['notificationSettings', `/users/me/notification-settings/`, {query}]];\n  }\n\n  /* Methods responsible for updating state and hitting the API. */\n\n  getStateToPutForProvider = (\n    changedData: NotificationSettingsByProviderObject\n  ): NotificationSettingsObject => {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForProvider(\n      notificationType,\n      notificationSettings,\n      changedData\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n\n    return updatedNotificationSettings;\n  };\n\n  getStateToPutForDefault = (\n    changedData: NotificationSettingsByProviderObject\n  ): NotificationSettingsObject => {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForDefault(\n      notificationType,\n      notificationSettings,\n      changedData,\n      getParentIds(notificationType, notificationSettings)\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n\n    return updatedNotificationSettings;\n  };\n\n  getStateToPutForParent = (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ): NotificationSettingsObject => {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForParent(\n      notificationType,\n      notificationSettings,\n      changedData,\n      parentId\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n    return updatedNotificationSettings;\n  };\n\n  /* Methods responsible for rendering the page. */\n\n  getInitialData(): {[key: string]: string} {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const initialData = {\n      [notificationType]: getCurrentDefault(notificationType, notificationSettings),\n    };\n    if (!isEverythingDisabled(notificationType, notificationSettings)) {\n      initialData.provider = providerListToString(\n        getCurrentProviders(notificationType, notificationSettings)\n      );\n    }\n    return initialData;\n  }\n\n  getFields(): FieldObject[] {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const fields = [\n      Object.assign({}, NOTIFICATION_SETTING_FIELDS[notificationType], {\n        help: t('This is the default for all projects.'),\n        getData: data => this.getStateToPutForDefault(data),\n      }),\n    ];\n    if (!isEverythingDisabled(notificationType, notificationSettings)) {\n      fields.push(\n        Object.assign(\n          {\n            help: t('Where personal notifications will be sent.'),\n            getData: data => this.getStateToPutForProvider(data),\n          },\n          NOTIFICATION_SETTING_FIELDS.provider\n        )\n      );\n    }\n    return fields as FieldObject[];\n  }\n\n  renderBody() {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const {title, description} = ACCOUNT_NOTIFICATION_FIELDS[notificationType];\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader title={title} />\n        {description && <TextBlock>{description}</TextBlock>}\n        <FeedbackAlert />\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/users/me/notification-settings/\"\n          initialData={this.getInitialData()}\n        >\n          <JsonForm\n            title={\n              isGroupedByProject(notificationType)\n                ? t('All Projects')\n                : t('All Organizations')\n            }\n            fields={this.getFields()}\n          />\n        </Form>\n        {!isEverythingDisabled(notificationType, notificationSettings) &&\n          (isGroupedByProject(notificationType) ? (\n            <NotificationSettingsByProjects\n              notificationType={notificationType}\n              notificationSettings={notificationSettings}\n              onChange={this.getStateToPutForParent}\n            />\n          ) : (\n            <NotificationSettingsByOrganization\n              notificationType={notificationType}\n              notificationSettings={notificationSettings}\n              onChange={this.getStateToPutForParent}\n            />\n          ))}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default NotificationSettingsByType;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {fields} from 'app/data/forms/accountNotificationSettings';\nimport {t} from 'app/locale';\nimport {Organization, Project, UserEmail} from 'app/types';\nimport withOrganizations from 'app/utils/withOrganizations';\nimport AsyncView from 'app/views/asyncView';\nimport {\n  ACCOUNT_NOTIFICATION_FIELDS,\n  FineTuneField,\n} from 'app/views/settings/account/notifications/fields';\nimport NotificationSettingsByType from 'app/views/settings/account/notifications/notificationSettingsByType';\nimport {\n  groupByOrganization,\n  isGroupedByProject,\n} from 'app/views/settings/account/notifications/utils';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SelectField from 'app/views/settings/components/forms/selectField';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst PanelBodyLineItem = styled(PanelBody)`\n  font-size: 1.4rem;\n  &:not(:last-child) {\n    border-bottom: 1px solid ${p => p.theme.innerBorder};\n  }\n`;\n\ntype ANBPProps = {\n  projects: Project[];\n  field: FineTuneField;\n};\n\nconst AccountNotificationsByProject = ({projects, field}: ANBPProps) => {\n  const projectsByOrg = groupByOrganization(projects);\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {title, description, ...fieldConfig} = field;\n\n  // Display as select box in this view regardless of the type specified in the config\n  const data = Object.values(projectsByOrg).map(org => ({\n    name: org.organization.name,\n    projects: org.projects.map(project => ({\n      ...fieldConfig,\n      // `name` key refers to field name\n      // we use project.id because slugs are not unique across orgs\n      name: project.id,\n      label: project.slug,\n    })),\n  }));\n\n  return (\n    <Fragment>\n      {data.map(({name, projects: projectFields}) => (\n        <div key={name}>\n          <PanelHeader>{name}</PanelHeader>\n          {projectFields.map(f => (\n            <PanelBodyLineItem key={f.name}>\n              <SelectField\n                defaultValue={f.defaultValue}\n                name={f.name}\n                choices={f.choices}\n                label={f.label}\n              />\n            </PanelBodyLineItem>\n          ))}\n        </div>\n      ))}\n    </Fragment>\n  );\n};\n\ntype ANBOProps = {\n  organizations: Organization[];\n  field: FineTuneField;\n};\n\nconst AccountNotificationsByOrganization = ({organizations, field}: ANBOProps) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {title, description, ...fieldConfig} = field;\n\n  // Display as select box in this view regardless of the type specified in the config\n  const data = organizations.map(org => ({\n    ...fieldConfig,\n    // `name` key refers to field name\n    // we use org.id to remain consistent project.id use (which is required because slugs are not unique across orgs)\n    name: org.id,\n    label: org.slug,\n  }));\n\n  return (\n    <Fragment>\n      {data.map(f => (\n        <PanelBodyLineItem key={f.name}>\n          <SelectField\n            defaultValue={f.defaultValue}\n            name={f.name}\n            choices={f.choices}\n            label={f.label}\n          />\n        </PanelBodyLineItem>\n      ))}\n    </Fragment>\n  );\n};\n\nconst AccountNotificationsByOrganizationContainer = withOrganizations(\n  AccountNotificationsByOrganization\n);\n\ntype Props = AsyncView['props'] &\n  RouteComponentProps<{fineTuneType: string}, {}> & {\n    organizations: Organization[];\n  };\n\ntype State = AsyncView['state'] & {\n  emails: UserEmail[] | null;\n  projects: Project[] | null;\n  notifications: Record<string, any> | null;\n  fineTuneData: Record<string, any> | null;\n};\n\nclass AccountNotificationFineTuning extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {fineTuneType} = this.props.params;\n    const endpoints = [\n      ['notifications', '/users/me/notifications/'],\n      ['fineTuneData', `/users/me/notifications/${fineTuneType}/`],\n    ];\n\n    if (isGroupedByProject(fineTuneType)) {\n      endpoints.push(['projects', '/projects/']);\n    }\n\n    endpoints.push(['emails', '/users/me/emails/']);\n    if (fineTuneType === 'email') {\n      endpoints.push(['emails', '/users/me/emails/']);\n    }\n\n    return endpoints as ReturnType<AsyncView['getEndpoints']>;\n  }\n\n  // Return a sorted list of user's verified emails\n  get emailChoices() {\n    return (\n      this.state.emails\n        ?.filter(({isVerified}) => isVerified)\n        ?.sort((a, b) => {\n          // Sort by primary -> email\n          if (a.isPrimary) {\n            return -1;\n          } else if (b.isPrimary) {\n            return 1;\n          }\n\n          return a.email < b.email ? -1 : 1;\n        }) ?? []\n    );\n  }\n\n  renderBody() {\n    const {params, organizations} = this.props;\n    const {fineTuneType} = params;\n\n    if (\n      ['alerts', 'deploy', 'workflow'].includes(fineTuneType) &&\n      organizations.some(organization =>\n        organization.features.includes('notification-platform')\n      )\n    ) {\n      return <NotificationSettingsByType notificationType={fineTuneType} />;\n    }\n\n    const {notifications, projects, fineTuneData, projectsPageLinks} = this.state;\n\n    const isProject = isGroupedByProject(fineTuneType);\n    const field = ACCOUNT_NOTIFICATION_FIELDS[fineTuneType];\n    const {title, description} = field;\n\n    const [stateKey, url] = isProject ? this.getEndpoints()[2] : [];\n    const hasProjects = !!projects?.length;\n\n    if (fineTuneType === 'email') {\n      // Fetch verified email addresses\n      field.choices = this.emailChoices.map(({email}) => [email, email]);\n    }\n\n    if (!notifications || !fineTuneData) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={title} />\n        {description && <TextBlock>{description}</TextBlock>}\n\n        {field &&\n          field.defaultFieldName &&\n          // not implemented yet\n          field.defaultFieldName !== 'weeklyReports' && (\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint=\"/users/me/notifications/\"\n              initialData={notifications}\n            >\n              <JsonForm\n                title={`Default ${title}`}\n                fields={[fields[field.defaultFieldName]]}\n              />\n            </Form>\n          )}\n        <Panel>\n          <PanelBody>\n            <PanelHeader hasButtons={isProject}>\n              <Heading>{isProject ? t('Projects') : t('Organizations')}</Heading>\n              <div>\n                {isProject &&\n                  this.renderSearchInput({\n                    placeholder: t('Search Projects'),\n                    url,\n                    stateKey,\n                  })}\n              </div>\n            </PanelHeader>\n\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint={`/users/me/notifications/${fineTuneType}/`}\n              initialData={fineTuneData}\n            >\n              {isProject && hasProjects && (\n                <AccountNotificationsByProject projects={projects!} field={field} />\n              )}\n\n              {isProject && !hasProjects && (\n                <EmptyMessage>{t('No projects found')}</EmptyMessage>\n              )}\n\n              {!isProject && (\n                <AccountNotificationsByOrganizationContainer field={field} />\n              )}\n            </Form>\n          </PanelBody>\n        </Panel>\n\n        {projects && <Pagination pageLinks={projectsPageLinks} {...this.props} />}\n      </div>\n    );\n  }\n}\n\nconst Heading = styled('div')`\n  flex: 1;\n`;\n\nexport default withOrganizations(AccountNotificationFineTuning);\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport AsyncView from 'app/views/asyncView';\n\nexport type RenderSearch = React.ComponentProps<\n  typeof AsyncView.prototype.renderSearchInput\n>['children'];\n\nexport const SearchWrapper = styled('div')`\n  display: flex;\n  grid-template-columns: 1fr max-content;\n  grid-gap: ${space(1.5)};\n  margin-top: ${space(4)};\n  margin-bottom: ${space(1.5)};\n  position: relative;\n`;\n"],"names":["ACCOUNT_NOTIFICATION_FIELDS","alerts","title","description","t","type","choices","defaultValue","defaultFieldName","workflow","deploy","reports","email","NotificationSettingsByOrganization","React","render","notificationType","notificationSettings","onChange","organizations","this","props","saveOnBlur","apiMethod","apiEndpoint","initialData","getParentData","fields","map","organization","getParentField","withOrganizations","NotificationSettingsByProjects","AsyncComponent","Object","values","project","length","projects","stateProjects","state","fromEntries","groupByOrganization","sortProjects","name","getDefaultState","super","getEndpoints","renderBody","projectsPageLinks","canSearch","getProjectCount","MIN_PROJECTS_FOR_SEARCH","shouldPaginate","MIN_PROJECTS_FOR_PAGINATION","renderSearchInput","stateKey","url","placeholder","children","defaultSearchBar","StyledSearchWrapper","entries","getGroupedProjects","groupTitle","parents","parent","pageLinks","SearchWrapper","NotificationSettingsByType","changedData","updatedNotificationSettings","getStateToPutForProvider","setState","mergeNotificationSettings","getStateToPutForDefault","getParentIds","parentId","getStateToPutForParent","query","getInitialData","getCurrentDefault","isEverythingDisabled","provider","providerListToString","getCurrentProviders","getFields","assign","NOTIFICATION_SETTING_FIELDS","help","getData","data","push","isGroupedByProject","PanelBodyLineItem","PanelBody","p","theme","innerBorder","AccountNotificationsByProject","field","projectsByOrg","fieldConfig","org","id","label","slug","Fragment","projectFields","f","AccountNotificationsByOrganization","AccountNotificationsByOrganizationContainer","AccountNotificationFineTuning","AsyncView","fineTuneType","params","endpoints","emails","filter","isVerified","sort","a","b","isPrimary","includes","some","features","notifications","fineTuneData","isProject","hasProjects","emailChoices","hasButtons","Heading","space"],"sourceRoot":""}