{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamSettings_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/data/forms/teamSettingsFields.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/organizationTeams/teamSettings/model.tsx","webpack:///./app/views/settings/organizationTeams/teamSettings/index.tsx"],"sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport {tct} from 'app/locale';\nimport {Team} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {uniqueId} from 'app/utils/guid';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import {t} from 'app/locale';\nimport slugify from 'app/utils/slugify';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/teams/:teamId/settings/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Team Settings',\n    fields: [\n      {\n        name: 'slug',\n        type: 'string',\n        required: true,\n        label: t('Name'),\n        placeholder: 'e.g. api-team',\n        help: t('A unique ID used to identify the team'),\n        disabled: ({access}) => !access.has('team:write'),\n        transformInput: slugify,\n\n        saveOnBlur: false,\n        saveMessageAlertType: 'info',\n        saveMessage: t('You will be redirected to the new team slug after saving'),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n","import {updateTeam} from 'app/actionCreators/teams';\nimport FormModel from 'app/views/settings/components/forms/model';\n\nclass TeamFormModel extends FormModel {\n  public orgId: string;\n  public teamId: string;\n\n  constructor(orgId: string, teamId: string) {\n    super();\n    this.orgId = orgId;\n    this.teamId = teamId;\n  }\n\n  doApiRequest({data}) {\n    return new Promise((resolve, reject) =>\n      updateTeam(\n        this.api,\n        {\n          orgId: this.orgId,\n          teamId: this.teamId,\n          data,\n        },\n        {\n          success: resolve,\n          error: reject,\n        }\n      )\n    );\n  }\n}\n\nexport default TeamFormModel;\n","import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {removeTeam, updateTeamSuccess} from 'app/actionCreators/teams';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport {Panel, PanelHeader} from 'app/components/panels';\nimport teamSettingsFields from 'app/data/forms/teamSettingsFields';\nimport {IconDelete} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport {LightWeightOrganization, Scope, Team} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\nimport Field from 'app/views/settings/components/forms/field';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport FormModel from 'app/views/settings/components/forms/model';\n\nimport TeamModel from './model';\n\ntype Props = RouteComponentProps<{orgId: string; teamId: string}, {}> & {\n  organization: LightWeightOrganization;\n  team: Team;\n};\n\ntype State = AsyncView['state'];\n\nclass TeamSettings extends AsyncView<Props, State> {\n  model = new TeamModel(this.props.params.orgId, this.props.params.teamId);\n\n  getTitle() {\n    return 'Team Settings';\n  }\n\n  getEndpoints() {\n    return [];\n  }\n\n  handleSubmitSuccess = (resp: any, model: FormModel, id?: string) => {\n    updateTeamSuccess(resp.slug, resp);\n    if (id === 'slug') {\n      addSuccessMessage(t('Team name changed'));\n      browserHistory.replace(\n        `/settings/${this.props.params.orgId}/teams/${model.getValue(id)}/settings/`\n      );\n      this.setState({loading: true});\n    }\n  };\n\n  handleRemoveTeam = async () => {\n    await removeTeam(this.api, this.props.params);\n    browserHistory.replace(`/settings/${this.props.params.orgId}/teams/`);\n  };\n\n  renderBody() {\n    const {organization, team} = this.props;\n\n    const access = new Set<Scope>(organization.access);\n\n    return (\n      <Fragment>\n        <Form\n          model={this.model}\n          apiMethod=\"PUT\"\n          saveOnBlur\n          allowUndo\n          onSubmitSuccess={this.handleSubmitSuccess}\n          onSubmitError={() => addErrorMessage(t('Unable to save change'))}\n          initialData={{\n            name: team.name,\n            slug: team.slug,\n          }}\n        >\n          <JsonForm access={access} forms={teamSettingsFields} />\n        </Form>\n\n        <Panel>\n          <PanelHeader>{t('Remove Team')}</PanelHeader>\n          <Field\n            help={t(\n              \"This may affect team members' access to projects and associated alert delivery.\"\n            )}\n          >\n            <div>\n              <Confirm\n                disabled={!access.has('team:admin')}\n                onConfirm={this.handleRemoveTeam}\n                priority=\"danger\"\n                message={tct('Are you sure you want to remove the team [team]?', {\n                  team: `#${team.slug}`,\n                })}\n              >\n                <Button\n                  icon={<IconDelete />}\n                  priority=\"danger\"\n                  disabled={!access.has('team:admin')}\n                >\n                  {t('Remove Team')}\n                </Button>\n              </Confirm>\n            </div>\n          </Field>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\nexport default withOrganization(TeamSettings);\n"],"names":["doCallback","params","name","args","callIfFunction","fetchTeamDetails","api","options","TeamActions","teamId","request","orgId","success","data","error","updateTeamSuccess","updateTeam","endpoint","method","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","requestPromise","then","addSuccessMessage","tct","slug","organization","err","addErrorMessage","removeTeam","route","title","fields","type","required","label","t","placeholder","help","disabled","access","has","transformInput","slugify","saveOnBlur","saveMessageAlertType","saveMessage","str","toLowerCase","replace","AsyncView","AsyncComponent","getTitle","render","this","renderComponent","FormPanel","React","additionalFieldProps","renderFooter","renderHeader","otherProps","props","sanitizeQuerySelector","undefined","map","field","defaultValue","_","fieldWithoutDefaultValue","disabledReason","highlighted","JsonForm","location","hash","componentDidMount","scrollToHash","UNSAFE_componentWillReceiveProps","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","Sentry","shouldDisplayForm","fieldsWithVisibleProp","filter","defined","visible","length","every","renderForm","formPanelProps","forms","features","_location","state","formGroup","i","withRouter","TeamFormModel","FormModel","constructor","super","doApiRequest","Promise","resolve","reject","TeamSettings","TeamModel","resp","model","browserHistory","getValue","loading","async","getEndpoints","renderBody","Set","Fragment","apiMethod","allowUndo","onSubmitSuccess","handleSubmitSuccess","onSubmitError","initialData","teamSettingsFields","onConfirm","handleRemoveTeam","priority","message","icon","withOrganization"],"sourceRoot":""}