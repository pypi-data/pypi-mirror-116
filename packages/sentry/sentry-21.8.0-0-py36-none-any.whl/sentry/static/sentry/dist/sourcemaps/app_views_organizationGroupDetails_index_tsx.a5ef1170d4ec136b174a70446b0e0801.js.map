{"version":3,"file":"chunks/app_views_organizationGroupDetails_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"iRA6Be,SAASA,EACtBC,EACAC,GACQ,QACR,MAAM,OAACC,EAAD,OAASC,EAAT,SAAiBC,EAAjB,SAA2BC,GAAYJ,EACvCK,EAAQJ,EAAOK,KAAI,EAAEC,KAAAA,KAAUA,GAAQ,KAC7C,IAAIC,EACAC,EAGc,iBAAPV,GACTU,EAAaR,EAAOS,QAAQX,GAAM,EAClCS,EAAgBG,GAAAA,CAAcN,EAAMO,MAAM,EAAGH,IAAaF,GAAoB,MAAZA,EAAK,MAEvEC,EAAgBG,GAAAA,CAAcN,GAAOE,GAAoB,MAAZA,EAAK,KAGpD,IAAIM,EAAYR,EAAMO,MAAMJ,EAAeC,QAEnB,IAAbL,IACTS,EAAYA,EAAUD,MAAM,EAAGR,IAGjC,MAAMU,EAAM,UAAGX,MAAAA,OAAH,EAAGA,EAAUW,cAAb,QAAuB,GAC7BC,EAAI,UAAGZ,MAAAA,OAAH,EAAGA,EAAUY,YAAb,QAAqB,GAEzBC,EAAY,GAAH,OAAMH,EAAUI,KAAK,KAArB,OACC,iBAAPlB,EAAkB,GAAKA,GADjB,OAEZe,GAFY,OAEHC,GAEZ,OAAOG,EAAAA,EAAAA,GAAoBF,EAAWd,K,ssCC3DjC,MAAMiB,EACM,kBADNA,EAES,qB,iNCuDtB,MAAMC,UAAqBC,EAAAA,UAA8B,mDAM/CC,KAAKC,eAN0C,gCAyDpC,KACjBD,KAAKE,SAASF,KAAKC,cACnBD,KAAKG,gBA3DgD,4BAuOxCC,UACb,MAAM,aAACC,EAAD,QAAeC,EAAf,aAAwBC,EAAxB,MAAsCC,GAASR,KAAKS,MAE1D,IACED,MAAAA,OAAA,EAAAA,EAAOE,UAAWC,EAAAA,GAAAA,cAClBN,GACAC,GACAC,EAEA,OAGF,MAAM,IAACK,GAAOZ,KAAKa,MAEnBb,KAAKE,SAAS,CAACG,cAAc,IAE7B,IACE,MAAMS,QAAqBF,EAAIG,eAAef,KAAKgB,qBAAsB,CACvEC,MAAOjB,KAAKkB,kBAGRC,EAAuBnB,KAAKoB,wBAAwBN,GAE1D,GAAIK,EAEF,YADAE,EAAAA,eAAAA,KAAgCF,GAIlCnB,KAAKE,SAAS,CAACM,MAAOM,EAAcT,cAAc,IAClD,MAAOiB,GACPtB,KAAKuB,mBAAmBD,QArQ2B,uBAqV5CE,EAAAA,EAAAA,QAAkBC,GAAWzB,KAAK0B,cAAcD,SAAUE,KArVd,4BAsVAA,GA9UvDC,kBACE,MAAO,CACLpB,MAAOR,KAAKS,MAAMD,MAClB3B,SAAUmB,KAAKa,MAAMhC,UAIzBgD,oBACE7B,KAAKG,YACLH,KAAK8B,6BAGPC,mBAAmBC,EAAkBC,GAAkB,QAEnDD,EAAUE,yBAA2BlC,KAAKa,MAAMqB,wBAChDF,EAAUnD,SAASsD,WAAanC,KAAKa,MAAMhC,SAASsD,UAEpDnC,KAAKG,cAIHH,KAAKoC,kBAAkBJ,KAAeC,MAAAA,IAAAA,EAAWzB,QAASR,KAAKS,MAAMD,QACtE,UAAAwB,EAAUpD,cAAV,eAAkByD,YAAlB,UAA8BrC,KAAKa,MAAMjC,cAAzC,aAA8B,EAAmByD,UAAWrC,KAAKS,MAAMD,QAExER,KAAKsC,SAAStC,KAAKS,MAAMD,OAI7B+B,uBACEf,EAAAA,EAAAA,SACAgB,EAAAA,EAAAA,GAAexC,KAAKyC,UAChBzC,KAAK0C,UACPC,cAAc3C,KAAK0C,UAIP,mBACd,MAAO,CACLlC,MAAO,KACPF,SAAS,EACTC,cAAc,EACdF,cAAc,EACdiB,OAAO,EACPsB,YAAY,EACZC,UAAW,KACXC,QAAS,MASbV,kBAAkBvB,GAChB,OAAQA,EAAMjC,OAAOyD,SAAW,CAAC,SAAU,UAAUU,SAASlC,EAAMjC,OAAOyD,SAGrD,2BACtB,wBAAkBrC,KAAKa,MAAMjC,OAAOoE,QAApC,KAGsB,2BACtB,wBAAkBhD,KAAKa,MAAMjC,OAAOoE,QAApC,wBAGY,eAACxC,GAAe,MACxBA,GACFR,KAAKE,SAAS,CAACK,cAAc,EAAMqC,YAAY,IAGjD,MAAM,OAAChE,EAAD,aAASqE,EAAT,IAAuBrC,GAAOZ,KAAKa,MACnCqC,EAAUtE,EAAOuE,MACjBH,EAAUpE,EAAOoE,QACjBX,GAAUzD,MAAAA,OAAA,EAAAA,EAAQyD,UAAW,SAC7Be,EAAY5C,MAAAA,GAAH,UAAGA,EAAOsC,eAAV,aAAG,EAAgBO,KAClC,IACE,MAAMC,QAAcC,EAAAA,EAAAA,IAClB3C,EACAsC,EACAF,EACAX,EACAY,EACAG,GAEFpD,KAAKE,SAAS,CAACoD,MAAAA,EAAOhD,SAAS,EAAOsC,YAAY,EAAOrC,cAAc,IACvE,MAAOiD,GAEPC,EAAAA,GAAwBD,GACxBxD,KAAKE,SAAS,CAAC0C,YAAY,EAAMtC,SAAS,EAAOC,cAAc,KAInEmD,oBAAoBlD,GAClB,MAAM,OAAC7B,EAAD,aAASgF,GAAgB3D,KAAKa,OAC9B,MAACyC,GAAStD,KAAKS,OAGf,WAACmD,EAAD,aAAaC,GAAgBlF,EAAOA,EAAOmF,OAAS,GAAGjD,MAU7D,MAAO,CAAC+C,WAAAA,EAAYG,QAJlBF,GAAgBP,EAAhB,yBACsBK,EAAaN,KADnC,mBACkD7C,EAAMwD,GADxD,mBACqEV,EAAMU,GAD3E,8BAEsBL,EAAaN,KAFnC,mBAEkD7C,EAAMwD,GAFxD,MAOJlC,6BACmC9B,KAAKiE,6BAItCjE,KAAK0C,SAAWwB,YAAYlE,KAAKmE,aAAc,MAGjDF,2BAA2B,MACzB,MAAM,aAACN,GAAgB3D,KAAKa,MAC5B,iBAAO8C,EAAaS,gBAApB,aAAO,EAAuBrB,SAAS,mBAGzC3B,wBAAwBiD,GACtB,MAAM,OAAC1F,EAAD,SAASE,EAAT,OAAmBD,GAAUoB,KAAKa,OAClC,QAACmC,GAAWpE,GAEXoF,GAAIM,GAAeD,EAEpBJ,EAA2BjE,KAAKiE,2BAEhCM,GAAqBC,EAAAA,EAAAA,IAA2BH,IAChD,WAACT,EAAD,QAAaG,GAAW/D,KAAK0D,oBAAoBW,GAEvD,GAAIrB,IAAYsB,EACd,OAAIL,GAGAM,IAAuB5D,EAAAA,GAAAA,6BACvBiD,IAAea,EAAAA,GAAAA,SAER,CACLtC,SAAU,GAAF,OAAK4B,GAAL,OAAeU,EAAAA,GAAAA,SAAf,KACRxD,MAAO,IAAIrC,EAAQoE,QAASsB,KAK3B9F,EAAAA,EAAAA,GAAc,GAAI,CACvBG,OAAAA,EACAE,SAAAA,EACAD,OAAQ,IAAIA,EAAQoE,QAASsB,KAIjC,GAAIL,EAA0B,CAC5B,GACEM,IAAuB5D,EAAAA,GAAAA,cACvBiD,IAAea,EAAAA,GAAAA,QAEf,MAAO,CACLtC,SAAU4B,EACV9C,MAAOrC,GAIX,GACE2F,IAAuB5D,EAAAA,GAAAA,6BACvBiD,IAAea,EAAAA,GAAAA,UACfb,IAAea,EAAAA,GAAAA,cAEf,MAAO,CACLtC,SAAU,GAAF,OAAK4B,GAAL,OAAeU,EAAAA,GAAAA,SAAf,KACRxD,MAAOrC,IAQfsC,gBACE,MAAM,aAAC+B,GAAgBjD,KAAKa,MAS5B,MANiD,IAC3CoC,EAAe,CAACyB,YAAazB,GAAgB,GACjD0B,OAAQ,QACRC,SAAU,WAMdC,6BAA6BnE,GAC3B,OAAKA,EAIU,MAAXA,EACKb,EAGM,MAAXa,EACKb,EAGF,KAXE,KAcX0B,mBAAmBD,GACjBmC,EAAAA,GAAwBnC,GACxB,MAAMuB,EAAY7C,KAAK6E,6BAA6BvD,MAAAA,OAAlC,EAAkCA,EAAOZ,QAE3DV,KAAKE,SAAS,CACZG,cAAc,EACdC,SAAS,EACTgB,OAAO,EACPuB,UAAAA,IAsCoB,2BACtB,MAAM,IAACjC,GAAOZ,KAAKa,MACbiE,QAAiBlE,EAAIG,eAAef,KAAK+E,sBAC/CvD,EAAAA,EAAAA,mBAA8BxB,KAAKa,MAAMjC,OAAOoE,QAAS8B,GAG5C,kBACb,MAAM,IAAClE,EAAD,uBAAMsB,EAAN,OAA8BtD,GAAUoB,KAAKa,MAGnD,GAAKqB,EAIL,IACE,MAAM8C,EAAehF,KAAKoC,kBAAkBpC,KAAKa,OAC7Cb,KAAKsC,gBACLX,EAEEsD,QAAqBrE,EAAIG,eAAef,KAAKgB,qBAAsB,CACvEC,MAAOjB,KAAKkB,mBAGPmD,SAAca,QAAQC,IAAI,CAACF,EAAcD,IAChDhF,KAAKoF,qBAEL,MAAMjE,EAAuBnB,KAAKoB,wBAAwBiD,GAE1D,GAAIlD,EAEF,YADAE,EAAAA,eAAAA,KAAgCF,GAIlC,MAAM2B,EAAUuB,EAAKvB,QAIrB,IAFAuC,EAAAA,EAAAA,IAAczE,EAAKhC,EAAOuE,MAAOL,EAAQO,KAAMzE,EAAOoE,SAEjDF,EAIE,CACL,MAAMwC,EAAsB,IAAItF,KAAKa,MAAMhC,eAEH8C,IAAtC2D,EAAoBrE,MAAM6B,cACUnB,IAApC2D,EAAoBrE,MAAMsE,QAc1BD,EAAoBrE,MAAM6B,QAAUA,EAAQkB,WAKvCsB,EAAoBrE,MAAMsE,MACjClE,EAAAA,eAAAA,QAAmCiE,QA3BnC7B,EAAAA,IAAiB,KACfA,EAAAA,GAAwB,IAAI+B,MAAM,yBA6BtCxF,KAAKE,SAAS,CAAC4C,QAAAA,EAASzC,cAAc,IAEtCmB,EAAAA,EAAAA,gBAA2B,CAAC6C,IAC5B,MAAO/C,GACPtB,KAAKuB,mBAAmBD,IAO5BI,cAAcD,GACZ,MAAMuC,EAAKhE,KAAKa,MAAMjC,OAAOoE,QAC7B,GAAIvB,EAAQgE,IAAIzB,GAAK,CACnB,MAAMxD,EAAQgB,EAAAA,EAAAA,IAAewC,GAC7B,GAAIxD,EAAO,CAGT,GAAKA,EAAoCkF,MAEvC,YADA1F,KAAKG,YAGPH,KAAKE,SAAS,CACZM,MAAAA,MAMRmF,WACE,MAAM,aAAChC,GAAgB3D,KAAKa,OACtB,MAACL,GAASR,KAAKS,MACfmF,EAAe,SAErB,IAAKpF,EACH,OAAOoF,EAGT,MAAM,MAACC,IAASF,EAAAA,EAAAA,IAASnF,EAAOmD,MAAAA,OAAR,EAAQA,EAAcS,UACxC0B,GAAUC,EAAAA,EAAAA,IAAWvF,IAErB,QAACsC,GAAWtC,EACZwF,EAAe,GAAH,OAAMrC,EAAaN,KAAnB,cAA6BP,EAAQO,MAEvD,OAAIwC,GAASC,EACX,UAAUD,EAAV,aAAoBC,EAApB,cAAiCE,GAGnC,UAAUH,GAASC,GAAWF,EAA9B,cAAgDI,GAGlDC,cAAc,QACZ,MAAM,aAACtC,EAAD,SAAe9E,GAAYmB,KAAKa,MAChCqF,EAAQ,UAAGvC,EAAauC,gBAAhB,QAA4B,GACpC9C,EAAYvE,EAASoC,MAAM6B,QAE3BqD,EAAW,UAAGD,EAASE,MAAKC,GAAQA,EAAKrC,KAAOZ,WAArC,aAAG,EAA8CC,KAElE,OAAQrD,KAAKS,MAAMoC,WACjB,KAAKhD,EACH,OACE,QAAC,IAAD,CAAciG,SAASQ,EAAAA,EAAAA,GAAE,mDAG7B,KAAKzG,EACH,OACE,QAAC,IAAD,CACE8D,aAAc3D,KAAKa,MAAM8C,aACzBwC,YAAaA,IAGnB,QACE,OAAO,QAAC,IAAD,CAAcI,QAASvG,KAAKwG,oBAIzCC,cAAc3D,EAAwBtC,GACpC,MAAM,SAACkG,EAAD,aAAWzD,GAAgBjD,KAAKa,OAChC,aAACN,EAAD,WAAeqC,EAAf,MAA2BU,GAAStD,KAAKS,OAEzC,WAACmD,EAAD,QAAaG,GAAW/D,KAAK0D,oBAAoBlD,GACjDmG,GAA0BnC,EAAAA,EAAAA,IAA2BhE,GAE3D,IAAIoG,EAAkC,CACpC3D,aAAAA,EACAzC,MAAAA,EACAsC,QAAAA,GAkBF,OAfIc,IAAea,EAAAA,GAAAA,UACjBmC,EAAa,IACRA,EACHtD,MAAAA,EACA/C,aAAAA,EACAqC,WAAAA,EACA+D,wBAAAA,EACAJ,QAAS,IAAMvG,KAAKwG,qBAIpB5C,IAAea,EAAAA,GAAAA,OACjBmC,EAAa,IAAIA,EAAYtD,MAAAA,EAAOS,QAAAA,KAIpC,QAAC,WAAD,YACE,QAAC,KAAD,CACE4C,wBAAyBA,EACzB7D,QAASA,EACTQ,MAAOA,EACP9C,MAAOA,EACPoD,WAAYA,EACZG,QAASA,IAEVhE,EAAAA,eAAqB2G,GAClB3G,EAAAA,aAAmB2G,EAAUE,GAC7BF,KAKVG,oBAAoB,MAClB,MAAOvF,MAAOwF,EAAR,MAAiBtG,EAAjB,QAAwBsC,EAAxB,QAAiCxC,GAAWN,KAAKS,MAGvD,GAFkBH,IAAaE,IAAUsG,EAGvC,OAAO,QAAC,IAAD,IAGT,GAAIA,EACF,OAAO9G,KAAKiG,cAGd,MAAM,aAACtC,GAAgB3D,KAAKa,MAE5B,OACE,QAAC,IAAD,CACEsC,MAAOQ,EAAaN,KACpB0D,MAAO,WAACjE,MAAAA,OAAD,EAACA,EAASO,YAAV,QAAkB,IACzB,eAAa,2BAHf,SAKG,EAAE6C,SAAAA,EAAUc,gBAAAA,EAAiBC,WAAAA,KAC5BD,EACEC,GACE,QAAC,IAAD,CAAcnB,SAASQ,EAAAA,EAAAA,GAAE,yCAGzBtG,KAAKyG,cAAcP,EAAS,GAAI1F,IAGlC,QAAC,IAAD,MAOV0G,SACE,MAAM,QAACpE,GAAW9C,KAAKS,MAEvB,OACE,QAAC,IAAD,CAAeoF,MAAO7F,KAAK2F,WAA3B,UACE,QAAC,IAAD,CACEwB,kBAAgB,EAChBC,aAActE,EACduE,kBAAkB,EAClBC,oBAAkB,EAClBC,sBAAsBjB,EAAAA,EAAAA,GAAE,SACxBkB,qBAAmB,EACnBC,yBAAuB,EAPzB,UASE,QAAC,KAAD,UAAczH,KAAK6G,2BAxfvB/G,EAAAA,YAAAA,gB,OAAAA,EAAAA,oBACuB,CACzBU,MAAOkH,EAAAA,EAAAA,MACP7I,SAAU8I,IAAAA,SA4fd,SAAeC,EAAAA,EAAAA,GAAQnE,EAAAA,GAAoB3D,ICviB3C,MAAM+H,UAAiC9H,EAAAA,UACrC+H,YAAYjH,GACVkH,MAAMlH,GAGNb,KAAKgI,wBAGPnG,qBACEoG,EAAAA,EAAAA,IAAU,oBAAqB,CAC7BC,SAAUC,SAASnI,KAAKa,MAAMjC,OAAOoE,QAAS,IAC9CoF,OAAQD,SAASnI,KAAKa,MAAM8C,aAAaK,GAAI,MAOjDgE,wBACE,MAAMK,GAAYC,EAAAA,EAAAA,GAA0BtI,KAAKa,MAAM8C,cACnD,aACA,aACJ4E,EAAAA,GAAAA,KAAY,CAACC,KAAM,2BAA4BnE,KAAM,CAACoE,WAAYJ,KAGpEnB,SACE,MAAM,UAACwB,KAAc7H,GAASb,KAAKa,MAEnC,OACE,QAAC,EAAD,CAEEoC,aAAcyF,EAAUzF,gBACpBpC,GAHN,UACUb,KAAKa,MAAMjC,OAAOoE,QAD5B,iBAC4C0F,EAAUzF,aAAatD,KAAK,QA9BxEkI,EAAAA,YAAAA,2BAsCN,SAAec,EAAAA,EAAAA,IAAiBC,EAAAA,EAAAA,GAAoBf","sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/organizationGroupDetails/constants.tsx","webpack:///./app/views/organizationGroupDetails/groupDetails.tsx","webpack:///./app/views/organizationGroupDetails/index.tsx"],"sourcesContent":["import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","export const ERROR_TYPES = {\n  GROUP_NOT_FOUND: 'GROUP_NOT_FOUND',\n  MISSING_MEMBERSHIP: 'MISSING_MEMBERSHIP',\n} as const;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\nimport * as ReactRouter from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport PropTypes from 'prop-types';\n\nimport {Client} from 'app/api';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport MissingProjectMembership from 'app/components/projects/missingProjectMembership';\nimport {t} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport GroupStore from 'app/stores/groupStore';\nimport {PageContent} from 'app/styles/organization';\nimport {AvatarProject, Group, Organization, Project} from 'app/types';\nimport {Event} from 'app/types/event';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {getMessage, getTitle} from 'app/utils/events';\nimport Projects from 'app/utils/projects';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withApi from 'app/utils/withApi';\n\nimport {ERROR_TYPES} from './constants';\nimport GroupHeader, {TAB} from './header';\nimport {\n  fetchGroupEvent,\n  getGroupReprocessingStatus,\n  markEventSeen,\n  ReprocessingStatus,\n} from './utils';\n\ntype Error = typeof ERROR_TYPES[keyof typeof ERROR_TYPES] | null;\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  environments: string[];\n  children: React.ReactNode;\n  isGlobalSelectionReady: boolean;\n} & ReactRouter.RouteComponentProps<\n  {orgId: string; groupId: string; eventId?: string},\n  {}\n>;\n\ntype State = {\n  group: Group | null;\n  loading: boolean;\n  loadingEvent: boolean;\n  loadingGroup: boolean;\n  error: boolean;\n  eventError: boolean;\n  errorType: Error;\n  project: null | (Pick<Project, 'id' | 'slug'> & Partial<Pick<Project, 'platform'>>);\n  event?: Event;\n};\n\nclass GroupDetails extends React.Component<Props, State> {\n  static childContextTypes = {\n    group: SentryTypes.Group,\n    location: PropTypes.object,\n  };\n\n  state = this.initialState;\n\n  getChildContext() {\n    return {\n      group: this.state.group,\n      location: this.props.location,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n    this.updateReprocessingProgress();\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (\n      prevProps.isGlobalSelectionReady !== this.props.isGlobalSelectionReady ||\n      prevProps.location.pathname !== this.props.location.pathname\n    ) {\n      this.fetchData();\n    }\n\n    if (\n      (!this.canLoadEventEarly(prevProps) && !prevState?.group && this.state.group) ||\n      (prevProps.params?.eventId !== this.props.params?.eventId && this.state.group)\n    ) {\n      this.getEvent(this.state.group);\n    }\n  }\n\n  componentWillUnmount() {\n    GroupStore.reset();\n    callIfFunction(this.listener);\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  get initialState(): State {\n    return {\n      group: null,\n      loading: true,\n      loadingEvent: true,\n      loadingGroup: true,\n      error: false,\n      eventError: false,\n      errorType: null,\n      project: null,\n    };\n  }\n\n  remountComponent = () => {\n    this.setState(this.initialState);\n    this.fetchData();\n  };\n\n  canLoadEventEarly(props: Props) {\n    return !props.params.eventId || ['oldest', 'latest'].includes(props.params.eventId);\n  }\n\n  get groupDetailsEndpoint() {\n    return `/issues/${this.props.params.groupId}/`;\n  }\n\n  get groupReleaseEndpoint() {\n    return `/issues/${this.props.params.groupId}/first-last-release/`;\n  }\n\n  async getEvent(group?: Group) {\n    if (group) {\n      this.setState({loadingEvent: true, eventError: false});\n    }\n\n    const {params, environments, api} = this.props;\n    const orgSlug = params.orgId;\n    const groupId = params.groupId;\n    const eventId = params?.eventId || 'latest';\n    const projectId = group?.project?.slug;\n    try {\n      const event = await fetchGroupEvent(\n        api,\n        orgSlug,\n        groupId,\n        eventId,\n        environments,\n        projectId\n      );\n      this.setState({event, loading: false, eventError: false, loadingEvent: false});\n    } catch (err) {\n      // This is an expected error, capture to Sentry so that it is not considered as an unhandled error\n      Sentry.captureException(err);\n      this.setState({eventError: true, loading: false, loadingEvent: false});\n    }\n  }\n\n  getCurrentRouteInfo(group: Group): {currentTab: keyof typeof TAB; baseUrl: string} {\n    const {routes, organization} = this.props;\n    const {event} = this.state;\n\n    // All the routes under /organizations/:orgId/issues/:groupId have a defined props\n    const {currentTab, isEventRoute} = routes[routes.length - 1].props as {\n      currentTab: keyof typeof TAB;\n      isEventRoute: boolean;\n    };\n\n    const baseUrl =\n      isEventRoute && event\n        ? `/organizations/${organization.slug}/issues/${group.id}/events/${event.id}/`\n        : `/organizations/${organization.slug}/issues/${group.id}/`;\n\n    return {currentTab, baseUrl};\n  }\n\n  updateReprocessingProgress() {\n    const hasReprocessingV2Feature = this.hasReprocessingV2Feature();\n    if (!hasReprocessingV2Feature) {\n      return;\n    }\n    this.interval = setInterval(this.refetchGroup, 30000);\n  }\n\n  hasReprocessingV2Feature() {\n    const {organization} = this.props;\n    return organization.features?.includes('reprocessing-v2');\n  }\n\n  getReprocessingNewRoute(data: Group) {\n    const {routes, location, params} = this.props;\n    const {groupId} = params;\n\n    const {id: nextGroupId} = data;\n\n    const hasReprocessingV2Feature = this.hasReprocessingV2Feature();\n\n    const reprocessingStatus = getGroupReprocessingStatus(data);\n    const {currentTab, baseUrl} = this.getCurrentRouteInfo(data);\n\n    if (groupId !== nextGroupId) {\n      if (hasReprocessingV2Feature) {\n        // Redirects to the Activities tab\n        if (\n          reprocessingStatus === ReprocessingStatus.REPROCESSED_AND_HASNT_EVENT &&\n          currentTab !== TAB.ACTIVITY\n        ) {\n          return {\n            pathname: `${baseUrl}${TAB.ACTIVITY}/`,\n            query: {...params, groupId: nextGroupId},\n          };\n        }\n      }\n\n      return recreateRoute('', {\n        routes,\n        location,\n        params: {...params, groupId: nextGroupId},\n      });\n    }\n\n    if (hasReprocessingV2Feature) {\n      if (\n        reprocessingStatus === ReprocessingStatus.REPROCESSING &&\n        currentTab !== TAB.DETAILS\n      ) {\n        return {\n          pathname: baseUrl,\n          query: params,\n        };\n      }\n\n      if (\n        reprocessingStatus === ReprocessingStatus.REPROCESSED_AND_HASNT_EVENT &&\n        currentTab !== TAB.ACTIVITY &&\n        currentTab !== TAB.USER_FEEDBACK\n      ) {\n        return {\n          pathname: `${baseUrl}${TAB.ACTIVITY}/`,\n          query: params,\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  getGroupQuery(): Record<string, string | string[]> {\n    const {environments} = this.props;\n\n    // Note, we do not want to include the environment key at all if there are no environments\n    const query: Record<string, string | string[]> = {\n      ...(environments ? {environment: environments} : {}),\n      expand: 'inbox',\n      collapse: 'release',\n    };\n\n    return query;\n  }\n\n  getFetchDataRequestErrorType(status: any): Error {\n    if (!status) {\n      return null;\n    }\n\n    if (status === 404) {\n      return ERROR_TYPES.GROUP_NOT_FOUND;\n    }\n\n    if (status === 403) {\n      return ERROR_TYPES.MISSING_MEMBERSHIP;\n    }\n\n    return null;\n  }\n\n  handleRequestError(error: any) {\n    Sentry.captureException(error);\n    const errorType = this.getFetchDataRequestErrorType(error?.status);\n\n    this.setState({\n      loadingGroup: false,\n      loading: false,\n      error: true,\n      errorType,\n    });\n  }\n\n  refetchGroup = async () => {\n    const {loadingGroup, loading, loadingEvent, group} = this.state;\n\n    if (\n      group?.status !== ReprocessingStatus.REPROCESSING ||\n      loadingGroup ||\n      loading ||\n      loadingEvent\n    ) {\n      return;\n    }\n\n    const {api} = this.props;\n\n    this.setState({loadingGroup: true});\n\n    try {\n      const updatedGroup = await api.requestPromise(this.groupDetailsEndpoint, {\n        query: this.getGroupQuery(),\n      });\n\n      const reprocessingNewRoute = this.getReprocessingNewRoute(updatedGroup);\n\n      if (reprocessingNewRoute) {\n        ReactRouter.browserHistory.push(reprocessingNewRoute);\n        return;\n      }\n\n      this.setState({group: updatedGroup, loadingGroup: false});\n    } catch (error) {\n      this.handleRequestError(error);\n    }\n  };\n\n  async fetchGroupReleases() {\n    const {api} = this.props;\n    const releases = await api.requestPromise(this.groupReleaseEndpoint);\n    GroupStore.onPopulateReleases(this.props.params.groupId, releases);\n  }\n\n  async fetchData() {\n    const {api, isGlobalSelectionReady, params} = this.props;\n\n    // Need to wait for global selection store to be ready before making request\n    if (!isGlobalSelectionReady) {\n      return;\n    }\n\n    try {\n      const eventPromise = this.canLoadEventEarly(this.props)\n        ? this.getEvent()\n        : undefined;\n\n      const groupPromise = await api.requestPromise(this.groupDetailsEndpoint, {\n        query: this.getGroupQuery(),\n      });\n\n      const [data] = await Promise.all([groupPromise, eventPromise]);\n      this.fetchGroupReleases();\n\n      const reprocessingNewRoute = this.getReprocessingNewRoute(data);\n\n      if (reprocessingNewRoute) {\n        ReactRouter.browserHistory.push(reprocessingNewRoute);\n        return;\n      }\n\n      const project = data.project;\n\n      markEventSeen(api, params.orgId, project.slug, params.groupId);\n\n      if (!project) {\n        Sentry.withScope(() => {\n          Sentry.captureException(new Error('Project not found'));\n        });\n      } else {\n        const locationWithProject = {...this.props.location};\n        if (\n          locationWithProject.query.project === undefined &&\n          locationWithProject.query._allp === undefined\n        ) {\n          // We use _allp as a temporary measure to know they came from the\n          // issue list page with no project selected (all projects included in\n          // filter).\n          //\n          // If it is not defined, we add the locked project id to the URL\n          // (this is because if someone navigates directly to an issue on\n          // single-project priveleges, then goes back - they were getting\n          // assigned to the first project).\n          //\n          // If it is defined, we do not so that our back button will bring us\n          // to the issue list page with no project selected instead of the\n          // locked project.\n          locationWithProject.query.project = project.id;\n        }\n        // We delete _allp from the URL to keep the hack a bit cleaner, but\n        // this is not an ideal solution and will ultimately be replaced with\n        // something smarter.\n        delete locationWithProject.query._allp;\n        ReactRouter.browserHistory.replace(locationWithProject);\n      }\n\n      this.setState({project, loadingGroup: false});\n\n      GroupStore.loadInitialData([data]);\n    } catch (error) {\n      this.handleRequestError(error);\n    }\n  }\n\n  listener = GroupStore.listen(itemIds => this.onGroupChange(itemIds), undefined);\n  interval: ReturnType<typeof setInterval> | undefined = undefined;\n\n  onGroupChange(itemIds: Set<string>) {\n    const id = this.props.params.groupId;\n    if (itemIds.has(id)) {\n      const group = GroupStore.get(id) as Group;\n      if (group) {\n        // TODO(ts) This needs a better approach. issueActions is splicing attributes onto\n        // group objects to cheat here.\n        if ((group as Group & {stale?: boolean}).stale) {\n          this.fetchData();\n          return;\n        }\n        this.setState({\n          group,\n        });\n      }\n    }\n  }\n\n  getTitle() {\n    const {organization} = this.props;\n    const {group} = this.state;\n    const defaultTitle = 'Sentry';\n\n    if (!group) {\n      return defaultTitle;\n    }\n\n    const {title} = getTitle(group, organization?.features);\n    const message = getMessage(group);\n\n    const {project} = group;\n    const eventDetails = `${organization.slug} - ${project.slug}`;\n\n    if (title && message) {\n      return `${title}: ${message} - ${eventDetails}`;\n    }\n\n    return `${title || message || defaultTitle} - ${eventDetails}`;\n  }\n\n  renderError() {\n    const {organization, location} = this.props;\n    const projects = organization.projects ?? [];\n    const projectId = location.query.project;\n\n    const projectSlug = projects.find(proj => proj.id === projectId)?.slug;\n\n    switch (this.state.errorType) {\n      case ERROR_TYPES.GROUP_NOT_FOUND:\n        return (\n          <LoadingError message={t('The issue you were looking for was not found.')} />\n        );\n\n      case ERROR_TYPES.MISSING_MEMBERSHIP:\n        return (\n          <MissingProjectMembership\n            organization={this.props.organization}\n            projectSlug={projectSlug}\n          />\n        );\n      default:\n        return <LoadingError onRetry={this.remountComponent} />;\n    }\n  }\n\n  renderContent(project: AvatarProject, group: Group) {\n    const {children, environments} = this.props;\n    const {loadingEvent, eventError, event} = this.state;\n\n    const {currentTab, baseUrl} = this.getCurrentRouteInfo(group);\n    const groupReprocessingStatus = getGroupReprocessingStatus(group);\n\n    let childProps: Record<string, any> = {\n      environments,\n      group,\n      project,\n    };\n\n    if (currentTab === TAB.DETAILS) {\n      childProps = {\n        ...childProps,\n        event,\n        loadingEvent,\n        eventError,\n        groupReprocessingStatus,\n        onRetry: () => this.remountComponent(),\n      };\n    }\n\n    if (currentTab === TAB.TAGS) {\n      childProps = {...childProps, event, baseUrl};\n    }\n\n    return (\n      <React.Fragment>\n        <GroupHeader\n          groupReprocessingStatus={groupReprocessingStatus}\n          project={project as Project}\n          event={event}\n          group={group}\n          currentTab={currentTab}\n          baseUrl={baseUrl}\n        />\n        {React.isValidElement(children)\n          ? React.cloneElement(children, childProps)\n          : children}\n      </React.Fragment>\n    );\n  }\n\n  renderPageContent() {\n    const {error: isError, group, project, loading} = this.state;\n    const isLoading = loading || (!group && !isError);\n\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    if (isError) {\n      return this.renderError();\n    }\n\n    const {organization} = this.props;\n\n    return (\n      <Projects\n        orgId={organization.slug}\n        slugs={[project?.slug ?? '']}\n        data-test-id=\"group-projects-container\"\n      >\n        {({projects, initiallyLoaded, fetchError}) =>\n          initiallyLoaded ? (\n            fetchError ? (\n              <LoadingError message={t('Error loading the specified project')} />\n            ) : (\n              // TODO(ts): Update renderContent function to deal with empty group\n              this.renderContent(projects[0], group!)\n            )\n          ) : (\n            <LoadingIndicator />\n          )\n        }\n      </Projects>\n    );\n  }\n\n  render() {\n    const {project} = this.state;\n\n    return (\n      <DocumentTitle title={this.getTitle()}>\n        <GlobalSelectionHeader\n          skipLoadLastUsed\n          forceProject={project}\n          showDateSelector={false}\n          shouldForceProject\n          lockedMessageSubject={t('issue')}\n          showIssueStreamLink\n          showProjectSettingsLink\n        >\n          <PageContent>{this.renderPageContent()}</PageContent>\n        </GlobalSelectionHeader>\n      </DocumentTitle>\n    );\n  }\n}\n\nexport default withApi(Sentry.withProfiler(GroupDetails));\n","import * as React from 'react';\nimport * as ReactRouter from 'react-router';\n\nimport {GlobalSelection, Organization} from 'app/types';\nimport {analytics, metric} from 'app/utils/analytics';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport withOrganization, {isLightweightOrganization} from 'app/utils/withOrganization';\n\nimport GroupDetails from './groupDetails';\n\ntype Props = {\n  selection: GlobalSelection;\n  isGlobalSelectionReady: boolean;\n  organization: Organization;\n  children: React.ReactNode;\n} & ReactRouter.RouteComponentProps<{orgId: string; groupId: string}, {}>;\n\nclass OrganizationGroupDetails extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n\n    // Setup in the constructor as render() may be expensive\n    this.startMetricCollection();\n  }\n\n  componentDidMount() {\n    analytics('issue_page.viewed', {\n      group_id: parseInt(this.props.params.groupId, 10),\n      org_id: parseInt(this.props.organization.id, 10),\n    });\n  }\n\n  /**\n   * See \"page-issue-list-start\" for explanation on hot/cold-starts\n   */\n  startMetricCollection() {\n    const startType = isLightweightOrganization(this.props.organization)\n      ? 'cold-start'\n      : 'warm-start';\n    metric.mark({name: 'page-issue-details-start', data: {start_type: startType}});\n  }\n\n  render() {\n    const {selection, ...props} = this.props;\n\n    return (\n      <GroupDetails\n        key={`${this.props.params.groupId}-envs:${selection.environments.join(',')}`}\n        environments={selection.environments}\n        {...props}\n      />\n    );\n  }\n}\n\nexport default withOrganization(withGlobalSelection(OrganizationGroupDetails));\n"],"names":["recreateRoute","to","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","ERROR_TYPES","GroupDetails","React","this","initialState","setState","fetchData","async","loadingGroup","loading","loadingEvent","group","state","status","ReprocessingStatus","api","props","updatedGroup","requestPromise","groupDetailsEndpoint","query","getGroupQuery","reprocessingNewRoute","getReprocessingNewRoute","ReactRouter","error","handleRequestError","GroupStore","itemIds","onGroupChange","undefined","getChildContext","componentDidMount","updateReprocessingProgress","componentDidUpdate","prevProps","prevState","isGlobalSelectionReady","pathname","canLoadEventEarly","eventId","getEvent","componentWillUnmount","callIfFunction","listener","interval","clearInterval","eventError","errorType","project","includes","groupId","environments","orgSlug","orgId","projectId","slug","event","fetchGroupEvent","err","Sentry","getCurrentRouteInfo","organization","currentTab","isEventRoute","length","baseUrl","id","hasReprocessingV2Feature","setInterval","refetchGroup","features","data","nextGroupId","reprocessingStatus","getGroupReprocessingStatus","TAB","environment","expand","collapse","getFetchDataRequestErrorType","releases","groupReleaseEndpoint","eventPromise","groupPromise","Promise","all","fetchGroupReleases","markEventSeen","locationWithProject","_allp","Error","has","stale","getTitle","defaultTitle","title","message","getMessage","eventDetails","renderError","projects","projectSlug","find","proj","t","onRetry","remountComponent","renderContent","children","groupReprocessingStatus","childProps","renderPageContent","isError","slugs","initiallyLoaded","fetchError","render","skipLoadLastUsed","forceProject","showDateSelector","shouldForceProject","lockedMessageSubject","showIssueStreamLink","showProjectSettingsLink","SentryTypes","PropTypes","withApi","OrganizationGroupDetails","constructor","super","startMetricCollection","analytics","group_id","parseInt","org_id","startType","isLightweightOrganization","metric","name","start_type","selection","withOrganization","withGlobalSelection"],"sourceRoot":""}