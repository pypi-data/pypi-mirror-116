{"version":3,"file":"chunks/app_utils_routeTitle_tsx-app_views_asyncView_tsx-app_views_releases_utils_releaseHealthRequest_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/releases/list/utils.tsx","webpack:///./app/views/releases/utils/index.tsx","webpack:///./app/views/releases/utils/releaseHealthRequest.tsx"],"sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","export enum SortOption {\n  CRASH_FREE_USERS = 'crash_free_users',\n  CRASH_FREE_SESSIONS = 'crash_free_sessions',\n  USERS_24_HOURS = 'users_24h',\n  SESSIONS_24_HOURS = 'sessions_24h',\n  SESSIONS = 'sessions',\n  DATE = 'date',\n  BUILD = 'build',\n  SEMVER = 'semver',\n  ADOPTION = 'adoption',\n}\n\nexport enum DisplayOption {\n  USERS = 'users',\n  SESSIONS = 'sessions',\n}\n\nexport enum StatusOption {\n  ACTIVE = 'active',\n  ARCHIVED = 'archived',\n}\n","import {Location} from 'history';\nimport pick from 'lodash/pick';\nimport round from 'lodash/round';\nimport moment from 'moment';\n\nimport {DateTimeObject} from 'app/components/charts/utils';\nimport {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';\nimport {PAGE_URL_PARAM, URL_PARAM} from 'app/constants/globalSelectionHeader';\nimport {tn} from 'app/locale';\nimport {Release, ReleaseStatus} from 'app/types';\nimport {QueryResults} from 'app/utils/tokenizeSearch';\nimport {IssueSortOptions} from 'app/views/issueList/utils';\n\nimport {DisplayOption} from '../list/utils';\n\nexport const CRASH_FREE_DECIMAL_THRESHOLD = 95;\n\nexport const roundDuration = (seconds: number) => {\n  return round(seconds, seconds > 60 ? 0 : 3);\n};\n\nexport const getCrashFreePercent = (\n  percent: number,\n  decimalThreshold = CRASH_FREE_DECIMAL_THRESHOLD,\n  decimalPlaces = 3\n): number => {\n  return round(percent, percent > decimalThreshold ? decimalPlaces : 0);\n};\n\nexport const displayCrashFreePercent = (\n  percent: number,\n  decimalThreshold = CRASH_FREE_DECIMAL_THRESHOLD,\n  decimalPlaces = 3\n): string => {\n  if (isNaN(percent)) {\n    return '\\u2015';\n  }\n\n  if (percent < 1 && percent > 0) {\n    return `<1\\u0025`;\n  }\n\n  const rounded = getCrashFreePercent(\n    percent,\n    decimalThreshold,\n    decimalPlaces\n  ).toLocaleString();\n\n  return `${rounded}\\u0025`;\n};\n\nexport const getSessionStatusPercent = (percent: number, absolute = true) => {\n  return round(absolute ? Math.abs(percent) : percent, 3);\n};\n\nexport const displaySessionStatusPercent = (percent: number, absolute = true) => {\n  return `${getSessionStatusPercent(percent, absolute).toLocaleString()}\\u0025`;\n};\n\nexport const displayCrashFreeDiff = (\n  diffPercent: number,\n  crashFreePercent?: number | null\n) =>\n  `${Math.abs(\n    round(\n      diffPercent,\n      crashFreePercent && crashFreePercent > CRASH_FREE_DECIMAL_THRESHOLD ? 3 : 0\n    )\n  ).toLocaleString()}\\u0025`;\n\nexport const getReleaseNewIssuesUrl = (\n  orgSlug: string,\n  projectId: string | number | null,\n  version: string\n) => {\n  return {\n    pathname: `/organizations/${orgSlug}/issues/`,\n    query: {\n      project: projectId,\n      // we are resetting time selector because releases' new issues count doesn't take time selector into account\n      statsPeriod: undefined,\n      start: undefined,\n      end: undefined,\n      query: new QueryResults([`firstRelease:${version}`]).formatString(),\n      sort: IssueSortOptions.FREQ,\n    },\n  };\n};\n\nexport const getReleaseUnhandledIssuesUrl = (\n  orgSlug: string,\n  projectId: string | number | null,\n  version: string,\n  dateTime: DateTimeObject = {}\n) => {\n  return {\n    pathname: `/organizations/${orgSlug}/issues/`,\n    query: {\n      ...dateTime,\n      project: projectId,\n      query: new QueryResults([\n        `release:${version}`,\n        'error.unhandled:true',\n      ]).formatString(),\n      sort: IssueSortOptions.FREQ,\n    },\n  };\n};\n\nexport const getReleaseHandledIssuesUrl = (\n  orgSlug: string,\n  projectId: string | number | null,\n  version: string,\n  dateTime: DateTimeObject = {}\n) => {\n  return {\n    pathname: `/organizations/${orgSlug}/issues/`,\n    query: {\n      ...dateTime,\n      project: projectId,\n      query: new QueryResults([\n        `release:${version}`,\n        'error.handled:true',\n      ]).formatString(),\n      sort: IssueSortOptions.FREQ,\n    },\n  };\n};\n\nexport const isReleaseArchived = (release: Release) =>\n  release.status === ReleaseStatus.Archived;\n\nexport function releaseDisplayLabel(displayOption: DisplayOption, count?: number | null) {\n  if (displayOption === DisplayOption.USERS) {\n    return tn('user', 'users', count);\n  }\n\n  return tn('session', 'sessions', count);\n}\n\nexport type ReleaseBounds = {releaseStart?: string | null; releaseEnd?: string | null};\n\nexport function getReleaseBounds(release?: Release): ReleaseBounds {\n  const {lastEvent, currentProjectMeta, dateCreated} = release || {};\n  const {sessionsUpperBound} = currentProjectMeta || {};\n\n  const releaseStart = moment(dateCreated).startOf('minute').utc().format();\n  const releaseEnd = moment(\n    (moment(sessionsUpperBound).isAfter(lastEvent) ? sessionsUpperBound : lastEvent) ??\n      undefined\n  )\n    .startOf('minute')\n    .utc()\n    .format();\n\n  if (moment(releaseStart).isSame(releaseEnd, 'minute')) {\n    return {\n      releaseStart,\n      releaseEnd: moment(releaseEnd).add(1, 'minutes').utc().format(),\n    };\n  }\n\n  return {\n    releaseStart,\n    releaseEnd,\n  };\n}\n\ntype GetReleaseParams = {\n  location: Location;\n  releaseBounds: ReleaseBounds;\n  defaultStatsPeriod: string;\n  allowEmptyPeriod: boolean;\n};\n\n// these options are here only temporarily while we still support older and newer release details page\nexport function getReleaseParams({\n  location,\n  releaseBounds,\n  defaultStatsPeriod,\n  allowEmptyPeriod,\n}: GetReleaseParams) {\n  const params = getParams(\n    pick(location.query, [\n      ...Object.values(URL_PARAM),\n      ...Object.values(PAGE_URL_PARAM),\n      'cursor',\n    ]),\n    {\n      allowAbsolutePageDatetime: true,\n      defaultStatsPeriod,\n      allowEmptyPeriod,\n    }\n  );\n  if (\n    !Object.keys(params).some(param =>\n      [URL_PARAM.START, URL_PARAM.END, URL_PARAM.UTC, URL_PARAM.PERIOD].includes(param)\n    )\n  ) {\n    params[URL_PARAM.START] = releaseBounds.releaseStart;\n    params[URL_PARAM.END] = releaseBounds.releaseEnd;\n  }\n\n  return params;\n}\n","import * as React from 'react';\nimport {Location} from 'history';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport moment from 'moment';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport {\n  DateTimeObject,\n  getDiffInMinutes,\n  ONE_WEEK,\n  TWENTY_FOUR_HOURS,\n  TWO_WEEKS,\n} from 'app/components/charts/utils';\nimport {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\nimport {t} from 'app/locale';\nimport {\n  GlobalSelection,\n  HealthStatsPeriodOption,\n  Organization,\n  SessionApiResponse,\n} from 'app/types';\nimport {defined, percent} from 'app/utils';\nimport {QueryResults} from 'app/utils/tokenizeSearch';\nimport withApi from 'app/utils/withApi';\n\nimport {DisplayOption} from '../list/utils';\n\nimport {getCrashFreePercent} from '.';\n\nfunction omitIgnoredProps(props: Props) {\n  return omit(props, [\n    'api',\n    'organization',\n    'children',\n    'selection.datetime.utc',\n    'location',\n  ]);\n}\n\nfunction getInterval(datetimeObj: DateTimeObject) {\n  const diffInMinutes = getDiffInMinutes(datetimeObj);\n\n  if (diffInMinutes >= TWO_WEEKS) {\n    return '1d';\n  }\n  if (diffInMinutes >= ONE_WEEK) {\n    return '6h';\n  }\n\n  if (diffInMinutes > TWENTY_FOUR_HOURS) {\n    return '4h';\n  }\n\n  // TODO(sessions): sub-hour session resolution is still not possible\n  return '1h';\n}\nexport function reduceTimeSeriesGroups(\n  acc: number[],\n  group: SessionApiResponse['groups'][number],\n  field: 'count_unique(user)' | 'sum(session)'\n) {\n  group.series[field]?.forEach(\n    (value, index) => (acc[index] = (acc[index] ?? 0) + value)\n  );\n\n  return acc;\n}\n\nexport function sessionDisplayToField(display: DisplayOption) {\n  switch (display) {\n    case DisplayOption.USERS:\n      return 'count_unique(user)';\n    case DisplayOption.SESSIONS:\n    default:\n      return 'sum(session)';\n  }\n}\n\nexport type ReleaseHealthRequestRenderProps = {\n  isHealthLoading: boolean;\n  errored: boolean;\n  getHealthData: ReturnType<ReleaseHealthRequest['getHealthData']>;\n};\n\ntype Props = {\n  api: Client;\n  releases: string[];\n  organization: Organization;\n  children: (renderProps: ReleaseHealthRequestRenderProps) => React.ReactNode;\n  selection: GlobalSelection;\n  location: Location;\n  display: DisplayOption[];\n  defaultStatsPeriod?: string;\n  releasesReloading?: boolean;\n  healthStatsPeriod?: HealthStatsPeriodOption;\n  disable?: boolean;\n};\ntype State = {\n  loading: boolean;\n  errored: boolean;\n  statusCountByReleaseInPeriod: SessionApiResponse | null;\n  totalCountByReleaseIn24h: SessionApiResponse | null;\n  totalCountByProjectIn24h: SessionApiResponse | null;\n  statusCountByProjectInPeriod: SessionApiResponse | null;\n};\n\nclass ReleaseHealthRequest extends React.Component<Props, State> {\n  state: State = {\n    loading: false,\n    errored: false,\n    statusCountByReleaseInPeriod: null,\n    totalCountByReleaseIn24h: null,\n    totalCountByProjectIn24h: null,\n    statusCountByProjectInPeriod: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.releasesReloading) {\n      return;\n    }\n    if (isEqual(omitIgnoredProps(prevProps), omitIgnoredProps(this.props))) {\n      return;\n    }\n\n    this.fetchData();\n  }\n\n  get path() {\n    const {organization} = this.props;\n\n    return `/organizations/${organization.slug}/sessions/`;\n  }\n\n  get baseQueryParams() {\n    const {location, selection, defaultStatsPeriod, releases} = this.props;\n\n    return {\n      query: new QueryResults(\n        releases.reduce((acc, release, index, allReleases) => {\n          acc.push(`release:\"${release}\"`);\n          if (index < allReleases.length - 1) {\n            acc.push('OR');\n          }\n\n          return acc;\n        }, [] as string[])\n      ).formatString(),\n      interval: getInterval(selection.datetime),\n      ...getParams(pick(location.query, Object.values(URL_PARAM)), {\n        defaultStatsPeriod,\n      }),\n    };\n  }\n\n  fetchData = async () => {\n    const {api, healthStatsPeriod, disable} = this.props;\n\n    if (disable) {\n      return;\n    }\n\n    api.clear();\n    this.setState({\n      loading: true,\n      errored: false,\n      statusCountByReleaseInPeriod: null,\n      totalCountByReleaseIn24h: null,\n      totalCountByProjectIn24h: null,\n    });\n\n    const promises = [\n      this.fetchStatusCountByReleaseInPeriod(),\n      this.fetchTotalCountByReleaseIn24h(),\n      this.fetchTotalCountByProjectIn24h(),\n    ];\n\n    if (healthStatsPeriod === HealthStatsPeriodOption.AUTO) {\n      promises.push(this.fetchStatusCountByProjectInPeriod());\n    }\n\n    try {\n      const [\n        statusCountByReleaseInPeriod,\n        totalCountByReleaseIn24h,\n        totalCountByProjectIn24h,\n        statusCountByProjectInPeriod,\n      ] = await Promise.all(promises);\n\n      this.setState({\n        loading: false,\n        statusCountByReleaseInPeriod,\n        totalCountByReleaseIn24h,\n        totalCountByProjectIn24h,\n        statusCountByProjectInPeriod,\n      });\n    } catch (error) {\n      addErrorMessage(error.responseJSON?.detail ?? t('Error loading health data'));\n      this.setState({\n        loading: false,\n        errored: true,\n      });\n    }\n  };\n\n  /**\n   * Used to calculate crash free rate, count histogram (This Release series), and crash count\n   */\n  async fetchStatusCountByReleaseInPeriod() {\n    const {api, display} = this.props;\n\n    const response: SessionApiResponse = await api.requestPromise(this.path, {\n      query: {\n        ...this.baseQueryParams,\n        field: [\n          ...new Set([...display.map(d => sessionDisplayToField(d)), 'sum(session)']),\n        ], // this request needs to be fired for sessions in both display options (because of crash count), removing potential sum(session) duplicated with Set\n        groupBy: ['project', 'release', 'session.status'],\n      },\n    });\n\n    return response;\n  }\n\n  /**\n   * Used to calculate count histogram (Total Project series)\n   */\n  async fetchStatusCountByProjectInPeriod() {\n    const {api, display} = this.props;\n\n    const response: SessionApiResponse = await api.requestPromise(this.path, {\n      query: {\n        ...this.baseQueryParams,\n        query: undefined,\n        field: [\n          ...new Set([...display.map(d => sessionDisplayToField(d)), 'sum(session)']),\n        ],\n        groupBy: ['project', 'session.status'],\n      },\n    });\n\n    return response;\n  }\n\n  /**\n   * Used to calculate adoption, and count histogram (This Release series)\n   */\n  async fetchTotalCountByReleaseIn24h() {\n    const {api, display} = this.props;\n\n    const response: SessionApiResponse = await api.requestPromise(this.path, {\n      query: {\n        ...this.baseQueryParams,\n        field: display.map(d => sessionDisplayToField(d)),\n        groupBy: ['project', 'release'],\n        interval: '1h',\n        statsPeriod: '24h',\n      },\n    });\n\n    return response;\n  }\n\n  /**\n   * Used to calculate adoption, and count histogram (Total Project series)\n   */\n  async fetchTotalCountByProjectIn24h() {\n    const {api, display} = this.props;\n\n    const response: SessionApiResponse = await api.requestPromise(this.path, {\n      query: {\n        ...this.baseQueryParams,\n        query: undefined,\n        field: display.map(d => sessionDisplayToField(d)),\n        groupBy: ['project'],\n        interval: '1h',\n        statsPeriod: '24h',\n      },\n    });\n\n    return response;\n  }\n\n  getHealthData = () => {\n    // TODO(sessions): investigate if this needs to be optimized to lower O(n) complexity\n    return {\n      getCrashCount: this.getCrashCount,\n      getCrashFreeRate: this.getCrashFreeRate,\n      get24hCountByRelease: this.get24hCountByRelease,\n      get24hCountByProject: this.get24hCountByProject,\n      getTimeSeries: this.getTimeSeries,\n      getAdoption: this.getAdoption,\n    };\n  };\n\n  getCrashCount = (version: string, project: number, display: DisplayOption) => {\n    const {statusCountByReleaseInPeriod} = this.state;\n    const field = sessionDisplayToField(display);\n\n    return statusCountByReleaseInPeriod?.groups.find(\n      ({by}) =>\n        by.release === version &&\n        by.project === project &&\n        by['session.status'] === 'crashed'\n    )?.totals[field];\n  };\n\n  getCrashFreeRate = (version: string, project: number, display: DisplayOption) => {\n    const {statusCountByReleaseInPeriod} = this.state;\n    const field = sessionDisplayToField(display);\n\n    const totalCount = statusCountByReleaseInPeriod?.groups\n      .filter(({by}) => by.release === version && by.project === project)\n      ?.reduce((acc, group) => acc + group.totals[field], 0);\n\n    const crashedCount = this.getCrashCount(version, project, display);\n\n    return !defined(totalCount) || totalCount === 0\n      ? null\n      : getCrashFreePercent(100 - percent(crashedCount ?? 0, totalCount ?? 0));\n  };\n\n  get24hCountByRelease = (version: string, project: number, display: DisplayOption) => {\n    const {totalCountByReleaseIn24h} = this.state;\n    const field = sessionDisplayToField(display);\n\n    return totalCountByReleaseIn24h?.groups\n      .filter(({by}) => by.release === version && by.project === project)\n      ?.reduce((acc, group) => acc + group.totals[field], 0);\n  };\n\n  get24hCountByProject = (project: number, display: DisplayOption) => {\n    const {totalCountByProjectIn24h} = this.state;\n    const field = sessionDisplayToField(display);\n\n    return totalCountByProjectIn24h?.groups\n      .filter(({by}) => by.project === project)\n      ?.reduce((acc, group) => acc + group.totals[field], 0);\n  };\n\n  getTimeSeries = (version: string, project: number, display: DisplayOption) => {\n    const {healthStatsPeriod} = this.props;\n    if (healthStatsPeriod === HealthStatsPeriodOption.AUTO) {\n      return this.getPeriodTimeSeries(version, project, display);\n    }\n\n    return this.get24hTimeSeries(version, project, display);\n  };\n\n  get24hTimeSeries = (version: string, project: number, display: DisplayOption) => {\n    const {totalCountByReleaseIn24h, totalCountByProjectIn24h} = this.state;\n    const field = sessionDisplayToField(display);\n\n    const intervals = totalCountByProjectIn24h?.intervals ?? [];\n\n    const projectData = totalCountByProjectIn24h?.groups.find(\n      ({by}) => by.project === project\n    )?.series[field];\n\n    const releaseData = totalCountByReleaseIn24h?.groups.find(\n      ({by}) => by.project === project && by.release === version\n    )?.series[field];\n\n    return [\n      {\n        seriesName: t('This Release'),\n        data: intervals?.map((interval, index) => ({\n          name: moment(interval).valueOf(),\n          value: releaseData?.[index] ?? 0,\n        })),\n      },\n      {\n        seriesName: t('Total Project'),\n        data: intervals?.map((interval, index) => ({\n          name: moment(interval).valueOf(),\n          value: projectData?.[index] ?? 0,\n        })),\n        z: 0,\n      },\n    ];\n  };\n\n  getPeriodTimeSeries = (version: string, project: number, display: DisplayOption) => {\n    const {statusCountByReleaseInPeriod, statusCountByProjectInPeriod} = this.state;\n    const field = sessionDisplayToField(display);\n\n    const intervals = statusCountByProjectInPeriod?.intervals ?? [];\n\n    const projectData = statusCountByProjectInPeriod?.groups\n      .filter(({by}) => by.project === project)\n      ?.reduce((acc, group) => reduceTimeSeriesGroups(acc, group, field), [] as number[]);\n\n    const releaseData = statusCountByReleaseInPeriod?.groups\n      .filter(({by}) => by.project === project && by.release === version)\n      ?.reduce((acc, group) => reduceTimeSeriesGroups(acc, group, field), [] as number[]);\n\n    return [\n      {\n        seriesName: t('This Release'),\n        data: intervals?.map((interval, index) => ({\n          name: moment(interval).valueOf(),\n          value: releaseData?.[index] ?? 0,\n        })),\n      },\n      {\n        seriesName: t('Total Project'),\n        data: intervals?.map((interval, index) => ({\n          name: moment(interval).valueOf(),\n          value: projectData?.[index] ?? 0,\n        })),\n        z: 0,\n      },\n    ];\n  };\n\n  getAdoption = (version: string, project: number, display: DisplayOption) => {\n    const get24hCountByRelease = this.get24hCountByRelease(version, project, display);\n    const get24hCountByProject = this.get24hCountByProject(project, display);\n\n    return defined(get24hCountByRelease) && defined(get24hCountByProject)\n      ? percent(get24hCountByRelease, get24hCountByProject)\n      : undefined;\n  };\n\n  render() {\n    const {loading, errored} = this.state;\n    const {children} = this.props;\n\n    return children({\n      isHealthLoading: loading,\n      errored,\n      getHealthData: this.getHealthData(),\n    });\n  }\n}\n\nexport default withApi(ReleaseHealthRequest);\n"],"names":["routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","SortOption","DisplayOption","StatusOption","CRASH_FREE_DECIMAL_THRESHOLD","roundDuration","seconds","round","getCrashFreePercent","percent","decimalThreshold","decimalPlaces","displayCrashFreePercent","isNaN","rounded","toLocaleString","getSessionStatusPercent","absolute","Math","abs","displaySessionStatusPercent","getReleaseNewIssuesUrl","projectId","version","pathname","query","project","statsPeriod","undefined","start","end","QueryResults","formatString","sort","IssueSortOptions","getReleaseUnhandledIssuesUrl","dateTime","getReleaseHandledIssuesUrl","isReleaseArchived","release","status","ReleaseStatus","releaseDisplayLabel","displayOption","count","tn","getReleaseBounds","lastEvent","currentProjectMeta","dateCreated","sessionsUpperBound","releaseStart","moment","startOf","utc","format","releaseEnd","isAfter","isSame","add","getReleaseParams","location","releaseBounds","defaultStatsPeriod","allowEmptyPeriod","params","getParams","pick","Object","values","URL_PARAM","PAGE_URL_PARAM","allowAbsolutePageDatetime","keys","some","param","includes","omitIgnoredProps","props","omit","getInterval","datetimeObj","diffInMinutes","getDiffInMinutes","TWO_WEEKS","ONE_WEEK","TWENTY_FOUR_HOURS","reduceTimeSeriesGroups","acc","group","field","series","forEach","value","index","sessionDisplayToField","display","ReleaseHealthRequest","React","loading","errored","statusCountByReleaseInPeriod","totalCountByReleaseIn24h","totalCountByProjectIn24h","statusCountByProjectInPeriod","async","api","healthStatsPeriod","disable","clear","setState","promises","fetchStatusCountByReleaseInPeriod","fetchTotalCountByReleaseIn24h","fetchTotalCountByProjectIn24h","HealthStatsPeriodOption","push","fetchStatusCountByProjectInPeriod","Promise","all","error","addErrorMessage","responseJSON","detail","t","getCrashCount","getCrashFreeRate","get24hCountByRelease","get24hCountByProject","getTimeSeries","getAdoption","state","groups","find","by","totals","totalCount","filter","reduce","crashedCount","defined","getPeriodTimeSeries","get24hTimeSeries","intervals","projectData","releaseData","seriesName","data","map","interval","name","valueOf","z","componentDidMount","fetchData","componentDidUpdate","prevProps","releasesReloading","isEqual","organization","slug","selection","releases","allReleases","length","datetime","requestPromise","path","baseQueryParams","Set","d","groupBy","children","isHealthLoading","getHealthData","withApi"],"sourceRoot":""}