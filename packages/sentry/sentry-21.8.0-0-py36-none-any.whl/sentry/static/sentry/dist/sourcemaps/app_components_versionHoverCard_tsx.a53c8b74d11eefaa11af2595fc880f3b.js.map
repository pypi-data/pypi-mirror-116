{"version":3,"file":"chunks/app_components_versionHoverCard_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/release.tsx","webpack:///./app/actions/releaseActions.tsx","webpack:///./app/actions/repositoryActions.tsx","webpack:///./app/components/lastCommit.tsx","webpack:///./app/components/versionHoverCard.tsx","webpack:///./app/utils/withRelease.tsx","webpack:///./app/stores/releaseStore.tsx","webpack:///./app/stores/repositoryStore.tsx","webpack:///./app/utils/withRepositories.tsx","webpack:///./app/actionCreators/repositories.tsx"],"sourcesContent":["import * as Sentry from '@sentry/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport ReleaseActions from 'app/actions/releaseActions';\nimport {Client} from 'app/api';\nimport {t} from 'app/locale';\nimport ReleaseStore, {getReleaseStoreKey} from 'app/stores/releaseStore';\nimport {Deploy, Release, ReleaseStatus} from 'app/types';\n\ntype ParamsGet = {\n  orgSlug: string;\n  projectSlug: string;\n  releaseVersion: string;\n};\n\nexport function getProjectRelease(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n  const path = `/projects/${orgSlug}/${projectSlug}/releases/${encodeURIComponent(\n    releaseVersion\n  )}/`;\n  // HACK(leedongwei): Actions fired by the ActionCreators are queued to\n  // the back of the event loop, allowing another getRelease for the same\n  // release to be fired before the loading state is updated in store.\n  // This hack short-circuits that and update the state immediately.\n  ReleaseStore.state.releaseLoading[getReleaseStoreKey(projectSlug, releaseVersion)] =\n    true;\n  ReleaseActions.loadRelease(orgSlug, projectSlug, releaseVersion);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Release) => {\n      ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, res);\n    })\n    .catch(err => {\n      // This happens when a Project is not linked to a specific Release\n      if (err.status === 404) {\n        ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, null);\n        return;\n      }\n\n      ReleaseActions.loadReleaseError(projectSlug, releaseVersion, err);\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Warning);\n        scope.setFingerprint(['getRelease-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n\nexport function getReleaseDeploys(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n  const path = `/organizations/${orgSlug}/releases/${encodeURIComponent(\n    releaseVersion\n  )}/deploys/`;\n\n  // HACK(leedongwei): Same as above\n  ReleaseStore.state.deploysLoading[getReleaseStoreKey(projectSlug, releaseVersion)] =\n    true;\n  ReleaseActions.loadDeploys(orgSlug, projectSlug, releaseVersion);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Deploy[]) => {\n      ReleaseActions.loadDeploysSuccess(projectSlug, releaseVersion, res);\n    })\n    .catch(err => {\n      // This happens when a Project is not linked to a specific Release\n      if (err.status === 404) {\n        ReleaseActions.loadDeploysSuccess(projectSlug, releaseVersion, null);\n        return;\n      }\n\n      ReleaseActions.loadDeploysError(projectSlug, releaseVersion, err);\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Warning);\n        scope.setFingerprint(['getReleaseDeploys-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n\nexport function archiveRelease(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n\n  ReleaseActions.loadRelease(orgSlug, projectSlug, releaseVersion);\n  addLoadingMessage(t('Archiving Release\\u2026'));\n\n  return api\n    .requestPromise(`/organizations/${orgSlug}/releases/`, {\n      method: 'POST',\n      data: {\n        status: ReleaseStatus.Archived,\n        projects: [],\n        version: releaseVersion,\n      },\n    })\n    .then((release: Release) => {\n      ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, release);\n      addSuccessMessage(t('Release was successfully archived.'));\n    })\n    .catch(error => {\n      ReleaseActions.loadReleaseError(projectSlug, releaseVersion, error);\n      addErrorMessage(\n        error.responseJSON?.detail ?? t('Release could not be be archived.')\n      );\n      throw error;\n    });\n}\n\nexport function restoreRelease(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n\n  ReleaseActions.loadRelease(orgSlug, projectSlug, releaseVersion);\n  addLoadingMessage(t('Restoring Release\\u2026'));\n\n  return api\n    .requestPromise(`/organizations/${orgSlug}/releases/`, {\n      method: 'POST',\n      data: {\n        status: ReleaseStatus.Active,\n        projects: [],\n        version: releaseVersion,\n      },\n    })\n    .then((release: Release) => {\n      ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, release);\n      addSuccessMessage(t('Release was successfully restored.'));\n    })\n    .catch(error => {\n      ReleaseActions.loadReleaseError(projectSlug, releaseVersion, error);\n      addErrorMessage(\n        error.responseJSON?.detail ?? t('Release could not be be restored.')\n      );\n      throw error;\n    });\n}\n","import Reflux from 'reflux';\n\nexport default Reflux.createActions([\n  'loadRelease', // Singular as it loads 1 release\n  'loadReleaseError',\n  'loadReleaseSuccess',\n  'loadDeploys', // Plural as it loads all deploys related to a release\n  'loadDeploysError',\n  'loadDeploysSuccess',\n]);\n","import Reflux from 'reflux';\n\nexport default Reflux.createActions([\n  'resetRepositories',\n  'loadRepositories',\n  'loadRepositoriesError',\n  'loadRepositoriesSuccess',\n]);\n","import {Component} from 'react';\n\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport TimeSince from 'app/components/timeSince';\nimport {t} from 'app/locale';\nimport {AvatarUser, Commit} from 'app/types';\n\ntype Props = {\n  commit: Commit;\n  headerClass: string;\n};\n\nconst unknownUser: AvatarUser = {\n  id: '',\n  name: '',\n  username: '??',\n  email: '',\n  avatarUrl: '',\n  avatar: {\n    avatarUuid: '',\n    avatarType: 'letter_avatar',\n  },\n  ip_address: '',\n};\n\nclass LastCommit extends Component<Props> {\n  renderMessage(message: Commit['message']): string {\n    if (!message) {\n      return t('No message provided');\n    }\n\n    const firstLine = message.split(/\\n/)[0];\n    if (firstLine.length > 100) {\n      let truncated = firstLine.substr(0, 90);\n      const words = truncated.split(/ /);\n      // try to not have elipsis mid-word\n      if (words.length > 1) {\n        words.pop();\n        truncated = words.join(' ');\n      }\n      return truncated + '...';\n    }\n    return firstLine;\n  }\n\n  render() {\n    const {commit, headerClass} = this.props;\n    const commitAuthor = commit && commit.author;\n    return (\n      <div>\n        <h6 className={headerClass}>Last commit</h6>\n        <div className=\"commit\">\n          <div className=\"commit-avatar\">\n            <UserAvatar user={commitAuthor || unknownUser} />\n          </div>\n          <div className=\"commit-message truncate\">\n            {this.renderMessage(commit.message)}\n          </div>\n          <div className=\"commit-meta\">\n            <strong>{(commitAuthor && commitAuthor.name) || t('Unknown Author')}</strong>\n            &nbsp;\n            <TimeSince date={commit.dateCreated} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LastCommit;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'app/api';\nimport AvatarList from 'app/components/avatar/avatarList';\nimport Button from 'app/components/button';\nimport Clipboard from 'app/components/clipboard';\nimport Hovercard from 'app/components/hovercard';\nimport LastCommit from 'app/components/lastCommit';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport RepoLabel from 'app/components/repoLabel';\nimport TimeSince from 'app/components/timeSince';\nimport Version from 'app/components/version';\nimport {IconCopy} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Deploy, Organization, Release, Repository} from 'app/types';\nimport {defined} from 'app/utils';\nimport withApi from 'app/utils/withApi';\nimport withRelease from 'app/utils/withRelease';\nimport withRepositories from 'app/utils/withRepositories';\n\ntype Props = {\n  api: Client;\n  projectSlug: string;\n  releaseVersion: string;\n\n  organization: Organization;\n  release?: Release;\n  releaseLoading?: boolean;\n  releaseError?: Error;\n  deploys?: Array<Deploy>;\n  deploysLoading?: boolean;\n  deploysError?: Error;\n  repositories?: Array<Repository>;\n  repositoriesLoading?: boolean;\n  repositoriesError?: Error;\n};\n\ntype State = {\n  visible: boolean;\n};\n\nclass VersionHoverCard extends React.Component<Props, State> {\n  state: State = {\n    visible: false,\n  };\n\n  toggleHovercard() {\n    this.setState({\n      visible: true,\n    });\n  }\n\n  getRepoLink() {\n    const {organization} = this.props;\n    const orgSlug = organization.slug;\n    return {\n      header: null,\n      body: (\n        <ConnectRepo>\n          <h5>{t('Releases are better with commit data!')}</h5>\n          <p>\n            {t(\n              'Connect a repository to see commit info, files changed, and authors involved in future releases.'\n            )}\n          </p>\n          <Button href={`/organizations/${orgSlug}/repos/`} priority=\"primary\">\n            {t('Connect a repository')}\n          </Button>\n        </ConnectRepo>\n      ),\n    };\n  }\n\n  getBody() {\n    const {releaseVersion, release, deploys} = this.props;\n    if (release === undefined || !defined(deploys)) {\n      return {header: null, body: null};\n    }\n\n    const {lastCommit} = release;\n    const recentDeploysByEnvironment = deploys.reduce(function (dbe, deploy) {\n      const {dateFinished, environment} = deploy;\n      if (!dbe.hasOwnProperty(environment)) {\n        dbe[environment] = dateFinished;\n      }\n\n      return dbe;\n    }, {});\n    let mostRecentDeploySlice = Object.keys(recentDeploysByEnvironment);\n\n    if (Object.keys(recentDeploysByEnvironment).length > 3) {\n      mostRecentDeploySlice = Object.keys(recentDeploysByEnvironment).slice(0, 3);\n    }\n\n    return {\n      header: (\n        <HeaderWrapper>\n          {t('Release')}\n          <VersionWrapper>\n            <StyledVersion version={releaseVersion} truncate anchor={false} />\n\n            <Clipboard value={releaseVersion}>\n              <ClipboardIconWrapper>\n                <IconCopy size=\"xs\" />\n              </ClipboardIconWrapper>\n            </Clipboard>\n          </VersionWrapper>\n        </HeaderWrapper>\n      ),\n      body: (\n        <div>\n          <div className=\"row row-flex\">\n            <div className=\"col-xs-4\">\n              <h6>{t('New Issues')}</h6>\n              <div className=\"count-since\">{release.newGroups}</div>\n            </div>\n            <div className=\"col-xs-8\">\n              <h6 style={{textAlign: 'right'}}>\n                {release.commitCount}{' '}\n                {release.commitCount !== 1 ? t('commits ') : t('commit ')} {t('by ')}{' '}\n                {release.authors.length}{' '}\n                {release.authors.length !== 1 ? t('authors') : t('author')}{' '}\n              </h6>\n              <AvatarList\n                users={release.authors}\n                avatarSize={25}\n                tooltipOptions={{container: 'body'} as any}\n                typeMembers=\"authors\"\n              />\n            </div>\n          </div>\n          {lastCommit && <LastCommit commit={lastCommit} headerClass=\"commit-heading\" />}\n          {deploys.length > 0 && (\n            <div>\n              <div className=\"divider\">\n                <h6 className=\"deploy-heading\">{t('Deploys')}</h6>\n              </div>\n              {mostRecentDeploySlice.map((env, idx) => {\n                const dateFinished = recentDeploysByEnvironment[env];\n                return (\n                  <div className=\"deploy\" key={idx}>\n                    <div className=\"deploy-meta\" style={{position: 'relative'}}>\n                      <VersionRepoLabel>{env}</VersionRepoLabel>\n                      {dateFinished && <StyledTimeSince date={dateFinished} />}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      ),\n    };\n  }\n\n  render() {\n    const {\n      deploysLoading,\n      deploysError,\n      release,\n      releaseLoading,\n      releaseError,\n      repositories,\n      repositoriesLoading,\n      repositoriesError,\n    } = this.props;\n    let header: React.ReactNode = null;\n    let body: React.ReactNode = null;\n\n    const loading = !!(deploysLoading || releaseLoading || repositoriesLoading);\n    const error = deploysError ?? releaseError ?? repositoriesError;\n    const hasRepos = repositories && repositories.length > 0;\n\n    if (loading) {\n      body = <LoadingIndicator mini />;\n    } else if (error) {\n      body = <LoadingError />;\n    } else {\n      const renderObj: {[key: string]: React.ReactNode} =\n        hasRepos && release ? this.getBody() : this.getRepoLink();\n      header = renderObj.header;\n      body = renderObj.body;\n    }\n\n    return (\n      <Hovercard {...this.props} header={header} body={body}>\n        {this.props.children}\n      </Hovercard>\n    );\n  }\n}\n\nexport {VersionHoverCard};\nexport default withApi(withRelease(withRepositories(VersionHoverCard)));\n\nconst ConnectRepo = styled('div')`\n  padding: ${space(2)};\n  text-align: center;\n`;\n\nconst VersionRepoLabel = styled(RepoLabel)`\n  width: 86px;\n`;\n\nconst StyledTimeSince = styled(TimeSince)`\n  color: ${p => p.theme.gray300};\n  position: absolute;\n  left: 98px;\n  width: 50%;\n  padding: 3px 0;\n`;\n\nconst HeaderWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst VersionWrapper = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: flex-end;\n`;\nconst StyledVersion = styled(Version)`\n  margin-right: ${space(0.5)};\n  max-width: 190px;\n`;\nconst ClipboardIconWrapper = styled('span')`\n  &:hover {\n    cursor: pointer;\n  }\n`;\n","import * as React from 'react';\n\nimport {getProjectRelease, getReleaseDeploys} from 'app/actionCreators/release';\nimport {Client} from 'app/api';\nimport ReleaseStore from 'app/stores/releaseStore';\nimport {Deploy, Organization, Release} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype DependentProps = {\n  api: Client;\n  organization: Organization;\n  projectSlug: string;\n  releaseVersion: string;\n};\n\ntype InjectedProps = {\n  release?: Release;\n  releaseLoading?: boolean;\n  releaseError?: Error;\n  deploys?: Array<Deploy>;\n  deploysLoading?: boolean;\n  deploysError?: Error;\n};\n\nfunction withRelease<P extends DependentProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithRelease extends React.Component<\n    Omit<P, keyof InjectedProps> & Partial<InjectedProps> & DependentProps,\n    InjectedProps\n  > {\n    static displayName = `withRelease(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      const {projectSlug, releaseVersion} = this.props;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n      this.state = {...releaseData};\n    }\n\n    componentDidMount() {\n      this.fetchRelease();\n      this.fetchDeploys();\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = ReleaseStore.listen(() => this.onStoreUpdate(), undefined);\n\n    fetchRelease() {\n      const {api, organization, projectSlug, releaseVersion} = this.props;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n      const orgSlug = organization.slug;\n\n      if (\n        (!releaseData.release && !releaseData.releaseLoading) ||\n        releaseData.releaseError\n      ) {\n        getProjectRelease(api, {orgSlug, projectSlug, releaseVersion});\n      }\n    }\n\n    fetchDeploys() {\n      const {api, organization, projectSlug, releaseVersion} = this.props;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n      const orgSlug = organization.slug;\n\n      if (\n        (!releaseData.deploys && !releaseData.deploysLoading) ||\n        releaseData.deploysError\n      ) {\n        getReleaseDeploys(api, {orgSlug, projectSlug, releaseVersion});\n      }\n    }\n\n    onStoreUpdate() {\n      const {projectSlug, releaseVersion} = this.props;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n\n      this.setState({...releaseData});\n    }\n\n    render() {\n      return (\n        <WrappedComponent\n          {...(this.props as P & DependentProps)}\n          {...(this.state as InjectedProps)}\n        />\n      );\n    }\n  }\n  return WithRelease;\n}\n\nexport default withRelease;\n","import Reflux from 'reflux';\n\nimport OrganizationActions from 'app/actions/organizationActions';\nimport ReleaseActions from 'app/actions/releaseActions';\nimport {Deploy, Organization, Release} from 'app/types';\n\ntype StoreRelease = Map<string, Release>;\ntype StoreDeploys = Map<string, Array<Deploy>>;\ntype StoreLoading = Map<string, boolean>;\ntype StoreError = Map<string, Error>;\n\ntype ReleaseStoreInterface = {\n  get(\n    projectSlug: string,\n    releaseVersion: string\n  ): {\n    release: Release | undefined;\n    releaseLoading: boolean | undefined;\n    releaseError: Error | undefined;\n    deploys: Array<Deploy> | undefined;\n    deploysLoading: boolean | undefined;\n    deploysError: Error | undefined;\n  };\n\n  state: {\n    orgSlug: string | undefined;\n    release: StoreRelease;\n    releaseLoading: StoreLoading;\n    releaseError: StoreError;\n    deploys: StoreDeploys;\n    deploysLoading: StoreLoading;\n    deploysError: StoreError;\n  };\n\n  updateOrganization(org: Organization): void;\n  loadRelease(orgSlug: string, projectSlug: string, releaseVersion: string): void;\n  loadReleaseSuccess(projectSlug: string, releaseVersion: string, data: Release): void;\n  loadReleaseError(projectSlug: string, releaseVersion: string, error: Error): void;\n  loadDeploys(orgSlug: string, projectSlug: string, releaseVersion: string): void;\n  loadDeploysSuccess(projectSlug: string, releaseVersion: string, data: Release): void;\n  loadDeploysError(projectSlug: string, releaseVersion: string, error: Error): void;\n};\n\nexport const getReleaseStoreKey = (projectSlug: string, releaseVersion: string) =>\n  `${projectSlug}${releaseVersion}`;\n\nconst ReleaseStoreConfig: Reflux.StoreDefinition & ReleaseStoreInterface = {\n  state: {\n    orgSlug: undefined,\n    release: new Map() as StoreRelease,\n    releaseLoading: new Map() as StoreLoading,\n    releaseError: new Map() as StoreError,\n    deploys: new Map() as StoreDeploys,\n    deploysLoading: new Map() as StoreLoading,\n    deploysError: new Map() as StoreError,\n  },\n\n  listenables: ReleaseActions,\n\n  init() {\n    this.listenTo(OrganizationActions.update, this.updateOrganization);\n    this.reset();\n  },\n\n  reset() {\n    this.state = {\n      orgSlug: undefined,\n      release: new Map() as StoreRelease,\n      releaseLoading: new Map() as StoreLoading,\n      releaseError: new Map() as StoreError,\n      deploys: new Map() as StoreDeploys,\n      deploysLoading: new Map() as StoreLoading,\n      deploysError: new Map() as StoreError,\n    };\n    this.trigger(this.state);\n  },\n\n  updateOrganization(org: Organization) {\n    this.reset();\n    this.state.orgSlug = org.slug;\n    this.trigger(this.state);\n  },\n\n  loadRelease(orgSlug: string, projectSlug: string, releaseVersion: string) {\n    // Wipe entire store if the user switched organizations\n    if (!this.orgSlug || this.orgSlug !== orgSlug) {\n      this.reset();\n      this.orgSlug = orgSlug;\n    }\n\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {releaseLoading, releaseError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      releaseLoading: {\n        ...releaseLoading,\n        [releaseKey]: true,\n      },\n      releaseError: {\n        ...releaseError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadReleaseError(projectSlug: string, releaseVersion: string, error: Error) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {releaseLoading, releaseError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      releaseLoading: {\n        ...releaseLoading,\n        [releaseKey]: false,\n      },\n      releaseError: {\n        ...releaseError,\n        [releaseKey]: error,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadReleaseSuccess(projectSlug: string, releaseVersion: string, data: Release) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {release, releaseLoading, releaseError, ...state} = this.state;\n    this.state = {\n      ...state,\n      release: {\n        ...release,\n        [releaseKey]: data,\n      },\n      releaseLoading: {\n        ...releaseLoading,\n        [releaseKey]: false,\n      },\n      releaseError: {\n        ...releaseError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadDeploys(orgSlug: string, projectSlug: string, releaseVersion: string) {\n    // Wipe entire store if the user switched organizations\n    if (!this.orgSlug || this.orgSlug !== orgSlug) {\n      this.reset();\n      this.orgSlug = orgSlug;\n    }\n\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {deploysLoading, deploysError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      deploysLoading: {\n        ...deploysLoading,\n        [releaseKey]: true,\n      },\n      deploysError: {\n        ...deploysError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadDeploysError(projectSlug: string, releaseVersion: string, error: Error) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {deploysLoading, deploysError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      deploysLoading: {\n        ...deploysLoading,\n        [releaseKey]: false,\n      },\n      deploysError: {\n        ...deploysError,\n        [releaseKey]: error,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadDeploysSuccess(projectSlug: string, releaseVersion: string, data: Release) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {deploys, deploysLoading, deploysError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      deploys: {\n        ...deploys,\n        [releaseKey]: data,\n      },\n      deploysLoading: {\n        ...deploysLoading,\n        [releaseKey]: false,\n      },\n      deploysError: {\n        ...deploysError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  get(projectSlug: string, releaseVersion: string) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n\n    return {\n      release: this.state.release[releaseKey],\n      releaseLoading: this.state.releaseLoading[releaseKey],\n      releaseError: this.state.releaseError[releaseKey],\n      deploys: this.state.deploys[releaseKey],\n      deploysLoading: this.state.deploysLoading[releaseKey],\n      deploysError: this.state.deploysError[releaseKey],\n    };\n  },\n};\n\ntype ReleaseStore = Reflux.Store & ReleaseStoreInterface;\n\nconst ReleaseStore = Reflux.createStore(ReleaseStoreConfig) as ReleaseStore;\n\nexport default ReleaseStore;\n","import Reflux from 'reflux';\n\nimport RepoActions from 'app/actions/repositoryActions';\nimport {Repository} from 'app/types';\n\ntype RepositoryStoreInterface = {\n  get(): {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesLoading?: boolean;\n    repositoriesError?: Error;\n  };\n\n  state: {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesLoading?: boolean;\n    repositoriesError?: Error;\n  };\n\n  loadRepositories(orgSlug: string): void;\n  loadRepositoriesSuccess(data: Repository[]): void;\n  loadRepositoriesError(error: Error): void;\n};\n\nexport const RepositoryStoreConfig: Reflux.StoreDefinition & RepositoryStoreInterface = {\n  listenables: RepoActions,\n  state: {\n    orgSlug: undefined,\n    repositories: undefined,\n    repositoriesLoading: undefined,\n    repositoriesError: undefined,\n  },\n\n  init() {\n    this.resetRepositories();\n  },\n\n  resetRepositories() {\n    this.state = {\n      orgSlug: undefined,\n      repositories: undefined,\n      repositoriesLoading: undefined,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositories(orgSlug: string) {\n    this.state = {\n      orgSlug,\n      repositories: orgSlug === this.state.orgSlug ? this.state.repositories : undefined,\n      repositoriesLoading: true,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesError(err: Error) {\n    this.state = {\n      ...this.state,\n      repositories: undefined,\n      repositoriesLoading: false,\n      repositoriesError: err,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesSuccess(data: Repository[]) {\n    this.state = {\n      ...this.state,\n      repositories: data,\n      repositoriesLoading: false,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  get() {\n    return {...this.state};\n  },\n};\n\ntype RepositoryStore = Reflux.Store & RepositoryStoreInterface;\n\nconst RepositoryStore = Reflux.createStore(RepositoryStoreConfig) as RepositoryStore;\n\nexport default RepositoryStore;\n","import * as React from 'react';\n\nimport {getRepositories} from 'app/actionCreators/repositories';\nimport RepositoryActions from 'app/actions/repositoryActions';\nimport {Client} from 'app/api';\nimport RepositoryStore from 'app/stores/repositoryStore';\nimport {Organization, Repository} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype DependentProps = {\n  api: Client;\n  organization: Organization;\n};\n\ntype InjectedProps = {\n  repositories?: Repository[];\n  repositoriesLoading?: boolean;\n  repositoriesError?: Error;\n};\n\nconst INITIAL_STATE: InjectedProps = {\n  repositories: undefined,\n  repositoriesLoading: undefined,\n  repositoriesError: undefined,\n};\n\nfunction withRepositories<P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithRepositories extends React.Component<P & DependentProps, InjectedProps> {\n    static displayName = `withRepositories(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props: P & DependentProps, context: any) {\n      super(props, context);\n\n      const {organization} = this.props;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      if (repoData.orgSlug !== orgSlug) {\n        RepositoryActions.resetRepositories();\n      }\n\n      this.state =\n        repoData.orgSlug === orgSlug\n          ? {...INITIAL_STATE, ...repoData}\n          : {...INITIAL_STATE};\n    }\n\n    componentDidMount() {\n      // XXX(leedongwei): Do not move this function call unless you modify the\n      // unit test named \"prevents repeated calls\"\n      this.fetchRepositories();\n    }\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n    unsubscribe = RepositoryStore.listen(() => this.onStoreUpdate(), undefined);\n\n    fetchRepositories() {\n      const {api, organization} = this.props;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      // XXX(leedongwei): Do not check the orgSlug here. It would have been\n      // verified at `getInitialState`. The short-circuit hack in actionCreator\n      // does not update the orgSlug in the store.\n      if (\n        (!repoData.repositories && !repoData.repositoriesLoading) ||\n        repoData.repositoriesError\n      ) {\n        getRepositories(api, {orgSlug});\n      }\n    }\n\n    onStoreUpdate() {\n      const repoData = RepositoryStore.get();\n      this.setState({...repoData});\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  return WithRepositories;\n}\n\nexport default withRepositories;\n","import * as Sentry from '@sentry/react';\n\nimport RepositoryActions from 'app/actions/repositoryActions';\nimport {Client} from 'app/api';\nimport RepositoryStore from 'app/stores/repositoryStore';\nimport {Repository} from 'app/types';\n\ntype ParamsGet = {\n  orgSlug: string;\n};\n\nexport function getRepositories(api: Client, params: ParamsGet) {\n  const {orgSlug} = params;\n  const path = `/organizations/${orgSlug}/repos/`;\n\n  // HACK(leedongwei): Actions fired by the ActionCreators are queued to\n  // the back of the event loop, allowing another getRepo for the same\n  // repo to be fired before the loading state is updated in store.\n  // This hack short-circuits that and update the state immediately.\n  RepositoryStore.state.repositoriesLoading = true;\n  RepositoryActions.loadRepositories(orgSlug);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Repository[]) => {\n      RepositoryActions.loadRepositoriesSuccess(res);\n    })\n    .catch(err => {\n      RepositoryActions.loadRepositoriesError(err);\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Warning);\n        scope.setFingerprint(['getRepositories-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n"],"names":["getProjectRelease","api","params","orgSlug","projectSlug","releaseVersion","path","encodeURIComponent","ReleaseStore","getReleaseStoreKey","ReleaseActions","requestPromise","method","then","res","catch","err","status","Sentry","scope","setLevel","setFingerprint","getReleaseDeploys","archiveRelease","addLoadingMessage","t","data","ReleaseStatus","projects","version","release","addSuccessMessage","error","addErrorMessage","responseJSON","detail","restoreRelease","Reflux","unknownUser","id","name","username","email","avatarUrl","avatar","avatarUuid","avatarType","ip_address","LastCommit","Component","renderMessage","message","firstLine","split","length","truncated","substr","words","pop","join","render","commit","headerClass","this","props","commitAuthor","author","className","user","date","dateCreated","VersionHoverCard","React","visible","toggleHovercard","setState","getRepoLink","organization","slug","header","body","ConnectRepo","href","priority","getBody","deploys","undefined","defined","lastCommit","recentDeploysByEnvironment","reduce","dbe","deploy","dateFinished","environment","hasOwnProperty","mostRecentDeploySlice","Object","keys","slice","HeaderWrapper","VersionWrapper","StyledVersion","truncate","anchor","value","ClipboardIconWrapper","size","newGroups","style","textAlign","commitCount","authors","users","avatarSize","tooltipOptions","container","typeMembers","map","env","idx","position","VersionRepoLabel","StyledTimeSince","deploysLoading","deploysError","releaseLoading","releaseError","repositories","repositoriesLoading","repositoriesError","loading","hasRepos","mini","renderObj","children","withApi","WrappedComponent","WithRelease","constructor","context","super","onStoreUpdate","releaseData","state","componentDidMount","fetchRelease","fetchDeploys","componentWillUnmount","unsubscribe","getDisplayName","withRelease","withRepositories","space","RepoLabel","TimeSince","p","theme","gray300","Version","ReleaseStoreConfig","Map","listenables","init","listenTo","OrganizationActions","updateOrganization","reset","trigger","org","loadRelease","releaseKey","loadReleaseError","loadReleaseSuccess","loadDeploys","loadDeploysError","loadDeploysSuccess","get","RepositoryStoreConfig","RepoActions","resetRepositories","loadRepositories","loadRepositoriesError","loadRepositoriesSuccess","INITIAL_STATE","WithRepositories","RepositoryStore","repoData","RepositoryActions","fetchRepositories","getRepositories"],"sourceRoot":""}