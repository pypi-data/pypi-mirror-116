{"version":3,"file":"chunks/app_views_settings_projectAlerts_settings_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"okBAcA,MAAMA,EAAkB,EAAEC,QAAAA,EAASC,eAAAA,KACV,IAAnBD,EAAQE,OACH,MAIP,QAAC,KAAD,YACE,QAAC,KAAD,WAAcC,EAAAA,EAAAA,GAAE,4BAEhB,QAAC,IAAD,WACE,QAACC,EAAD,UACGJ,EAAQK,KAAIC,IACX,QAACC,EAAD,CAEEC,QAAS,IAAMP,EAAeK,GAC9BG,UAAS,4BAAuBH,EAAOI,IAHzC,UAKE,QAACC,EAAD,YACE,QAACC,EAAD,CAAkBC,SAAUP,EAAOI,MACnC,QAAC,IAAD,UAAeJ,EAAOQ,WAAaR,EAAOS,WANvCT,EAAOI,aAbpBX,EAAAA,YAAAA,kBA6BN,MAAMK,GAAU,OAAO,MAAP,qBAAH,yBAEAY,EAAAA,EAAAA,GAAM,GAFN,2BAOPT,GAAoB,OAAO,SAAP,qBAAH,WACXS,EAAAA,EAAAA,GAAM,GADK,6CAIRC,GAAKA,EAAEC,MAAMC,eAJL,wIAWJF,GAAKA,EAAEC,MAAME,cAXT,6CAmBjBT,GAAQ,OAAO,MAAP,qBAAH,kFAMLC,GAAmB,OAAOS,EAAAA,GAAP,qBAAH,iBACJL,EAAAA,EAAAA,GAAM,GADF,KAItB,I,6CC/DA,MAAMM,EAAa,EACjBC,aAAAA,EACAC,QAAAA,EACAC,WAAAA,EACAC,gBAAAA,EAAkB,SAClBzB,eAAAA,EAAiB,aAEjB,MAUM0B,EAAuBrB,KAC3BsB,EAAAA,EAAAA,IAAc,CACZC,UAAWL,EAAQM,KACnBC,MAAOR,EAAaO,KACpBjB,SAAUP,EAAOwB,OAGnBJ,EAAgBpB,IAGlB,OAAKmB,EAAWvB,QAWd,yBACGuB,EACEO,QAAOf,GAAKA,EAAEgB,UACd5B,KAAI6B,IACH,QAAC,IAAD,CACEA,KAAMA,EACNX,aAAcA,EACdC,QAASA,EAETE,gBAAiBC,GADZO,EAAKxB,OAKhB,QAAC,EAAD,CACEV,QAASyB,EAAWO,QAAOf,IAAMA,EAAEgB,UAAYhB,EAAEkB,WACjDlC,eA9CsBK,KAC1B8B,EAAAA,EAAAA,IAAa,CACXP,UAAWL,EAAQM,KACnBC,MAAOR,EAAaO,KACpBjB,SAAUP,EAAOwB,OAGnB7B,EAAeK,UAeb,QAAC,KAAD,WACE,QAAC,KAAD,WACGH,EAAAA,EAAAA,GAAE,4EA/BPmB,EAAAA,YAAAA,aA2DN,W,oHCvEO,MAAMe,EAAQ,+CAEfC,EAAiBC,IACrBA,EAAQC,OAAOD,GAAS,IACjBE,EAAAA,EAAAA,IAAG,YAAa,aAAcF,IAG1BG,EAAiC,CAC5CC,gBAAiB,CACf5B,KAAM,kBACN6B,KAAM,SAGNC,OAAO1C,EAAAA,EAAAA,GAAE,oBACT2C,YAAa,yBACbC,MAAM5C,EAAAA,EAAAA,GACJ,yMAGJ6C,gBAAiB,CACfjC,KAAM,kBACN6B,KAAM,QACNK,IAAK,GACLC,IAAK,KACLC,KAAM,GACNC,aAAc,IACdP,OAAO1C,EAAAA,EAAAA,GAAE,6BACT4C,MAAM5C,EAAAA,EAAAA,GAAE,uDACRkD,YAAaf,GAEfgB,gBAAiB,CACfvC,KAAM,kBACN6B,KAAM,QACNK,IAAK,GACLC,IAAK,KACLC,KAAM,GACNC,aAAc,IACdP,OAAO1C,EAAAA,EAAAA,GAAE,6BACT4C,MAAM5C,EAAAA,EAAAA,GAAE,wDACRkD,YAAaf,K,wDC/BjB,QAZA,SACEiB,EACAC,EACAC,GAAsB,EACtBC,GAEA,MAAMC,EAAW,GAAH,OAAMJ,EAAN,cAAqBC,GAC7BI,EAAOF,EAAc,GAAH,OAAMC,EAAN,cAAoBD,GAAgBC,EAE5D,OAAOF,EAAa,GAAH,OAAMG,EAAN,aAAwBA,I,wSCD5B,MAAMC,UAGXC,EAAAA,EACRC,WACE,MAAO,GAGTC,SACE,MAAMC,EAAQC,KAAKH,WACnB,OACE,QAAC,IAAD,CAAeE,MAAK,UAAKA,EAAQ,GAAH,OAAMA,EAAN,OAAmB,GAA7B,UAApB,SACGC,KAAKC,qBAZON,EAAAA,YAAAA,a,sbCwCN,MAAMO,UAAkBC,EAAAA,UAKrCL,SACE,MAAM,MACJC,EADI,OAEJvB,EAFI,OAGJ4B,EAHI,SAIJC,EAJI,qBAKJC,EALI,aAMJC,EANI,aAOJC,KACGC,GACDT,KAAKU,MAET,OACE,QAAC,KAAD,CAAOlE,GAAqB,iBAAVuD,GAAqBY,EAAAA,EAAAA,GAAsBZ,QAASa,EAAtE,UACGb,IAAS,QAAC,KAAD,UAAcA,KACxB,QAAC,IAAD,WAC2B,mBAAjBS,GAA+BA,EAAa,CAACT,MAAAA,EAAOvB,OAAAA,IAE3DA,EAAOrC,KAAI0E,IACV,GAAqB,mBAAVA,EACT,OAAOA,IAGT,MAAO3B,aAAc4B,KAAMC,GAA4BF,EASvD,OALiB,IAAbR,IACFU,EAAyBV,UAAW,EACpCU,EAAyBC,oBAAiBJ,IAI1C,QAAC,IAAD,CACER,OAAQA,EACRC,SAAUA,KAENI,KACAH,EACJO,MAAOE,EACPE,YAAajB,KAAKU,MAAMO,cAAX,WAA+BJ,EAAMhE,OAJ7CgE,EAAMhE,SAQQ,mBAAjB0D,GAA+BA,EAAa,CAACR,MAAAA,EAAOvB,OAAAA,WAjDjD0B,EAAAA,YAAAA,a,OAAAA,EAAAA,eACiB,CAClCI,qBAAsB,M,moBCf1B,MAAMY,UAAiBf,EAAAA,UAA8B,yDACpC,CAEbc,YAAW,UAAEjB,KAAKU,MAAMS,gBAAb,aAAE,EAAqBC,OAGpCC,oBACErB,KAAKsB,eAGPC,iCAAiCC,GAC/B,GAAIxB,KAAKU,MAAMS,SAASC,OAASI,EAAUL,SAASC,KAAM,CACxD,MAAMA,EAAOI,EAAUL,SAASC,KAChCpB,KAAKsB,aAAaF,GAClBpB,KAAKyB,SAAS,CAACR,YAAaG,KAIhCE,aAAaI,GAAuB,MAElC,MAAMN,EAAOM,IAAM,UAAI1B,KAAKU,MAAMS,gBAAf,aAAI,EAAqBC,MAE5C,GAAKA,EAOL,IACEO,GAAAA,EAAgBhB,EAAAA,EAAAA,GAAsBiB,mBAAmBR,IAAQ,CAC/DS,MAAO,SACPC,QAAS,MAEX,MAAOC,GACPC,EAAAA,GAAwBD,IAI5BE,kBAAkBzD,GAChB,MAAM0D,EAAwB1D,EAAOV,QACnC+C,GAA0B,mBAAVA,IAAwBsB,EAAAA,EAAAA,IAAQtB,MAAAA,OAAD,EAACA,EAAOuB,WAGzD,GAAI5D,EAAOxC,SAAWkG,EAAsBlG,OAAQ,CAClD,MAAM,qBAACsE,KAAyBI,GAASV,KAAKU,MAS9C,OAP2BwB,EAAsBG,OAAMxB,GACxB,mBAAlBA,EAAMuB,SACPvB,EAAMuB,QAAQ,IAAI1B,KAAUJ,KAE9BO,EAAMuB,UAMlB,OAAO,EAGTE,YAAW,OACT9D,EADS,eAET+D,EAFS,MAGTxC,IAiBA,OAF0BC,KAAKiC,kBAAkBzD,IAI9C+D,MAAAA,GAAAA,EAAgBhC,cAChBgC,MAAAA,GAAAA,EAAgB/B,cAKZ,QAAC,IAAD,CAAWT,MAAOA,EAAOvB,OAAQA,KAAY+D,IAH3C,KAMXzC,SACE,MAAM,OACJM,EADI,OAEJ5B,EAFI,MAGJuB,EAHI,MAIJyC,EAJI,SAKJnC,EALI,SAMJoC,EANI,qBAOJnC,EAPI,aAQJC,EARI,aASJC,EACAW,SAAUuB,KACPjC,GACDT,KAAKU,MAEH6B,EAAiB,CACrBnC,OAAAA,EACAC,SAAAA,EACAoC,SAAAA,EACAnC,qBAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAS,YAAajB,KAAK2C,MAAM1B,aAG1B,OACE,kBAASR,EAAT,eACoB,IAAV+B,GACNA,EAAMrG,KAAI,CAACyG,EAAWC,KACpB,QAAC,WAAD,UACG7C,KAAKsC,WAAW,CAACC,eAAAA,KAAmBK,KADlBC,UAIP,IAAVL,QACY,IAAXhE,GACPwB,KAAKsC,WAAW,CAAC9D,OAAAA,EAAQ+D,eAAAA,EAAgBxC,MAAAA,QA9H7CmB,EAAAA,YAAAA,WAoIN,SAAe4B,EAAAA,EAAAA,YAAW5B,I,oVC7J1B,MAAM6B,EAAkB,EAAE3C,OAAAA,EAAS,CAAC,oBAAqBM,MACvD,QAAC,IAAD,CAAQN,OAAQA,EAAhB,SACG,EAAE4C,UAAAA,MACAA,IACC,QAAC,IAAD,CAAOtE,KAAK,UAAUuE,MAAM,QAAC,KAAD,CAAaC,KAAK,UAAaxC,EAA3D,UACGzE,EAAAA,EAAAA,GACC,uGANN8G,EAAAA,YAAAA,kBAcN,W,g5BCOA,MAAMI,UAAiBxD,EAAAA,EAAwB,iEAsBvBvD,IACpB4D,KAAKyB,UAAS2B,IAAS,YAAK,CAC1B7F,YAAY,UAAC6F,EAAU7F,kBAAX,QAAyB,IAAIpB,KAAIY,GACvCA,EAAEP,KAAOJ,EAAOI,GACXO,EAEF,IACFX,EACH2B,SAAS,aA9B4B,mCAoCtB3B,IACrB4D,KAAKyB,UAAS2B,IAAS,YAAK,CAC1B7F,YAAY,UAAC6F,EAAU7F,kBAAX,QAAyB,IAAIpB,KAAIY,GACvCA,EAAEP,KAAOJ,EAAOI,GACXO,EAEF,IACFX,EACH2B,SAAS,YA3CjBsF,kBACE,MAAO,IACFC,MAAMD,kBACT/F,QAAS,KACTC,WAAY,IAGhBgG,oBAAmB,MAAC1F,EAAD,UAAQF,IACzB,0BAAoBE,EAApB,YAA6BF,EAA7B,KAGF6F,eACE,MAAM,OAACC,GAAUzD,KAAKU,OAChB,MAAC7C,EAAD,UAAQF,GAAa8F,EAE3B,MAAO,CACL,CAAC,UAFqBzD,KAAKuD,mBAAmBE,IAG9C,CAAC,aAAD,oBAA4B5F,EAA5B,YAAqCF,EAArC,eAgCJkC,WACE,MAAM,UAAClC,GAAaqC,KAAKU,MAAM+C,OAC/B,OAAOC,EAAAA,EAAAA,IAAczH,EAAAA,EAAAA,GAAE,mBAAoB0B,GAAW,GAGxDgG,aACE,MAAM,YAACC,EAAD,aAAcvG,EAAd,OAA4BoG,GAAUzD,KAAKU,OAC3C,MAAC7C,GAAS4F,GACV,QAACnG,EAAD,WAAUC,GAAcyC,KAAK2C,MAEnC,IAAKrF,EACH,OAAO,KAGT,MAAMuG,EAAkB7D,KAAKuD,mBAAmBE,GAEhD,OACE,QAAC,EAAAK,SAAD,YACE,QAAC,IAAD,CACE/D,OAAO9D,EAAAA,EAAAA,GAAE,mBACT8H,QACE,QAAC,KAAD,CACEC,GAAI,CACFC,SAAU,kBAAF,OAAoBpG,EAApB,kBACRqG,MAAO,CAAC5G,QAASA,EAAQd,KAE3B0G,KAAK,QALP,UAOGjH,EAAAA,EAAAA,GAAE,yBAIT,QAAC,IAAD,KACA,QAAC,IAAD,CAAW+H,GAAG,mCAAmCf,MAAM,QAAC,IAAD,IAAvD,UACGhH,EAAAA,EAAAA,GACC,+FAIJ,QAAC,IAAD,CACEkI,YAAU,EACVC,WAAS,EACTC,YAAa,CACX5F,gBAAiBnB,EAAQmB,gBACzBK,gBAAiBxB,EAAQwB,gBACzBM,gBAAiB9B,EAAQ8B,iBAE3BkF,UAAU,MACVC,YAAaV,EATf,WAWE,QAAC,IAAD,CACExD,UAAWuD,EACX7D,OAAO9D,EAAAA,EAAAA,GAAE,kBACTuC,OAAQ,CAACA,EAAAA,OAAAA,oBAGX,QAAC,IAAD,CACEuB,OAAO9D,EAAAA,EAAAA,GAAE,WACToE,UAAWuD,EACXpF,OAAQ,CAACA,EAAAA,OAAAA,gBAAwBA,EAAAA,OAAAA,iBACjCgC,aAAc,KACZ,QAAC,KAAD,CAAY9B,KAAK,OAAjB,UACGzC,EAAAA,EAAAA,GACC,wNAOT2H,IACC,QAAC,IAAD,CACEvG,aAAcA,EACdC,QAASA,EACTC,YAAaA,MAAAA,EAAAA,EAAc,IAAIO,QAC7Bf,GAAgB,iBAAXA,EAAE2B,MAA2B3B,EAAEyH,mBAEtCzI,eAAgBiE,KAAKyE,mBACrBjH,gBAAiBwC,KAAKvC,0BAQlC","sources":["webpack:///./app/components/inactivePlugins.tsx","webpack:///./app/components/pluginList.tsx","webpack:///./app/data/forms/projectAlerts.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectAlerts/settings.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport TextOverflow from 'app/components/textOverflow';\nimport {t} from 'app/locale';\nimport PluginIcon from 'app/plugins/components/pluginIcon';\nimport space from 'app/styles/space';\nimport {Plugin} from 'app/types';\n\ntype Props = {\n  plugins: Plugin[];\n  onEnablePlugin: (plugin: Plugin) => void;\n};\n\nconst InactivePlugins = ({plugins, onEnablePlugin}: Props) => {\n  if (plugins.length === 0) {\n    return null;\n  }\n\n  return (\n    <Panel>\n      <PanelHeader>{t('Inactive Integrations')}</PanelHeader>\n\n      <PanelBody>\n        <Plugins>\n          {plugins.map(plugin => (\n            <IntegrationButton\n              key={plugin.id}\n              onClick={() => onEnablePlugin(plugin)}\n              className={`ref-plugin-enable-${plugin.id}`}\n            >\n              <Label>\n                <StyledPluginIcon pluginId={plugin.id} />\n                <TextOverflow>{plugin.shortName || plugin.name}</TextOverflow>\n              </Label>\n            </IntegrationButton>\n          ))}\n        </Plugins>\n      </PanelBody>\n    </Panel>\n  );\n};\n\nconst Plugins = styled('div')`\n  display: flex;\n  padding: ${space(1)};\n  flex: 1;\n  flex-wrap: wrap;\n`;\n\nconst IntegrationButton = styled('button')`\n  margin: ${space(1)};\n  width: 175px;\n  text-align: center;\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: #889ab0;\n  letter-spacing: 0.1px;\n  font-weight: 600;\n  text-transform: uppercase;\n  border: 1px solid #eee;\n  background: inherit;\n  border-radius: ${p => p.theme.borderRadius};\n  padding: 10px;\n\n  &:hover {\n    border-color: #ccc;\n  }\n`;\n\nconst Label = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: ${space(1)};\n`;\n\nexport default InactivePlugins;\n","import {disablePlugin, enablePlugin} from 'app/actionCreators/plugins';\nimport InactivePlugins from 'app/components/inactivePlugins';\nimport PluginConfig from 'app/components/pluginConfig';\nimport {t} from 'app/locale';\nimport {Organization, Plugin, Project} from 'app/types';\n\nimport {Panel, PanelItem} from './panels';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  pluginList: Plugin[];\n  onDisablePlugin?: (plugin: Plugin) => void;\n  onEnablePlugin?: (plugin: Plugin) => void;\n};\n\nconst PluginList = ({\n  organization,\n  project,\n  pluginList,\n  onDisablePlugin = () => {},\n  onEnablePlugin = () => {},\n}: Props) => {\n  const handleEnablePlugin = (plugin: Plugin) => {\n    enablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onEnablePlugin(plugin);\n  };\n\n  const handleDisablePlugin = (plugin: Plugin) => {\n    disablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onDisablePlugin(plugin);\n  };\n\n  if (!pluginList.length) {\n    return (\n      <Panel>\n        <PanelItem>\n          {t(\"Oops! Looks like there aren't any available integrations installed.\")}\n        </PanelItem>\n      </Panel>\n    );\n  }\n\n  return (\n    <div>\n      {pluginList\n        .filter(p => p.enabled)\n        .map(data => (\n          <PluginConfig\n            data={data}\n            organization={organization}\n            project={project}\n            key={data.id}\n            onDisablePlugin={handleDisablePlugin}\n          />\n        ))}\n\n      <InactivePlugins\n        plugins={pluginList.filter(p => !p.enabled && !p.isHidden)}\n        onEnablePlugin={handleEnablePlugin}\n      />\n    </div>\n  );\n};\n\nexport default PluginList;\n","import {t, tn} from 'app/locale';\nimport {Field} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/alerts/';\n\nconst formatMinutes = (value: number | '') => {\n  value = Number(value) / 60;\n  return tn('%s minute', '%s minutes', value);\n};\n\nexport const fields: {[key: string]: Field} = {\n  subjectTemplate: {\n    name: 'subjectTemplate',\n    type: 'string',\n\n    // additional data/props that is related to rendering of form field rather than data\n    label: t('Subject Template'),\n    placeholder: 'e.g. $shortID - $title',\n    help: t(\n      'The email subject to use (excluding the prefix) for individual alerts. Usable variables include: $title, $shortID, $projectID, $orgID, and ${tag:key}, such as ${tag:environment} or ${tag:release}.'\n    ),\n  },\n  digestsMinDelay: {\n    name: 'digestsMinDelay',\n    type: 'range',\n    min: 60,\n    max: 3600,\n    step: 60,\n    defaultValue: 300,\n    label: t('Minimum delivery interval'),\n    help: t('Notifications will be delivered at most this often.'),\n    formatLabel: formatMinutes,\n  },\n  digestsMaxDelay: {\n    name: 'digestsMaxDelay',\n    type: 'range',\n    min: 60,\n    max: 3600,\n    step: 60,\n    defaultValue: 300,\n    label: t('Maximum delivery interval'),\n    help: t('Notifications will be delivered at least this often.'),\n    formatLabel: formatMinutes,\n  },\n};\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n","import * as React from 'react';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"xs\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport AlertLink from 'app/components/alertLink';\nimport Button from 'app/components/button';\nimport {PanelAlert} from 'app/components/panels';\nimport PluginList from 'app/components/pluginList';\nimport {fields} from 'app/data/forms/projectAlerts';\nimport {IconMail} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Organization, Plugin, Project} from 'app/types';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'app/views/settings/project/permissionAlert';\n\ntype RouteParams = {orgId: string; projectId: string};\ntype Props = RouteComponentProps<RouteParams, {}> &\n  AsyncView['props'] & {\n    canEditRule: boolean;\n    organization: Organization;\n    project: Project;\n  };\n\ntype State = AsyncView['state'] & {\n  project: Project | null;\n  pluginList: Array<Plugin> | null;\n};\n\nclass Settings extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      project: null,\n      pluginList: [],\n    };\n  }\n  getProjectEndpoint({orgId, projectId}: RouteParams) {\n    return `/projects/${orgId}/${projectId}/`;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params} = this.props;\n    const {orgId, projectId} = params;\n    const projectEndpoint = this.getProjectEndpoint(params);\n    return [\n      ['project', projectEndpoint],\n      ['pluginList', `/projects/${orgId}/${projectId}/plugins/`],\n    ];\n  }\n\n  handleEnablePlugin = (plugin: Plugin) => {\n    this.setState(prevState => ({\n      pluginList: (prevState.pluginList ?? []).map(p => {\n        if (p.id !== plugin.id) {\n          return p;\n        }\n        return {\n          ...plugin,\n          enabled: true,\n        };\n      }),\n    }));\n  };\n\n  handleDisablePlugin = (plugin: Plugin) => {\n    this.setState(prevState => ({\n      pluginList: (prevState.pluginList ?? []).map(p => {\n        if (p.id !== plugin.id) {\n          return p;\n        }\n        return {\n          ...plugin,\n          enabled: false,\n        };\n      }),\n    }));\n  };\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Alerts Settings'), projectId, false);\n  }\n\n  renderBody() {\n    const {canEditRule, organization, params} = this.props;\n    const {orgId} = params;\n    const {project, pluginList} = this.state;\n\n    if (!project) {\n      return null;\n    }\n\n    const projectEndpoint = this.getProjectEndpoint(params);\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={t('Alerts Settings')}\n          action={\n            <Button\n              to={{\n                pathname: `/organizations/${orgId}/alerts/rules/`,\n                query: {project: project.id},\n              }}\n              size=\"small\"\n            >\n              {t('View Alert Rules')}\n            </Button>\n          }\n        />\n        <PermissionAlert />\n        <AlertLink to=\"/settings/account/notifications/\" icon={<IconMail />}>\n          {t(\n            'Looking to fine-tune your personal notification preferences? Visit your Account Settings'\n          )}\n        </AlertLink>\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={{\n            subjectTemplate: project.subjectTemplate,\n            digestsMinDelay: project.digestsMinDelay,\n            digestsMaxDelay: project.digestsMaxDelay,\n          }}\n          apiMethod=\"PUT\"\n          apiEndpoint={projectEndpoint}\n        >\n          <JsonForm\n            disabled={!canEditRule}\n            title={t('Email Settings')}\n            fields={[fields.subjectTemplate]}\n          />\n\n          <JsonForm\n            title={t('Digests')}\n            disabled={!canEditRule}\n            fields={[fields.digestsMinDelay, fields.digestsMaxDelay]}\n            renderHeader={() => (\n              <PanelAlert type=\"info\">\n                {t(\n                  'Sentry will automatically digest alerts sent by some services to avoid flooding your inbox with individual issue notifications. To control how frequently notifications are delivered, use the sliders below.'\n                )}\n              </PanelAlert>\n            )}\n          />\n        </Form>\n\n        {canEditRule && (\n          <PluginList\n            organization={organization}\n            project={project}\n            pluginList={(pluginList ?? []).filter(\n              p => p.type === 'notification' && p.hasConfiguration\n            )}\n            onEnablePlugin={this.handleEnablePlugin}\n            onDisablePlugin={this.handleDisablePlugin}\n          />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default Settings;\n"],"names":["InactivePlugins","plugins","onEnablePlugin","length","t","Plugins","map","plugin","IntegrationButton","onClick","className","id","Label","StyledPluginIcon","pluginId","shortName","name","space","p","theme","fontSizeSmall","borderRadius","PluginIcon","PluginList","organization","project","pluginList","onDisablePlugin","handleDisablePlugin","disablePlugin","projectId","slug","orgId","filter","enabled","data","isHidden","enablePlugin","route","formatMinutes","value","Number","tn","fields","subjectTemplate","type","label","placeholder","help","digestsMinDelay","min","max","step","defaultValue","formatLabel","digestsMaxDelay","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","FormPanel","React","access","disabled","additionalFieldProps","renderFooter","renderHeader","otherProps","props","sanitizeQuerySelector","undefined","field","_","fieldWithoutDefaultValue","disabledReason","highlighted","JsonForm","location","hash","componentDidMount","scrollToHash","UNSAFE_componentWillReceiveProps","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","shouldDisplayForm","fieldsWithVisibleProp","defined","visible","every","renderForm","formPanelProps","forms","features","_location","state","formGroup","i","withRouter","PermissionAlert","hasAccess","icon","size","Settings","prevState","getDefaultState","super","getProjectEndpoint","getEndpoints","params","routeTitleGen","renderBody","canEditRule","projectEndpoint","Fragment","action","to","pathname","query","saveOnBlur","allowUndo","initialData","apiMethod","apiEndpoint","hasConfiguration","handleEnablePlugin"],"sourceRoot":""}