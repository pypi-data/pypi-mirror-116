{"version":3,"file":"chunks/app_components_forms_selectField_tsx-app_stores_memberListStore_tsx-app_stores_teamStore_tsx--401ca7.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actions/projectActions.tsx","webpack:///./app/actions/teamActions.tsx","webpack:///./app/components/forms/form.tsx","webpack:///./app/components/forms/formContext.tsx","webpack:///./app/components/forms/formField.tsx","webpack:///./app/components/forms/selectField.tsx","webpack:///./app/stores/memberListStore.tsx","webpack:///./app/stores/projectsStore.tsx","webpack:///./app/stores/teamStore.tsx","webpack:///./app/utils/withApi.tsx","webpack:///./app/utils/withProjects.tsx"],"sourcesContent":["import Reflux from 'reflux';\n\nexport default Reflux.createActions([\n  'addTeam',\n  'addTeamError',\n  'addTeamSuccess',\n  'changeSlug',\n  'createSuccess',\n  'loadProjects',\n  'loadStats',\n  'loadStatsError',\n  'loadStatsForProjectSuccess',\n  'loadStatsSuccess',\n  'removeProject',\n  'removeProjectError',\n  'removeProjectSuccess',\n  'removeTeam',\n  'removeTeamError',\n  'removeTeamSuccess',\n  'reset',\n  'setActive',\n  'update',\n  'updateError',\n  'updateSuccess',\n]);\n","import Reflux from 'reflux';\n\nconst TeamActions = Reflux.createActions([\n  'createTeam',\n  'createTeamError',\n  'createTeamSuccess',\n  'fetchAll',\n  'fetchAllError',\n  'fetchAllSuccess',\n  'fetchDetails',\n  'fetchDetailsError',\n  'fetchDetailsSuccess',\n  'loadTeams',\n  'removeTeam',\n  'removeTeamError',\n  'removeTeamSuccess',\n  'update',\n  'updateError',\n  'updateSuccess',\n]);\n\nexport default TeamActions;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport FormContext, {FormContextData} from 'app/components/forms/formContext';\nimport FormState from 'app/components/forms/state';\nimport {t} from 'app/locale';\n\ntype FormProps = {\n  cancelLabel?: string;\n  onCancel?: () => void;\n  onSubmit?: (\n    data: object,\n    onSubmitSuccess: (data: object) => void,\n    onSubmitError: (error: object) => void\n  ) => void;\n  initialData?: object;\n  onSubmitSuccess?: (data: object) => void;\n  onSubmitError?: (error: object) => void;\n  resetOnError?: boolean;\n  requireChanges?: boolean;\n  errorMessage?: React.ReactNode;\n  hideErrors?: boolean;\n  className?: string;\n  footerClass?: string;\n  submitDisabled?: boolean;\n  submitLabel?: string;\n  extraButton?: React.ReactNode;\n};\n\ntype FormClassState = {\n  data: any;\n  errors: {non_field_errors?: object[]} & object;\n  initialData: object;\n  state: FormState;\n};\n\n// Re-export for compatibility alias.\nexport type Context = FormContextData;\n\nclass Form<\n  Props extends FormProps = FormProps,\n  State extends FormClassState = FormClassState\n> extends React.Component<Props, State> {\n  static defaultProps = {\n    cancelLabel: t('Cancel'),\n    submitLabel: t('Save Changes'),\n    submitDisabled: false,\n    footerClass: 'form-actions align-right',\n    className: 'form-stacked',\n    requireChanges: false,\n    hideErrors: false,\n    resetOnError: false,\n    errorMessage: t(\n      'Unable to save your changes. Please ensure all fields are valid and try again.'\n    ),\n  };\n\n  constructor(props: Props, context: Context) {\n    super(props, context);\n    this.state = {\n      data: {...this.props.initialData},\n      errors: {},\n      initialData: {...this.props.initialData},\n      state: FormState.READY,\n    } as State;\n  }\n\n  getContext() {\n    const {data, errors} = this.state;\n    return {\n      form: {\n        data,\n        errors,\n        onFieldChange: this.onFieldChange,\n      },\n    };\n  }\n\n  onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!this.props.onSubmit) {\n      throw new Error('onSubmit is a required prop');\n    }\n    this.props.onSubmit(this.state.data, this.onSubmitSuccess, this.onSubmitError);\n  };\n\n  onSubmitSuccess = (data: object) => {\n    this.setState({\n      state: FormState.READY,\n      errors: {},\n      initialData: {...this.state.data, ...(data || {})},\n    });\n    this.props.onSubmitSuccess && this.props.onSubmitSuccess(data);\n  };\n\n  onSubmitError = error => {\n    this.setState({\n      state: FormState.ERROR,\n      errors: error.responseJSON,\n    });\n\n    if (this.props.resetOnError) {\n      this.setState({\n        initialData: {},\n      });\n    }\n\n    this.props.onSubmitError && this.props.onSubmitError(error);\n  };\n\n  onFieldChange = (name: string, value: string | number) => {\n    this.setState(state => ({\n      data: {\n        ...state.data,\n        [name]: value,\n      },\n    }));\n  };\n\n  render() {\n    const isSaving = this.state.state === FormState.SAVING;\n    const {initialData, data} = this.state;\n    const {errorMessage, hideErrors, requireChanges} = this.props;\n    const hasChanges = requireChanges\n      ? Object.keys(data).length && !isEqual(data, initialData)\n      : true;\n    const isError = this.state.state === FormState.ERROR;\n    const nonFieldErrors = this.state.errors && this.state.errors.non_field_errors;\n\n    return (\n      <FormContext.Provider value={this.getContext()}>\n        <StyledForm onSubmit={this.onSubmit} className={this.props.className}>\n          {isError && !hideErrors && (\n            <div className=\"alert alert-error alert-block\">\n              {nonFieldErrors ? (\n                <div>\n                  <p>\n                    {t(\n                      'Unable to save your changes. Please correct the following errors try again.'\n                    )}\n                  </p>\n                  <ul>\n                    {nonFieldErrors.map((e, i) => (\n                      <li key={i}>{e}</li>\n                    ))}\n                  </ul>\n                </div>\n              ) : (\n                errorMessage\n              )}\n            </div>\n          )}\n          {this.props.children}\n          <div className={this.props.footerClass} style={{marginTop: 25}}>\n            <button\n              className=\"btn btn-primary\"\n              disabled={isSaving || this.props.submitDisabled || !hasChanges}\n              type=\"submit\"\n            >\n              {this.props.submitLabel}\n            </button>\n            {this.props.onCancel && (\n              <button\n                type=\"button\"\n                className=\"btn btn-default\"\n                disabled={isSaving}\n                onClick={this.props.onCancel}\n                style={{marginLeft: 5}}\n              >\n                {this.props.cancelLabel}\n              </button>\n            )}\n            {this.props.extraButton}\n          </div>\n        </StyledForm>\n      </FormContext.Provider>\n    );\n  }\n}\n\n// Note: this is so we can use this as a selector for SelectField\n// We need to keep `Form` as a React Component because ApiForm extends it :/\nexport const StyledForm = styled('form')``;\n\nexport default Form;\n","import {createContext} from 'react';\n\n/**\n * Context type used on 'classic' or 'old' forms.\n *\n * This is a very different type than what is used on the 'settings'\n * forms which have MobX under the hood.\n */\nexport type FormContextData = {\n  form?: {\n    errors: object;\n    data: object;\n    onFieldChange: (name: string, value: string | number) => void;\n  };\n};\n\n/**\n * Default to undefined to preserve backwards compatibility.\n * The FormField component uses a truthy test to see if it is connected\n * to context or if the control is 'uncontrolled'.\n */\nconst FormContext = createContext<FormContextData>({});\n\nexport default FormContext;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\n\nimport FormContext, {FormContextData} from 'app/components/forms/formContext';\nimport QuestionTooltip from 'app/components/questionTooltip';\nimport {Meta} from 'app/types';\nimport {defined} from 'app/utils';\n\ntype Value = string | number | boolean;\n\ntype DefaultProps = {\n  required?: boolean;\n  disabled?: boolean;\n  hideErrorMessage?: boolean;\n};\n\ntype FormFieldProps = DefaultProps & {\n  name: string;\n  style?: object;\n  label?: React.ReactNode;\n  defaultValue?: any;\n  disabledReason?: string;\n  help?: string | React.ReactNode;\n  className?: string;\n  onChange?: (value: Value) => void;\n  error?: string;\n  value?: Value;\n  meta?: Meta;\n};\n\ntype FormFieldState = {\n  error: string | null;\n  value: Value;\n};\n\nexport default class FormField<\n  Props extends FormFieldProps = FormFieldProps,\n  State extends FormFieldState = FormFieldState\n> extends React.PureComponent<Props, State> {\n  static defaultProps: DefaultProps = {\n    hideErrorMessage: false,\n    disabled: false,\n    required: false,\n  };\n\n  constructor(props: Props, context?: any) {\n    super(props, context);\n    this.state = {\n      error: null,\n      value: this.getValue(props, context),\n    } as State;\n  }\n\n  componentDidMount() {}\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props, nextContext: FormContextData) {\n    const newError = this.getError(nextProps, nextContext);\n    if (newError !== this.state.error) {\n      this.setState({error: newError});\n    }\n    if (this.props.value !== nextProps.value || defined(nextContext.form)) {\n      const newValue = this.getValue(nextProps, nextContext);\n      if (newValue !== this.state.value) {\n        this.setValue(newValue);\n      }\n    }\n  }\n\n  componentWillUnmount() {}\n\n  static contextType = FormContext;\n\n  getValue(props: Props, context: FormContextData) {\n    const form = (context || this.context || {}).form;\n    props = props || this.props;\n    if (defined(props.value)) {\n      return props.value;\n    }\n    if (form && form.data.hasOwnProperty(props.name)) {\n      return defined(form.data[props.name]) ? form.data[props.name] : '';\n    }\n    return defined(props.defaultValue) ? props.defaultValue : '';\n  }\n\n  getError(props: Props, context: FormContextData) {\n    const form = (context || this.context || {}).form;\n    props = props || this.props;\n    if (defined(props.error)) {\n      return props.error;\n    }\n    return (form && form.errors[props.name]) || null;\n  }\n\n  getId() {\n    return `id-${this.props.name}`;\n  }\n\n  coerceValue(value: any) {\n    return value;\n  }\n\n  onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    this.setValue(value);\n  };\n\n  setValue = (value: Value) => {\n    const form = (this.context || {}).form;\n    this.setState(\n      {\n        value,\n      },\n      () => {\n        const finalValue = this.coerceValue(this.state.value);\n        this.props.onChange?.(finalValue);\n        form?.onFieldChange(this.props.name, finalValue);\n      }\n    );\n  };\n\n  getField() {\n    throw new Error('Must be implemented by child.');\n  }\n\n  getClassName(): string {\n    throw new Error('Must be implemented by child.');\n  }\n\n  getFinalClassNames() {\n    const {className, required} = this.props;\n    const {error} = this.state;\n    return classNames(className, this.getClassName(), {\n      'has-error': !!error,\n      required,\n    });\n  }\n\n  renderDisabledReason() {\n    const {disabled, disabledReason} = this.props;\n    if (!disabled) {\n      return null;\n    }\n    if (!disabledReason) {\n      return null;\n    }\n    return <QuestionTooltip title={disabledReason} position=\"top\" size=\"sm\" />;\n  }\n\n  render() {\n    const {label, hideErrorMessage, help, style} = this.props;\n    const {error} = this.state;\n    const cx = this.getFinalClassNames();\n    const shouldShowErrorMessage = error && !hideErrorMessage;\n\n    return (\n      <div style={style} className={cx}>\n        <div className=\"controls\">\n          {label && (\n            <label htmlFor={this.getId()} className=\"control-label\">\n              {label}\n            </label>\n          )}\n          {this.getField()}\n          {this.renderDisabledReason()}\n          {defined(help) && <p className=\"help-block\">{help}</p>}\n          {shouldShowErrorMessage && <ErrorMessage>{error}</ErrorMessage>}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst ErrorMessage = styled('p')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  color: ${p => p.theme.red300};\n`;\n","import styled from '@emotion/styled';\n\nimport {defined} from 'app/utils';\n\nimport {StyledForm} from './form';\nimport FormField from './formField';\nimport SelectControl, {ControlProps} from './selectControl';\n\ntype SelectProps = Omit<ControlProps, 'onChange' | 'name'>;\ntype FormProps = FormField['props'];\n\ntype Props = FormProps & SelectProps;\n\nexport default class SelectField extends FormField<Props> {\n  static defaultProps = {\n    ...FormField.defaultProps,\n    clearable: true,\n    multiple: false,\n  };\n\n  UNSAFE_componentWillReceiveProps(nextProps, nextContext) {\n    const newError = this.getError(nextProps, nextContext);\n    if (newError !== this.state.error) {\n      this.setState({error: newError});\n    }\n    if (this.props.value !== nextProps.value || defined(nextContext.form)) {\n      const newValue = this.getValue(nextProps, nextContext);\n      // This is the only thing that is different from parent, we compare newValue against coerced value in state\n      // To remain compatible with react-select, we need to store the option object that\n      // includes `value` and `label`, but when we submit the format, we need to coerce it\n      // to just return `value`. Also when field changes, it propagates the coerced value up\n      const coercedValue = this.coerceValue(this.state.value);\n\n      // newValue can be empty string because of `getValue`, while coerceValue needs to return null (to differentiate\n      // empty string from cleared item). We could use `!=` to compare, but lets be a bit more explicit with strict equality\n      //\n      // This can happen when this is apart of a field, and it re-renders onChange for a different field,\n      // there will be a mismatch between this component's state.value and `this.getValue` result above\n      if (newValue !== coercedValue && !!newValue !== !!coercedValue) {\n        this.setValue(newValue);\n      }\n    }\n  }\n\n  // Overriding this so that we can support `multi` fields through property\n  getValue(props, context) {\n    const form = (context || this.context || {}).form;\n    props = props || this.props;\n\n    // Don't use `isMultiple` here because we're taking props from args as well\n    const defaultValue = this.isMultiple(props) ? [] : '';\n\n    if (defined(props.value)) {\n      return props.value;\n    }\n    if (form && form.data.hasOwnProperty(props.name)) {\n      return defined(form.data[props.name]) ? form.data[props.name] : defaultValue;\n    }\n    return defined(props.defaultValue) ? props.defaultValue : defaultValue;\n  }\n\n  // We need this to get react-select's `Creatable` to work properly\n  // Otherwise, when you hit \"enter\" to create a new item, the \"selected value\" does\n  // not update with new value (and also new value is not displayed in dropdown)\n  //\n  // This is also needed to get `multi` select working since we need the {label, value} object\n  // for react-select (but forms expect just the value to be propagated)\n  coerceValue(value) {\n    if (!value) {\n      return '';\n    }\n\n    if (this.isMultiple()) {\n      return value.map(v => v.value);\n    } else if (value.hasOwnProperty('value')) {\n      return value.value;\n    }\n\n    return value;\n  }\n\n  isMultiple(props?) {\n    props = props || this.props;\n    // this is to maintain compatibility with the 'multi' prop\n    return props.multi || props.multiple;\n  }\n\n  getClassName() {\n    return '';\n  }\n\n  onChange = opt => {\n    // Changing this will most likely break react-select (e.g. you won't be able to select\n    // a menu option that is from an async request, or a multi select).\n    this.setValue(opt);\n  };\n\n  getField() {\n    const {\n      options,\n      clearable,\n      creatable,\n      choices,\n      placeholder,\n      disabled,\n      required,\n      name,\n      isLoading,\n    } = this.props;\n\n    return (\n      <StyledSelectControl\n        creatable={creatable}\n        id={this.getId()}\n        choices={choices}\n        options={options}\n        placeholder={placeholder}\n        disabled={disabled}\n        required={required}\n        value={this.state.value}\n        onChange={this.onChange}\n        clearable={clearable}\n        multiple={this.isMultiple()}\n        name={name}\n        isLoading={isLoading}\n      />\n    );\n  }\n}\n\n// This is to match other fields that are wrapped by a `div.control-group`\nconst StyledSelectControl = styled(SelectControl)`\n  ${StyledForm} &, .form-stacked & {\n    .control-group & {\n      margin-bottom: 0;\n    }\n\n    margin-bottom: 15px;\n  }\n`;\n","import Reflux from 'reflux';\n\nimport {User} from 'app/types';\n\ntype MemberListStoreInterface = {\n  state: User[];\n  loaded: boolean;\n  loadInitialData: (items: User[]) => void;\n  isLoaded: () => boolean;\n  getById: (id: string) => User | undefined;\n  getByEmail: (email: string) => User | undefined;\n  getAll: () => User[];\n};\n\nconst memberListStoreConfig: Reflux.StoreDefinition & MemberListStoreInterface = {\n  // listenables: MemberActions,\n\n  loaded: false,\n  state: [],\n\n  init() {\n    this.state = [];\n    this.loaded = false;\n  },\n\n  // TODO(dcramer): this should actually come from an action of some sorts\n  loadInitialData(items: User[]) {\n    this.state = items;\n    this.loaded = true;\n    this.trigger(this.state, 'initial');\n  },\n\n  isLoaded() {\n    return this.loaded;\n  },\n\n  getById(id) {\n    if (!this.state) {\n      return undefined;\n    }\n\n    id = '' + id;\n    for (let i = 0; i < this.state.length; i++) {\n      if (this.state[i].id === id) {\n        return this.state[i];\n      }\n    }\n    return undefined;\n  },\n\n  getByEmail(email) {\n    if (!this.state) {\n      return undefined;\n    }\n\n    email = email.toLowerCase();\n    for (let i = 0; i < this.state.length; i++) {\n      if (this.state[i].email.toLowerCase() === email) {\n        return this.state[i];\n      }\n    }\n    return undefined;\n  },\n\n  getAll() {\n    return this.state;\n  },\n};\n\ntype MemberListStore = Reflux.Store & MemberListStoreInterface;\n\nconst MemberListStore = Reflux.createStore(memberListStoreConfig) as MemberListStore;\n\nexport default MemberListStore;\n","import Reflux from 'reflux';\n\nimport ProjectActions from 'app/actions/projectActions';\nimport TeamActions from 'app/actions/teamActions';\nimport {Project, Team} from 'app/types';\n\ntype State = {\n  projects: Project[];\n  loading: boolean;\n};\n\ntype StatsData = Record<string, Project['stats']>;\n\n/**\n * Attributes that need typing but aren't part of the external interface,\n */\ntype Internals = {\n  itemsById: Record<string, Project>;\n  loading: boolean;\n};\n\ntype ProjectsStoreInterface = {\n  init: () => void;\n  reset: () => void;\n  loadInitialData: (projects: Project[]) => void;\n  onStatsLoadSuccess: (data: StatsData) => void;\n  onChangeSlug: (prevSlug: string, newSlug: string) => void;\n  onCreateSuccess: (project: Project) => void;\n  onUpdateSuccess: (data: Partial<Project>) => void;\n  onDeleteTeam: (slug: string) => void;\n  onRemoveTeam: (teamSlug: string, projectSlug: string) => void;\n  onAddTeam: (team: Team, projectSlug: string) => void;\n  removeTeamFromProject: (teamSlug: string, project: Project) => void;\n  getWithTeam: (teamSlug: string) => Project[];\n  getAll: () => Project[];\n  getBySlugs: (slug: string[]) => Project[];\n  getState: (slugs?: string[]) => State;\n  getById: (id?: string) => Project | undefined;\n  getBySlug: (slug?: string) => Project | undefined;\n};\n\nconst storeConfig: Reflux.StoreDefinition & Internals & ProjectsStoreInterface = {\n  itemsById: {},\n  loading: true,\n\n  init() {\n    this.reset();\n\n    this.listenTo(ProjectActions.addTeamSuccess, this.onAddTeam);\n    this.listenTo(ProjectActions.changeSlug, this.onChangeSlug);\n    this.listenTo(ProjectActions.createSuccess, this.onCreateSuccess);\n    this.listenTo(ProjectActions.loadProjects, this.loadInitialData);\n    this.listenTo(ProjectActions.loadStatsSuccess, this.onStatsLoadSuccess);\n    this.listenTo(ProjectActions.removeTeamSuccess, this.onRemoveTeam);\n    this.listenTo(ProjectActions.reset, this.reset);\n    this.listenTo(ProjectActions.updateSuccess, this.onUpdateSuccess);\n\n    this.listenTo(TeamActions.removeTeamSuccess, this.onDeleteTeam);\n  },\n\n  reset() {\n    this.itemsById = {};\n    this.loading = true;\n  },\n\n  loadInitialData(items: Project[]) {\n    this.itemsById = items.reduce((map, project) => {\n      map[project.id] = project;\n      return map;\n    }, {});\n    this.loading = false;\n    this.trigger(new Set(Object.keys(this.itemsById)));\n  },\n\n  onChangeSlug(prevSlug: string, newSlug: string) {\n    const prevProject = this.getBySlug(prevSlug);\n\n    // This shouldn't happen\n    if (!prevProject) {\n      return;\n    }\n\n    const newProject = {\n      ...prevProject,\n      slug: newSlug,\n    };\n\n    this.itemsById = {\n      ...this.itemsById,\n      [newProject.id]: newProject,\n    };\n\n    // Ideally we'd always trigger this.itemsById, but following existing patterns\n    // so we don't break things\n    this.trigger(new Set([prevProject.id]));\n  },\n\n  onCreateSuccess(project: Project) {\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: project,\n    };\n    this.trigger(new Set([project.id]));\n  },\n\n  onUpdateSuccess(data: Partial<Project>) {\n    const project = this.getById(data.id);\n    if (!project) {\n      return;\n    }\n    const newProject = Object.assign({}, project, data);\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: newProject,\n    };\n    this.trigger(new Set([data.id]));\n  },\n\n  onStatsLoadSuccess(data) {\n    const touchedIds: string[] = [];\n    Object.entries(data || {}).forEach(([projectId, stats]) => {\n      if (projectId in this.itemsById) {\n        this.itemsById[projectId].stats = stats;\n        touchedIds.push(projectId);\n      }\n    });\n    this.trigger(new Set(touchedIds));\n  },\n\n  /**\n   * Listener for when a team is completely removed\n   *\n   * @param teamSlug Team Slug\n   */\n  onDeleteTeam(teamSlug: string) {\n    // Look for team in all projects\n    const projectIds = this.getWithTeam(teamSlug).map(projectWithTeam => {\n      this.removeTeamFromProject(teamSlug, projectWithTeam);\n      return projectWithTeam.id;\n    });\n\n    this.trigger(new Set([projectIds]));\n  },\n\n  onRemoveTeam(teamSlug: string, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n    if (!project) {\n      return;\n    }\n\n    this.removeTeamFromProject(teamSlug, project);\n    this.trigger(new Set([project.id]));\n  },\n\n  onAddTeam(team: Team, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n\n    // Don't do anything if we can't find a project\n    if (!project) {\n      return;\n    }\n\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: {\n        ...project,\n        teams: [...project.teams, team],\n      },\n    };\n\n    this.trigger(new Set([project.id]));\n  },\n\n  // Internal method, does not trigger\n  removeTeamFromProject(teamSlug: string, project: Project) {\n    const newTeams = project.teams.filter(({slug}) => slug !== teamSlug);\n\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: {\n        ...project,\n        teams: newTeams,\n      },\n    };\n  },\n\n  /**\n   * Returns a list of projects that has the specified team\n   *\n   * @param {String} teamSlug Slug of team to find in projects\n   */\n  getWithTeam(teamSlug: string) {\n    return this.getAll().filter(({teams}) => teams.find(({slug}) => slug === teamSlug));\n  },\n\n  getAll() {\n    return Object.values(this.itemsById).sort((a: Project, b: Project) => {\n      if (a.slug > b.slug) {\n        return 1;\n      }\n      if (a.slug < b.slug) {\n        return -1;\n      }\n      return 0;\n    });\n  },\n\n  getById(id) {\n    return this.getAll().find(project => project.id === id);\n  },\n\n  getBySlug(slug) {\n    return this.getAll().find(project => project.slug === slug);\n  },\n\n  getBySlugs(slugs: string[]) {\n    return this.getAll().filter(project => slugs.includes(project.slug));\n  },\n\n  getState(slugs?: string[]): State {\n    return {\n      projects: slugs ? this.getBySlugs(slugs) : this.getAll(),\n      loading: this.loading,\n    };\n  },\n};\n\ntype ProjectsStore = Reflux.Store & ProjectsStoreInterface;\n\nconst ProjectsStore = Reflux.createStore(storeConfig) as ProjectsStore;\n\nexport default ProjectsStore;\n","import Reflux from 'reflux';\n\nimport TeamActions from 'app/actions/teamActions';\nimport {Team} from 'app/types';\n\ntype TeamStoreInterface = {\n  initialized: boolean;\n  state: Team[];\n  reset: () => void;\n  loadInitialData: (items: Team[]) => void;\n  onUpdateSuccess: (itemId: string, response: Team) => void;\n  onRemoveSuccess: (slug: string) => void;\n  onCreateSuccess: (team: Team) => void;\n  getById: (id: string) => Team | null;\n  getBySlug: (slug: string) => Team | null;\n  getActive: () => Team[];\n  getAll: () => Team[];\n};\n\nconst teamStoreConfig: Reflux.StoreDefinition & TeamStoreInterface = {\n  initialized: false,\n  state: [],\n\n  init() {\n    this.state = [];\n\n    this.listenTo(TeamActions.createTeamSuccess, this.onCreateSuccess);\n    this.listenTo(TeamActions.fetchDetailsSuccess, this.onUpdateSuccess);\n    this.listenTo(TeamActions.loadTeams, this.loadInitialData);\n    this.listenTo(TeamActions.removeTeamSuccess, this.onRemoveSuccess);\n    this.listenTo(TeamActions.updateSuccess, this.onUpdateSuccess);\n  },\n\n  reset() {\n    this.state = [];\n  },\n\n  loadInitialData(items) {\n    this.initialized = true;\n    this.state = items;\n    this.trigger(new Set(items.map(item => item.id)));\n  },\n\n  onUpdateSuccess(itemId, response) {\n    if (!response) {\n      return;\n    }\n\n    const item = this.getBySlug(itemId);\n\n    if (!item) {\n      this.state.push(response);\n      this.trigger(new Set([itemId]));\n      return;\n    }\n\n    // Slug was changed\n    // Note: This is the proper way to handle slug changes but unfortunately not all of our\n    // components use stores correctly. To be safe reload browser :((\n    if (response.slug !== itemId) {\n      // Remove old team\n      this.state = this.state.filter(({slug}) => slug !== itemId);\n\n      // Add team w/ updated slug\n      this.state.push(response);\n      this.trigger(new Set([response.slug]));\n      return;\n    }\n\n    const nextState = [...this.state];\n    const index = nextState.findIndex(team => team.slug === response.slug);\n    nextState[index] = response;\n    this.state = nextState;\n\n    this.trigger(new Set([itemId]));\n  },\n\n  onRemoveSuccess(slug: string) {\n    this.loadInitialData(this.state.filter(team => team.slug !== slug));\n  },\n\n  onCreateSuccess(team: Team) {\n    this.loadInitialData([...this.state, team]);\n  },\n\n  getById(id: string) {\n    return this.state.find(item => item.id.toString() === id.toString()) || null;\n  },\n\n  getBySlug(slug: string) {\n    return this.state.find(item => item.slug === slug) || null;\n  },\n\n  getActive() {\n    return this.state.filter(item => item.isMember);\n  },\n\n  getAll() {\n    return this.state;\n  },\n};\n\ntype TeamStore = Reflux.Store & TeamStoreInterface;\n\nconst TeamStore = Reflux.createStore(teamStoreConfig) as TeamStore;\n\nexport default TeamStore;\n","import * as React from 'react';\n\nimport {Client} from 'app/api';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\ntype OptionProps = {\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * some where the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  {persistInFlight}: OptionProps = {}\n) =>\n  class extends React.Component<WrappedProps<P>> {\n    static displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props: WrappedProps<P>) {\n      super(props);\n      this.api = new Client();\n    }\n\n    componentWillUnmount() {\n      if (!persistInFlight) {\n        this.api.clear();\n      }\n    }\n\n    private api: Client;\n\n    render() {\n      const {api, ...props} = this.props;\n      return <WrappedComponent {...({api: api ?? this.api, ...props} as P)} />;\n    }\n  };\n\nexport default withApi;\n","import * as React from 'react';\n\nimport ProjectsStore from 'app/stores/projectsStore';\nimport {Project} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedProjectsProps = {\n  projects: Project[];\n  loadingProjects?: boolean;\n};\n\ntype State = {\n  projects: Project[];\n  loading: boolean;\n};\n\n/**\n * Higher order component that uses ProjectsStore and provides a list of projects\n */\nfunction withProjects<P extends InjectedProjectsProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithProjects extends React.Component<\n    Omit<P, keyof InjectedProjectsProps> & Partial<InjectedProjectsProps>,\n    State\n  > {\n    static displayName = `withProjects(${getDisplayName(WrappedComponent)})`;\n\n    state: State = ProjectsStore.getState();\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = ProjectsStore.listen(\n      () => this.setState(ProjectsStore.getState()),\n      undefined\n    );\n\n    render() {\n      return (\n        <WrappedComponent\n          {...(this.props as P)}\n          projects={this.state.projects}\n          loadingProjects={this.state.loading}\n        />\n      );\n    }\n  }\n\n  return WithProjects;\n}\n\nexport default withProjects;\n"],"names":["Reflux","Form","React","constructor","props","context","super","e","preventDefault","this","onSubmit","Error","state","data","onSubmitSuccess","onSubmitError","setState","FormState","errors","initialData","error","responseJSON","resetOnError","name","value","getContext","form","onFieldChange","render","isSaving","errorMessage","hideErrors","requireChanges","hasChanges","Object","keys","length","isEqual","isError","nonFieldErrors","non_field_errors","StyledForm","className","t","map","i","children","footerClass","style","marginTop","disabled","submitDisabled","type","submitLabel","onCancel","onClick","marginLeft","cancelLabel","extraButton","createContext","FormField","target","setValue","finalValue","coerceValue","onChange","getValue","componentDidMount","UNSAFE_componentWillReceiveProps","nextProps","nextContext","newError","getError","defined","newValue","componentWillUnmount","hasOwnProperty","defaultValue","getId","getField","getClassName","getFinalClassNames","required","classNames","renderDisabledReason","disabledReason","title","position","size","label","hideErrorMessage","help","cx","shouldShowErrorMessage","htmlFor","ErrorMessage","FormContext","p","theme","fontSizeMedium","red300","SelectField","opt","coercedValue","isMultiple","v","multi","multiple","options","clearable","creatable","choices","placeholder","isLoading","StyledSelectControl","id","SelectControl","memberListStoreConfig","loaded","init","loadInitialData","items","trigger","isLoaded","getById","getByEmail","email","toLowerCase","getAll","storeConfig","itemsById","loading","reset","listenTo","ProjectActions","onAddTeam","onChangeSlug","onCreateSuccess","onStatsLoadSuccess","onRemoveTeam","onUpdateSuccess","TeamActions","onDeleteTeam","reduce","project","Set","prevSlug","newSlug","prevProject","getBySlug","newProject","slug","assign","touchedIds","entries","forEach","projectId","stats","push","teamSlug","projectIds","getWithTeam","projectWithTeam","removeTeamFromProject","projectSlug","team","teams","newTeams","filter","find","values","sort","a","b","getBySlugs","slugs","includes","getState","projects","teamStoreConfig","initialized","onRemoveSuccess","item","itemId","response","nextState","index","findIndex","toString","getActive","isMember","WrappedComponent","persistInFlight","api","Client","clear","getDisplayName","WithProjects","ProjectsStore","undefined","unsubscribe","loadingProjects"],"sourceRoot":""}