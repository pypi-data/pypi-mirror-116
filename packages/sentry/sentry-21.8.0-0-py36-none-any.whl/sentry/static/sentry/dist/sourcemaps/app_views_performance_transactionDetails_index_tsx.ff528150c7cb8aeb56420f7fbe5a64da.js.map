{"version":3,"file":"chunks/app_views_performance_transactionDetails_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/performance/breadcrumb.tsx","webpack:///./app/components/events/eventMetadata.tsx","webpack:///./app/components/events/rootSpanStatus.tsx","webpack:///./app/views/performance/transactionDetails/content.tsx","webpack:///./app/views/performance/transactionDetails/finishSetupAlert.tsx","webpack:///./app/views/performance/transactionDetails/index.tsx","webpack:///./app/views/performance/transactionSummary/transactionVitals/utils.tsx","webpack:///./app/views/performance/vitalDetail/utils.tsx"],"sourcesContent":["import {Component} from 'react';\nimport {Location, LocationDescriptor} from 'history';\n\nimport Breadcrumbs, {Crumb} from 'app/components/breadcrumbs';\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport {decodeScalar} from 'app/utils/queryString';\n\nimport {vitalsRouteWithQuery} from './transactionSummary/transactionVitals/utils';\nimport {transactionSummaryRouteWithQuery} from './transactionSummary/utils';\nimport {vitalDetailRouteWithQuery} from './vitalDetail/utils';\nimport {getPerformanceLandingUrl} from './utils';\n\ntype Props = {\n  organization: Organization;\n  location: Location;\n  transactionName?: string;\n  vitalName?: string;\n  eventSlug?: string;\n  traceSlug?: string;\n  transactionComparison?: boolean;\n  realUserMonitoring?: boolean;\n};\n\nclass Breadcrumb extends Component<Props> {\n  getCrumbs() {\n    const crumbs: Crumb[] = [];\n    const {\n      organization,\n      location,\n      transactionName,\n      vitalName,\n      eventSlug,\n      traceSlug,\n      transactionComparison,\n      realUserMonitoring,\n    } = this.props;\n\n    const performanceTarget: LocationDescriptor = {\n      pathname: getPerformanceLandingUrl(organization),\n      query: {\n        ...location.query,\n        // clear out the transaction name\n        transaction: undefined,\n      },\n    };\n\n    crumbs.push({\n      to: performanceTarget,\n      label: t('Performance'),\n      preserveGlobalSelection: true,\n    });\n\n    if (vitalName) {\n      const rumTarget = vitalDetailRouteWithQuery({\n        orgSlug: organization.slug,\n        vitalName: 'fcp',\n        projectID: decodeScalar(location.query.project),\n        query: location.query,\n      });\n      crumbs.push({\n        to: rumTarget,\n        label: t('Vital Detail'),\n        preserveGlobalSelection: true,\n      });\n    } else if (transactionName) {\n      if (realUserMonitoring) {\n        const rumTarget = vitalsRouteWithQuery({\n          orgSlug: organization.slug,\n          transaction: transactionName,\n          projectID: decodeScalar(location.query.project),\n          query: location.query,\n        });\n\n        crumbs.push({\n          to: rumTarget,\n          label: t('Web Vitals'),\n          preserveGlobalSelection: true,\n        });\n      } else {\n        const summaryTarget = transactionSummaryRouteWithQuery({\n          orgSlug: organization.slug,\n          transaction: transactionName,\n          projectID: decodeScalar(location.query.project),\n          query: location.query,\n        });\n\n        crumbs.push({\n          to: summaryTarget,\n          label: t('Transaction Summary'),\n          preserveGlobalSelection: true,\n        });\n      }\n    }\n\n    if (transactionName && eventSlug) {\n      crumbs.push({\n        to: '',\n        label: t('Event Details'),\n      });\n    } else if (transactionComparison) {\n      crumbs.push({\n        to: '',\n        label: t('Compare to Baseline'),\n      });\n    } else if (traceSlug) {\n      crumbs.push({\n        to: '',\n        label: t('Trace View'),\n      });\n    }\n\n    return crumbs;\n  }\n\n  render() {\n    return <Breadcrumbs crumbs={this.getCrumbs()} />;\n  }\n}\n\nexport default Breadcrumb;\n","import styled from '@emotion/styled';\n\nimport {SectionHeading} from 'app/components/charts/styles';\nimport DateTime from 'app/components/dateTime';\nimport FileSize from 'app/components/fileSize';\nimport ProjectBadge from 'app/components/idBadge/projectBadge';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {OrganizationSummary} from 'app/types';\nimport {Event} from 'app/types/event';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport Projects from 'app/utils/projects';\n\ntype Props = {\n  event: Event;\n  organization: OrganizationSummary;\n  projectId: string;\n};\n\n/**\n * Render metadata about the event and provide a link to the JSON blob.\n * Used in the sidebar of performance event details and discover2 event details.\n */\nfunction EventMetadata({event, organization, projectId}: Props) {\n  const eventJsonUrl = `/api/0/projects/${organization.slug}/${projectId}/events/${event.eventID}/json/`;\n\n  return (\n    <MetaDataID>\n      <SectionHeading>{t('Event ID')}</SectionHeading>\n      <MetadataContainer data-test-id=\"event-id\">{event.eventID}</MetadataContainer>\n      <MetadataContainer>\n        <DateTime\n          date={getDynamicText({\n            value: event.dateCreated || (event.endTimestamp || 0) * 1000,\n            fixed: 'Dummy timestamp',\n          })}\n        />\n      </MetadataContainer>\n      <Projects orgId={organization.slug} slugs={[projectId]}>\n        {({projects}) => {\n          const project = projects.find(p => p.slug === projectId);\n          return (\n            <StyledProjectBadge\n              project={project ? project : {slug: projectId}}\n              avatarSize={16}\n            />\n          );\n        }}\n      </Projects>\n      <MetadataJSON href={eventJsonUrl} className=\"json-link\">\n        {t('Preview JSON')} (<FileSize bytes={event.size} />)\n      </MetadataJSON>\n    </MetaDataID>\n  );\n}\n\nconst MetaDataID = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nconst MetadataContainer = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst MetadataJSON = styled(ExternalLink)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst StyledProjectBadge = styled(ProjectBadge)`\n  margin-bottom: ${space(2)};\n`;\n\nexport default EventMetadata;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {SectionHeading} from 'app/components/charts/styles';\nimport {TraceContextType} from 'app/components/events/interfaces/spans/types';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Event, EventTransaction} from 'app/types/event';\n\ntype Props = {\n  event: Event;\n};\n\nclass RootSpanStatus extends Component<Props> {\n  getTransactionEvent(): EventTransaction | undefined {\n    const {event} = this.props;\n\n    if (event.type === 'transaction') {\n      return event as EventTransaction;\n    }\n\n    return undefined;\n  }\n\n  getRootSpanStatus(): string {\n    const event = this.getTransactionEvent();\n\n    const DEFAULT = '\\u2014';\n\n    if (!event) {\n      return DEFAULT;\n    }\n\n    const traceContext: TraceContextType | undefined = event?.contexts?.trace;\n\n    return traceContext?.status ?? DEFAULT;\n  }\n\n  getHttpStatusCode(): string {\n    const {event} = this.props;\n\n    const {tags} = event;\n\n    if (!Array.isArray(tags)) {\n      return '';\n    }\n\n    const tag = tags.find(tagObject => tagObject.key === 'http.status_code');\n\n    if (!tag) {\n      return '';\n    }\n\n    return tag.value;\n  }\n\n  render() {\n    const event = this.getTransactionEvent();\n\n    if (!event) {\n      return null;\n    }\n\n    const label = `${this.getHttpStatusCode()} ${this.getRootSpanStatus()}`.trim();\n\n    return (\n      <Container>\n        <Header>\n          <SectionHeading>{t('Status')}</SectionHeading>\n        </Header>\n        <div>{label}</div>\n      </Container>\n    );\n  }\n}\n\nconst Container = styled('div')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(4)};\n`;\n\nconst Header = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nexport default RootSpanStatus;\n","import {Fragment} from 'react';\nimport {Params} from 'react-router/lib/Router';\nimport {Location} from 'history';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport NotFound from 'app/components/errors/notFound';\nimport {BorderlessEventEntries} from 'app/components/events/eventEntries';\nimport EventMetadata from 'app/components/events/eventMetadata';\nimport EventVitals from 'app/components/events/eventVitals';\nimport * as SpanEntryContext from 'app/components/events/interfaces/spans/context';\nimport RootSpanStatus from 'app/components/events/rootSpanStatus';\nimport FileSize from 'app/components/fileSize';\nimport * as Layout from 'app/components/layouts/thirds';\nimport LoadingError from 'app/components/loadingError';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport TagsTable from 'app/components/tagsTable';\nimport {IconOpen} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport {Event, EventTag} from 'app/types/event';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport * as QuickTraceContext from 'app/utils/performance/quickTrace/quickTraceContext';\nimport QuickTraceQuery from 'app/utils/performance/quickTrace/quickTraceQuery';\nimport TraceMetaQuery from 'app/utils/performance/quickTrace/traceMetaQuery';\nimport {getTraceTimeRangeFromEvent} from 'app/utils/performance/quickTrace/utils';\nimport Projects from 'app/utils/projects';\nimport {appendTagCondition, decodeScalar} from 'app/utils/queryString';\nimport Breadcrumb from 'app/views/performance/breadcrumb';\n\nimport {transactionSummaryRouteWithQuery} from '../transactionSummary/utils';\nimport {getTransactionDetailsUrl} from '../utils';\n\nimport EventMetas from './eventMetas';\n\ntype Props = {\n  organization: Organization;\n  location: Location;\n  params: Params;\n  eventSlug: string;\n};\n\ntype State = {\n  event: Event | undefined;\n  isSidebarVisible: boolean;\n} & AsyncComponent['state'];\n\nclass EventDetailsContent extends AsyncComponent<Props, State> {\n  state: State = {\n    // AsyncComponent state\n    loading: true,\n    reloading: false,\n    error: false,\n    errors: {},\n    event: undefined,\n\n    // local state\n    isSidebarVisible: true,\n  };\n\n  toggleSidebar = () => {\n    this.setState({isSidebarVisible: !this.state.isSidebarVisible});\n  };\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, params} = this.props;\n    const {eventSlug} = params;\n\n    const url = `/organizations/${organization.slug}/events/${eventSlug}/`;\n\n    return [['event', url]];\n  }\n\n  get projectId() {\n    return this.props.eventSlug.split(':')[0];\n  }\n\n  generateTagUrl = (tag: EventTag) => {\n    const {location, organization} = this.props;\n    const {event} = this.state;\n    if (!event) {\n      return '';\n    }\n    const query = decodeScalar(location.query.query, '');\n    const newQuery = {\n      ...location.query,\n      query: appendTagCondition(query, tag.key, tag.value),\n    };\n    return transactionSummaryRouteWithQuery({\n      orgSlug: organization.slug,\n      transaction: event.title,\n      projectID: decodeScalar(location.query.project),\n      query: newQuery,\n    });\n  };\n\n  renderBody() {\n    const {event} = this.state;\n\n    if (!event) {\n      return <NotFound />;\n    }\n\n    return this.renderContent(event);\n  }\n\n  renderContent(event: Event) {\n    const {organization, location, eventSlug} = this.props;\n\n    // metrics\n    trackAnalyticsEvent({\n      eventKey: 'performance.event_details',\n      eventName: 'Performance: Opened Event Details',\n      event_type: event.type,\n      organization_id: parseInt(organization.id, 10),\n    });\n\n    const {isSidebarVisible} = this.state;\n    const transactionName = event.title;\n    const query = decodeScalar(location.query.query, '');\n\n    const eventJsonUrl = `/api/0/projects/${organization.slug}/${this.projectId}/events/${event.eventID}/json/`;\n    const traceId = event.contexts?.trace?.trace_id ?? '';\n    const {start, end} = getTraceTimeRangeFromEvent(event);\n\n    return (\n      <TraceMetaQuery\n        location={location}\n        orgSlug={organization.slug}\n        traceId={traceId}\n        start={start}\n        end={end}\n      >\n        {metaResults => (\n          <QuickTraceQuery event={event} location={location} orgSlug={organization.slug}>\n            {results => (\n              <Fragment>\n                <Layout.Header>\n                  <Layout.HeaderContent>\n                    <Breadcrumb\n                      organization={organization}\n                      location={location}\n                      transactionName={transactionName}\n                      eventSlug={eventSlug}\n                    />\n                    <Layout.Title data-test-id=\"event-header\">{event.title}</Layout.Title>\n                  </Layout.HeaderContent>\n                  <Layout.HeaderActions>\n                    <ButtonBar gap={1}>\n                      <Button onClick={this.toggleSidebar}>\n                        {isSidebarVisible ? 'Hide Details' : 'Show Details'}\n                      </Button>\n                      {results && (\n                        <Button icon={<IconOpen />} href={eventJsonUrl} external>\n                          {t('JSON')} (<FileSize bytes={event.size} />)\n                        </Button>\n                      )}\n                    </ButtonBar>\n                  </Layout.HeaderActions>\n                </Layout.Header>\n                <Layout.Body>\n                  {results && (\n                    <Layout.Main fullWidth>\n                      <EventMetas\n                        quickTrace={results}\n                        meta={metaResults?.meta ?? null}\n                        event={event}\n                        organization={organization}\n                        projectId={this.projectId}\n                        location={location}\n                        errorDest=\"issue\"\n                        transactionDest=\"performance\"\n                      />\n                    </Layout.Main>\n                  )}\n                  <Layout.Main fullWidth={!isSidebarVisible}>\n                    <Projects orgId={organization.slug} slugs={[this.projectId]}>\n                      {({projects}) => (\n                        <SpanEntryContext.Provider\n                          value={{\n                            getViewChildTransactionTarget: childTransactionProps => {\n                              return getTransactionDetailsUrl(\n                                organization,\n                                childTransactionProps.eventSlug,\n                                childTransactionProps.transaction,\n                                location.query\n                              );\n                            },\n                          }}\n                        >\n                          <QuickTraceContext.Provider value={results}>\n                            <BorderlessEventEntries\n                              organization={organization}\n                              event={event}\n                              project={projects[0] as Project}\n                              showExampleCommit={false}\n                              showTagSummary={false}\n                              location={location}\n                              api={this.api}\n                              isBorderless\n                            />\n                          </QuickTraceContext.Provider>\n                        </SpanEntryContext.Provider>\n                      )}\n                    </Projects>\n                  </Layout.Main>\n                  {isSidebarVisible && (\n                    <Layout.Side>\n                      {results === undefined && (\n                        <Fragment>\n                          <EventMetadata\n                            event={event}\n                            organization={organization}\n                            projectId={this.projectId}\n                          />\n                          <RootSpanStatus event={event} />\n                        </Fragment>\n                      )}\n                      <EventVitals event={event} />\n                      <TagsTable\n                        event={event}\n                        query={query}\n                        generateUrl={this.generateTagUrl}\n                      />\n                    </Layout.Side>\n                  )}\n                </Layout.Body>\n              </Fragment>\n            )}\n          </QuickTraceQuery>\n        )}\n      </TraceMetaQuery>\n    );\n  }\n\n  renderError(error: Error) {\n    const notFound = Object.values(this.state.errors).find(\n      resp => resp && resp.status === 404\n    );\n    const permissionDenied = Object.values(this.state.errors).find(\n      resp => resp && resp.status === 403\n    );\n\n    if (notFound) {\n      return <NotFound />;\n    }\n    if (permissionDenied) {\n      return (\n        <LoadingError message={t('You do not have permission to view that event.')} />\n      );\n    }\n\n    return super.renderError(error, true, true);\n  }\n\n  renderComponent() {\n    const {organization} = this.props;\n\n    return (\n      <SentryDocumentTitle\n        title={t('Performance - Event Details')}\n        orgSlug={organization.slug}\n      >\n        {super.renderComponent()}\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default EventDetailsContent;\n","import styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport {IconLightning} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {trackAdvancedAnalyticsEvent} from 'app/utils/advancedAnalytics';\n\nexport default function FinishSetupAlert({\n  organization,\n  project,\n}: {\n  organization: Organization;\n  project: Project;\n}) {\n  return (\n    <AlertBar>\n      <IconLightning />\n      <TextWrapper>\n        {t(\n          'You are viewing a sample transaction. Configure performance to start viewing real transactions.'\n        )}\n      </TextWrapper>\n      <Button\n        size=\"xsmall\"\n        priority=\"primary\"\n        target=\"_blank\"\n        external\n        href=\"https://docs.sentry.io/performance-monitoring/getting-started/\"\n        onClick={() =>\n          trackAdvancedAnalyticsEvent('growth.sample_transaction_docs_link_clicked', {\n            project_id: project.id,\n            organization,\n          })\n        }\n      >\n        {t('Get Started')}\n      </Button>\n    </AlertBar>\n  );\n}\n\nconst AlertBar = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: ${p => p.theme.headerBackground};\n  background-color: ${p => p.theme.bannerBackground};\n  padding: 6px 30px;\n  font-size: 14px;\n`;\n\nconst TextWrapper = styled('span')`\n  margin: 0 ${space(1)};\n`;\n","import {Component} from 'react';\nimport {Params} from 'react-router/lib/Router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport {PageContent} from 'app/styles/organization';\nimport {Organization, Project} from 'app/types';\nimport Projects from 'app/utils/projects';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport EventDetailsContent from './content';\nimport FinishSetupAlert from './finishSetupAlert';\n\ntype Props = {\n  organization: Organization;\n  location: Location;\n  params: Params;\n};\n\nclass EventDetails extends Component<Props> {\n  getEventSlug = (): string => {\n    const {eventSlug} = this.props.params;\n    return typeof eventSlug === 'string' ? eventSlug.trim() : '';\n  };\n\n  render() {\n    const {organization, location, params} = this.props;\n    const documentTitle = t('Performance Details');\n    const eventSlug = this.getEventSlug();\n    const projectSlug = eventSlug.split(':')[0];\n\n    return (\n      <SentryDocumentTitle\n        title={documentTitle}\n        orgSlug={organization.slug}\n        projectSlug={projectSlug}\n      >\n        <StyledPageContent>\n          <LightWeightNoProjectMessage organization={organization}>\n            <Projects orgId={organization.slug} slugs={[projectSlug]}>\n              {({projects}) => {\n                if (projects.length === 0) {\n                  return null;\n                }\n                const project = projects[0] as Project;\n                // only render setup alert if the project has no real transactions\n                if (project.firstTransactionEvent) {\n                  return null;\n                }\n                return <FinishSetupAlert organization={organization} project={project} />;\n              }}\n            </Projects>\n            <EventDetailsContent\n              organization={organization}\n              location={location}\n              params={params}\n              eventSlug={eventSlug}\n            />\n          </LightWeightNoProjectMessage>\n        </StyledPageContent>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default withOrganization(EventDetails);\n\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n","import {ECharts} from 'echarts';\nimport {Query} from 'history';\n\nimport {HistogramData} from 'app/utils/performance/histogram/types';\nimport {getBucketWidth} from 'app/utils/performance/histogram/utils';\n\nimport {Point, Rectangle} from './types';\n\nexport function generateVitalsRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/vitals/`;\n}\n\nexport function vitalsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  transaction: string;\n  query: Query;\n  projectID?: string | string[];\n}) {\n  const pathname = generateVitalsRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\n/**\n * Given a value on the x-axis, return the index of the nearest bucket or null\n * if it cannot be found.\n *\n * A bucket contains a range of values, and nearest is defined as the bucket the\n * value will fall in.\n */\nexport function findNearestBucketIndex(\n  chartData: HistogramData,\n  xAxis: number\n): number | null {\n  const width = getBucketWidth(chartData);\n  // it's possible that the data is not available yet or the x axis is out of range\n  if (!chartData.length || xAxis >= chartData[chartData.length - 1].bin + width) {\n    return null;\n  } else if (xAxis < chartData[0].bin) {\n    return -1;\n  }\n\n  return Math.floor((xAxis - chartData[0].bin) / width);\n}\n\n/**\n * To compute pixel coordinates, we need at least 2 unique points on the chart.\n * The two points must have different x axis and y axis values for it to work.\n *\n * If all bars have the same y value, pick the most naive reference rect. This\n * may result in floating point errors, but should be okay for our purposes.\n */\nexport function getRefRect(chartData: HistogramData): Rectangle | null {\n  // not enough points to construct 2 reference points\n  if (chartData.length < 2) {\n    return null;\n  }\n\n  for (let i = 0; i < chartData.length; i++) {\n    const data1 = chartData[i];\n    for (let j = i + 1; j < chartData.length; j++) {\n      const data2 = chartData[j];\n\n      if (data1.bin !== data2.bin && data1.count !== data2.count) {\n        return {\n          point1: {x: i, y: Math.min(data1.count, data2.count)},\n          point2: {x: j, y: Math.max(data1.count, data2.count)},\n        };\n      }\n    }\n  }\n\n  // all data points have the same count, just pick any 2 histogram bins\n  // and use 0 and 1 as the count as we can rely on them being on the graph\n  return {\n    point1: {x: 0, y: 0},\n    point2: {x: 1, y: 1},\n  };\n}\n\n/**\n * Given an ECharts instance and a rectangle defined in terms of the x and y axis,\n * compute the corresponding pixel coordinates. If it cannot be done, return null.\n */\nexport function asPixelRect(chartRef: ECharts, dataRect: Rectangle): Rectangle | null {\n  const point1 = chartRef.convertToPixel({xAxisIndex: 0, yAxisIndex: 0}, [\n    dataRect.point1.x,\n    dataRect.point1.y,\n  ]);\n\n  if (isNaN(point1?.[0]) || isNaN(point1?.[1])) {\n    return null;\n  }\n\n  const point2 = chartRef.convertToPixel({xAxisIndex: 0, yAxisIndex: 0}, [\n    dataRect.point2.x,\n    dataRect.point2.y,\n  ]);\n\n  if (isNaN(point2?.[0]) || isNaN(point2?.[1])) {\n    return null;\n  }\n\n  return {\n    point1: {x: point1[0], y: point1[1]},\n    point2: {x: point2[0], y: point2[1]},\n  };\n}\n\n/**\n * Given a point on a source rectangle, map it to the corresponding point on the\n * destination rectangle. Assumes that the two rectangles are related by a simple\n * transformation containing only translations and scaling.\n */\nexport function mapPoint(\n  point: Point,\n  srcRect: Rectangle,\n  destRect: Rectangle\n): Point | null {\n  if (\n    srcRect.point1.x === srcRect.point2.x ||\n    srcRect.point1.y === srcRect.point2.y ||\n    destRect.point1.x === destRect.point2.x ||\n    destRect.point1.y === destRect.point2.y\n  ) {\n    return null;\n  }\n\n  const xPercentage =\n    (point.x - srcRect.point1.x) / (srcRect.point2.x - srcRect.point1.x);\n  const yPercentage =\n    (point.y - srcRect.point1.y) / (srcRect.point2.y - srcRect.point1.y);\n\n  return {\n    x: destRect.point1.x + (destRect.point2.x - destRect.point1.x) * xPercentage,\n    y: destRect.point1.y + (destRect.point2.y - destRect.point1.y) * yPercentage,\n  };\n}\n","import * as React from 'react';\nimport {Location, Query} from 'history';\n\nimport {IconCheckmark, IconFire, IconWarning} from 'app/icons';\nimport {Series} from 'app/types/echarts';\nimport {getAggregateAlias, WebVital} from 'app/utils/discover/fields';\nimport {decodeScalar} from 'app/utils/queryString';\nimport {Color} from 'app/utils/theme';\n\nexport function generateVitalDetailRoute({orgSlug}: {orgSlug: string}): string {\n  return `/organizations/${orgSlug}/performance/vitaldetail/`;\n}\n\nexport const webVitalPoor = {\n  [WebVital.FP]: 3000,\n  [WebVital.FCP]: 3000,\n  [WebVital.LCP]: 4000,\n  [WebVital.FID]: 300,\n  [WebVital.CLS]: 0.25,\n};\n\nexport const webVitalMeh = {\n  [WebVital.FP]: 1000,\n  [WebVital.FCP]: 1000,\n  [WebVital.LCP]: 2500,\n  [WebVital.FID]: 100,\n  [WebVital.CLS]: 0.1,\n};\n\nexport enum VitalState {\n  POOR = 'Poor',\n  MEH = 'Meh',\n  GOOD = 'Good',\n}\n\nexport const vitalStateColors: Record<VitalState, Color> = {\n  [VitalState.POOR]: 'red300',\n  [VitalState.MEH]: 'yellow300',\n  [VitalState.GOOD]: 'green300',\n};\n\nexport const vitalStateIcons: Record<VitalState, React.ReactNode> = {\n  [VitalState.POOR]: <IconFire color={vitalStateColors[VitalState.POOR]} />,\n  [VitalState.MEH]: <IconWarning color={vitalStateColors[VitalState.MEH]} />,\n  [VitalState.GOOD]: (\n    <IconCheckmark color={vitalStateColors[VitalState.GOOD]} isCircled />\n  ),\n};\n\nexport function vitalDetailRouteWithQuery({\n  orgSlug,\n  vitalName,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  vitalName: string;\n  query: Query;\n  projectID?: string | string[];\n}) {\n  const pathname = generateVitalDetailRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      vitalName,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nexport function vitalNameFromLocation(location: Location): WebVital {\n  const _vitalName = decodeScalar(location.query.vitalName);\n\n  const vitalName = Object.values(WebVital).find(v => v === _vitalName);\n\n  if (vitalName) {\n    return vitalName;\n  } else {\n    return WebVital.LCP;\n  }\n}\n\nexport function getVitalDetailTablePoorStatusFunction(vitalName: WebVital): string {\n  const vitalThreshold = webVitalPoor[vitalName];\n  const statusFunction = `compare_numeric_aggregate(${getAggregateAlias(\n    `p75(${vitalName})`\n  )},greater,${vitalThreshold})`;\n  return statusFunction;\n}\n\nexport function getVitalDetailTableMehStatusFunction(vitalName: WebVital): string {\n  const vitalThreshold = webVitalMeh[vitalName];\n  const statusFunction = `compare_numeric_aggregate(${getAggregateAlias(\n    `p75(${vitalName})`\n  )},greater,${vitalThreshold})`;\n  return statusFunction;\n}\n\nexport const vitalMap: Partial<Record<WebVital, string>> = {\n  [WebVital.FCP]: 'First Contentful Paint',\n  [WebVital.CLS]: 'Cumulative Layout Shift',\n  [WebVital.FID]: 'First Input Delay',\n  [WebVital.LCP]: 'Largest Contentful Paint',\n};\n\nexport const vitalChartTitleMap = vitalMap;\n\nexport const vitalDescription: Partial<Record<WebVital, string>> = {\n  [WebVital.FCP]:\n    'First Contentful Paint (FCP) measures the amount of time the first content takes to render in the viewport. Like FP, this could also show up in any form from the document object model (DOM), such as images, SVGs, or text blocks.',\n  [WebVital.CLS]:\n    'Cumulative Layout Shift (CLS) is the sum of individual layout shift scores for every unexpected element shift during the rendering process. Imagine navigating to an article and trying to click a link before the page finishes loading. Before your cursor even gets there, the link may have shifted down due to an image rendering. Rather than using duration for this Web Vital, the CLS score represents the degree of disruptive and visually unstable shifts.',\n  [WebVital.FID]:\n    'First Input Delay measures the response time when the user tries to interact with the viewport. Actions maybe include clicking a button, link or other custom Javascript controller. It is key in helping the user determine if a page is usable or not.',\n  [WebVital.LCP]:\n    'Largest Contentful Paint (LCP) measures the render time for the largest content to appear in the viewport. This may be in any form from the document object model (DOM), such as images, SVGs, or text blocks. It’s the largest pixel area in the viewport, thus most visually defining. LCP helps developers understand how long it takes to see the main content on the page.',\n};\n\nexport const vitalAbbreviations: Partial<Record<WebVital, string>> = {\n  [WebVital.FCP]: 'FCP',\n  [WebVital.CLS]: 'CLS',\n  [WebVital.FID]: 'FID',\n  [WebVital.LCP]: 'LCP',\n};\n\nexport function getMaxOfSeries(series: Series[]) {\n  let max = -Infinity;\n  for (const {data} of series) {\n    for (const point of data) {\n      max = Math.max(max, point.value);\n    }\n  }\n  return max;\n}\n"],"names":["Breadcrumb","Component","getCrumbs","crumbs","organization","location","transactionName","vitalName","eventSlug","traceSlug","transactionComparison","realUserMonitoring","this","props","performanceTarget","pathname","getPerformanceLandingUrl","query","transaction","undefined","push","to","label","t","preserveGlobalSelection","rumTarget","vitalDetailRouteWithQuery","orgSlug","slug","projectID","decodeScalar","project","vitalsRouteWithQuery","summaryTarget","transactionSummaryRouteWithQuery","render","EventMetadata","event","projectId","eventJsonUrl","eventID","MetaDataID","MetadataContainer","date","getDynamicText","value","dateCreated","endTimestamp","fixed","orgId","slugs","projects","find","p","StyledProjectBadge","avatarSize","MetadataJSON","href","className","bytes","size","space","theme","fontSizeMedium","ExternalLink","ProjectBadge","RootSpanStatus","getTransactionEvent","type","getRootSpanStatus","traceContext","contexts","trace","status","getHttpStatusCode","tags","Array","isArray","tag","tagObject","key","trim","Container","Header","subText","EventDetailsContent","AsyncComponent","loading","reloading","error","errors","isSidebarVisible","setState","state","newQuery","appendTagCondition","title","getEndpoints","params","split","renderBody","renderContent","trackAnalyticsEvent","eventKey","eventName","event_type","organization_id","parseInt","id","traceId","trace_id","start","end","getTraceTimeRangeFromEvent","metaResults","results","Fragment","gap","onClick","toggleSidebar","icon","external","fullWidth","quickTrace","meta","errorDest","transactionDest","getViewChildTransactionTarget","childTransactionProps","getTransactionDetailsUrl","showExampleCommit","showTagSummary","api","isBorderless","generateUrl","generateTagUrl","renderError","notFound","Object","values","resp","permissionDenied","message","super","renderComponent","FinishSetupAlert","AlertBar","TextWrapper","priority","target","trackAdvancedAnalyticsEvent","project_id","headerBackground","bannerBackground","EventDetails","documentTitle","getEventSlug","projectSlug","StyledPageContent","length","firstTransactionEvent","withOrganization","PageContent","generateVitalsRoute","environment","statsPeriod","findNearestBucketIndex","chartData","xAxis","width","getBucketWidth","bin","Math","floor","getRefRect","i","data1","j","data2","count","point1","x","y","min","point2","max","asPixelRect","chartRef","dataRect","convertToPixel","xAxisIndex","yAxisIndex","isNaN","mapPoint","point","srcRect","destRect","xPercentage","yPercentage","webVitalPoor","WebVital","webVitalMeh","VitalState","vitalStateColors","POOR","MEH","GOOD","vitalStateIcons","color","isCircled","generateVitalDetailRoute","vitalNameFromLocation","_vitalName","v","getVitalDetailTablePoorStatusFunction","vitalThreshold","getAggregateAlias","getVitalDetailTableMehStatusFunction","vitalMap","vitalDescription","vitalAbbreviations","getMaxOfSeries","series","data"],"sourceRoot":""}