{"version":3,"file":"chunks/app_components_scoreCard_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"moBAoBA,SAASA,GAAU,MAACC,EAAD,MAAQC,EAAR,KAAeC,EAAf,MAAqBC,EAArB,YAA4BC,EAA5B,UAAyCC,IAC1D,OACE,QAACC,EAAD,CAAaD,UAAWA,EAAxB,WACE,QAACE,EAAD,YACE,QAACC,EAAD,UAAQR,IACPE,IAAQ,QAAC,IAAD,CAAiBF,MAAOE,EAAMO,KAAK,KAAKC,SAAS,YAG5D,QAACC,EAAD,YACE,QAACC,EAAD,UAAQX,MAAAA,EAAAA,EAAS,OAChBY,EAAAA,EAAAA,IAAQV,KACP,QAACW,EAAD,CAAOV,YAAaA,EAApB,UACE,QAAC,IAAD,UAAeD,YAQ3B,SAASY,EAAcC,GACrB,OAAQA,EAAEZ,aACR,IAAK,OACH,OAAOY,EAAEC,MAAMC,SACjB,IAAK,MACH,OAAOF,EAAEC,MAAME,OACjB,QACE,OAAOH,EAAEC,MAAMG,SA3BZrB,EAAAA,YAAAA,YA+BT,MAAMO,GAAc,OAAOe,EAAAA,GAAP,sBAAH,6EAIJC,EAAAA,EAAAA,GAAM,GAJF,KAIQA,EAAAA,EAAAA,GAAM,GAJd,qBAQXf,GAAc,OAAO,MAAP,sBAAH,uDAGHe,EAAAA,EAAAA,GAAM,GAHH,0CAQXd,GAAQ,OAAO,MAAP,sBACVe,EAAAA,EADO,KAILZ,GAAe,OAAO,MAAP,sBAAH,8FAOZC,GAAQ,OAAO,OAAP,sBAAH,yFASLE,GAAQ,OAAO,MAAP,sBAAH,SACAC,EADA,iBAEMO,EAAAA,EAAAA,GAAM,GAFZ,mCAQX","sources":["webpack:///./app/components/scoreCard.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel} from 'app/components/panels';\nimport QuestionTooltip from 'app/components/questionTooltip';\nimport TextOverflow from 'app/components/textOverflow';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {defined} from 'app/utils';\nimport {Theme} from 'app/utils/theme';\n\ntype Props = {\n  title: React.ReactNode;\n  score?: React.ReactNode;\n  help?: React.ReactNode;\n  trend?: React.ReactNode;\n  trendStatus?: 'good' | 'bad';\n  className?: string;\n};\n\nfunction ScoreCard({title, score, help, trend, trendStatus, className}: Props) {\n  return (\n    <StyledPanel className={className}>\n      <HeaderTitle>\n        <Title>{title}</Title>\n        {help && <QuestionTooltip title={help} size=\"sm\" position=\"top\" />}\n      </HeaderTitle>\n\n      <ScoreWrapper>\n        <Score>{score ?? '\\u2014'}</Score>\n        {defined(trend) && (\n          <Trend trendStatus={trendStatus}>\n            <TextOverflow>{trend}</TextOverflow>\n          </Trend>\n        )}\n      </ScoreWrapper>\n    </StyledPanel>\n  );\n}\n\nfunction getTrendColor(p: TrendProps & {theme: Theme}) {\n  switch (p.trendStatus) {\n    case 'good':\n      return p.theme.green300;\n    case 'bad':\n      return p.theme.red300;\n    default:\n      return p.theme.gray300;\n  }\n}\n\nconst StyledPanel = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: ${space(2)} ${space(3)};\n  min-height: 96px;\n`;\n\nconst HeaderTitle = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n  align-items: center;\n  width: fit-content;\n`;\n\nconst Title = styled('div')`\n  ${overflowEllipsis};\n`;\n\nconst ScoreWrapper = styled('div')`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-end;\n  max-width: 100%;\n`;\n\nconst Score = styled('span')`\n  flex-shrink: 1;\n  font-size: 32px;\n  line-height: 1;\n  white-space: nowrap;\n`;\n\ntype TrendProps = {trendStatus: Props['trendStatus']};\n\nconst Trend = styled('div')<TrendProps>`\n  color: ${getTrendColor};\n  margin-left: ${space(1)};\n  line-height: 1;\n  overflow: hidden;\n`;\n\nexport {HeaderTitle, StyledPanel, Score, ScoreWrapper, Trend};\nexport default ScoreCard;\n"],"names":["ScoreCard","title","score","help","trend","trendStatus","className","StyledPanel","HeaderTitle","Title","size","position","ScoreWrapper","Score","defined","Trend","getTrendColor","p","theme","green300","red300","gray300","Panel","space","overflowEllipsis"],"sourceRoot":""}