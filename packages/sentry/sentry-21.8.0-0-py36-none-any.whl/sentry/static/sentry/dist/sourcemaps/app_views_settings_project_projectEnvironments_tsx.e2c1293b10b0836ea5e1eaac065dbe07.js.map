{"version":3,"file":"chunks/app_views_settings_project_projectEnvironments_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/environment.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/project/projectEnvironments.tsx"],"sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import {Environment} from 'app/types';\n\nconst DEFAULT_EMPTY_ROUTING_NAME = 'none';\nconst DEFAULT_EMPTY_ENV_NAME = '(No Environment)';\n\nexport function getUrlRoutingName(env: Partial<Environment>) {\n  if (env.name) {\n    return encodeURIComponent(env.name);\n  }\n\n  if (env.displayName) {\n    return encodeURIComponent(env.displayName);\n  }\n  return DEFAULT_EMPTY_ROUTING_NAME;\n}\n\nexport function getDisplayName(env: Partial<Environment>) {\n  return env.name || env.displayName || DEFAULT_EMPTY_ENV_NAME;\n}\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import * as React from 'react';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"xs\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {Component, Fragment} from 'react';\nimport {WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Access from 'app/components/acl/access';\nimport Button from 'app/components/button';\nimport ListLink from 'app/components/links/listLink';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport NavTabs from 'app/components/navTabs';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {ALL_ENVIRONMENTS_KEY} from 'app/constants';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Environment, Project} from 'app/types';\nimport {getDisplayName, getUrlRoutingName} from 'app/utils/environment';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withApi from 'app/utils/withApi';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'app/views/settings/project/permissionAlert';\n\ntype Props = {\n  api: Client;\n} & WithRouterProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  isLoading: boolean;\n  project: null | Project;\n  environments: null | Environment[];\n};\n\nclass ProjectEnvironments extends Component<Props, State> {\n  state: State = {\n    project: null,\n    environments: null,\n    isLoading: true,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.props.location.pathname.endsWith('hidden/') !==\n      prevProps.location.pathname.endsWith('hidden/')\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n\n    if (!this.state.isLoading) {\n      this.setState({isLoading: true});\n    }\n\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/environments/`, {\n      query: {\n        visibility: isHidden ? 'hidden' : 'visible',\n      },\n      success: environments => {\n        this.setState({environments, isLoading: false});\n      },\n    });\n  }\n\n  fetchProjectDetails() {\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/`, {\n      success: project => {\n        this.setState({project});\n      },\n    });\n  }\n\n  // Toggle visibility of environment\n  toggleEnv = (env: Environment, shouldHide: boolean) => {\n    const {orgId, projectId} = this.props.params;\n\n    this.props.api.request(\n      `/projects/${orgId}/${projectId}/environments/${getUrlRoutingName(env)}/`,\n      {\n        method: 'PUT',\n        data: {\n          name: env.name,\n          isHidden: shouldHide,\n        },\n        success: () => {\n          addSuccessMessage(\n            tct('Updated [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        error: () => {\n          addErrorMessage(\n            tct('Unable to update [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        complete: this.fetchData.bind(this),\n      }\n    );\n  };\n\n  renderEmpty() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const message = isHidden\n      ? t(\"You don't have any hidden environments.\")\n      : t(\"You don't have any environments yet.\");\n    return <EmptyMessage>{message}</EmptyMessage>;\n  }\n\n  /**\n   * Renders rows for \"system\" environments:\n   * - \"All Environments\"\n   * - \"No Environment\"\n   *\n   */\n  renderAllEnvironmentsSystemRow() {\n    // Not available in \"Hidden\" tab\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    if (isHidden) {\n      return null;\n    }\n    return (\n      <EnvironmentRow\n        name={ALL_ENVIRONMENTS_KEY}\n        environment={{\n          id: ALL_ENVIRONMENTS_KEY,\n          name: ALL_ENVIRONMENTS_KEY,\n          displayName: ALL_ENVIRONMENTS_KEY,\n        }}\n        isSystemRow\n      />\n    );\n  }\n\n  renderEnvironmentList(envs: Environment[]) {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const buttonText = isHidden ? t('Show') : t('Hide');\n\n    return (\n      <Fragment>\n        {this.renderAllEnvironmentsSystemRow()}\n        {envs.map(env => (\n          <EnvironmentRow\n            key={env.id}\n            name={env.name}\n            environment={env}\n            isHidden={isHidden}\n            onHide={this.toggleEnv}\n            actionText={buttonText}\n            shouldShowAction\n          />\n        ))}\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {environments, isLoading} = this.state;\n\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <PanelBody>\n        {environments?.length\n          ? this.renderEnvironmentList(environments)\n          : this.renderEmpty()}\n      </PanelBody>\n    );\n  }\n\n  render() {\n    const {routes, params, location} = this.props;\n    const isHidden = location.pathname.endsWith('hidden/');\n\n    const baseUrl = recreateRoute('', {routes, params, stepBack: -1});\n    return (\n      <div>\n        <SentryDocumentTitle title={t('Environments')} projectSlug={params.projectId} />\n        <SettingsPageHeader\n          title={t('Manage Environments')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink to={baseUrl} index isActive={() => !isHidden}>\n                {t('Environments')}\n              </ListLink>\n              <ListLink to={`${baseUrl}hidden/`} index isActive={() => isHidden}>\n                {t('Hidden')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n        <PermissionAlert />\n\n        <Panel>\n          <PanelHeader>{isHidden ? t('Hidden') : t('Active Environments')}</PanelHeader>\n          {this.renderBody()}\n        </Panel>\n      </div>\n    );\n  }\n}\n\ntype RowProps = {\n  environment: Environment;\n  name: string;\n  onHide?: (env: Environment, isHidden: boolean) => void;\n  isHidden?: boolean;\n  actionText?: string;\n  isSystemRow?: boolean;\n  shouldShowAction?: boolean;\n};\n\nfunction EnvironmentRow({\n  environment,\n  name,\n  onHide,\n  shouldShowAction = false,\n  isSystemRow = false,\n  isHidden = false,\n  actionText = '',\n}: RowProps) {\n  return (\n    <EnvironmentItem>\n      <Name>{isSystemRow ? t('All Environments') : name}</Name>\n      <Access access={['project:write']}>\n        {({hasAccess}) => (\n          <Fragment>\n            {shouldShowAction && onHide && (\n              <EnvironmentButton\n                size=\"xsmall\"\n                disabled={!hasAccess}\n                onClick={() => onHide(environment, !isHidden)}\n              >\n                {actionText}\n              </EnvironmentButton>\n            )}\n          </Fragment>\n        )}\n      </Access>\n    </EnvironmentItem>\n  );\n}\n\nconst EnvironmentItem = styled(PanelItem)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Name = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst EnvironmentButton = styled(Button)`\n  margin-left: ${space(0.5)};\n`;\n\nexport {ProjectEnvironments};\nexport default withApi(ProjectEnvironments);\n"],"names":["SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","getUrlRoutingName","env","name","encodeURIComponent","displayName","getDisplayName","recreateRoute","to","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","PermissionAlert","access","props","hasAccess","type","icon","size","t","ProjectEnvironments","Component","project","environments","isLoading","shouldHide","orgId","projectId","this","api","request","method","data","isHidden","success","addSuccessMessage","tct","environment","error","addErrorMessage","complete","fetchData","bind","componentDidMount","componentDidUpdate","prevProps","pathname","endsWith","state","setState","query","visibility","fetchProjectDetails","renderEmpty","message","renderAllEnvironmentsSystemRow","EnvironmentRow","ALL_ENVIRONMENTS_KEY","id","isSystemRow","renderEnvironmentList","envs","buttonText","Fragment","onHide","toggleEnv","actionText","shouldShowAction","renderBody","length","render","baseUrl","tabs","underlined","index","isActive","EnvironmentItem","Name","EnvironmentButton","disabled","onClick","PanelItem","Button","space","withApi"],"sourceRoot":""}