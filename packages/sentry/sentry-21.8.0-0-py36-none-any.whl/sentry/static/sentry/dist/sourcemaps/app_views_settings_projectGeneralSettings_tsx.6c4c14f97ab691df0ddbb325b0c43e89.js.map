{"version":3,"file":"chunks/app_views_settings_projectGeneralSettings_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectGeneralSettings.tsx"],"sourcesContent":["import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n","import * as React from 'react';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"xs\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {Component} from 'react';\nimport {browserHistory, WithRouterProps} from 'react-router';\n\nimport {\n  changeProjectSlug,\n  removeProject,\n  transferProject,\n} from 'app/actionCreators/projects';\nimport ProjectActions from 'app/actions/projectActions';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport {Panel, PanelAlert, PanelHeader} from 'app/components/panels';\nimport {fields} from 'app/data/forms/projectGeneralSettings';\nimport {t, tct} from 'app/locale';\nimport ProjectsStore from 'app/stores/projectsStore';\nimport {Organization, Project} from 'app/types';\nimport handleXhrErrorResponse from 'app/utils/handleXhrErrorResponse';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\nimport Field from 'app/views/settings/components/forms/field';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport {FieldValue} from 'app/views/settings/components/forms/model';\nimport TextField from 'app/views/settings/components/forms/textField';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport PermissionAlert from 'app/views/settings/project/permissionAlert';\n\ntype Props = AsyncView['props'] &\n  WithRouterProps<{orgId: string; projectId: string}> & {\n    organization: Organization;\n    onChangeSlug: (slug: string) => void;\n  };\n\ntype State = AsyncView['state'] & {\n  data: Project;\n};\n\nclass ProjectGeneralSettings extends AsyncView<Props, State> {\n  private _form: Record<string, FieldValue> = {};\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Project Settings'), projectId, false);\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n\n    return [['data', `/projects/${orgId}/${projectId}/`]];\n  }\n\n  handleTransferFieldChange = (id: string, value: FieldValue) => {\n    this._form[id] = value;\n  };\n\n  handleRemoveProject = () => {\n    const {orgId} = this.props.params;\n    const project = this.state.data;\n    if (!project) {\n      return;\n    }\n\n    removeProject(this.api, orgId, project).then(() => {\n      // Need to hard reload because lots of components do not listen to Projects Store\n      window.location.assign('/');\n    }, handleXhrErrorResponse('Unable to remove project'));\n  };\n\n  handleTransferProject = async () => {\n    const {orgId} = this.props.params;\n    const project = this.state.data;\n    if (!project) {\n      return;\n    }\n    if (typeof this._form.email !== 'string' || this._form.email.length < 1) {\n      return;\n    }\n\n    try {\n      await transferProject(this.api, orgId, project, this._form.email);\n      // Need to hard reload because lots of components do not listen to Projects Store\n      window.location.assign('/');\n    } catch (err) {\n      if (err.status >= 500) {\n        handleXhrErrorResponse('Unable to transfer project')(err);\n      }\n    }\n  };\n\n  isProjectAdmin = () => new Set(this.props.organization.access).has('project:admin');\n\n  renderRemoveProject() {\n    const project = this.state.data;\n    const isProjectAdmin = this.isProjectAdmin();\n    const {isInternal} = project;\n\n    return (\n      <Field\n        label={t('Remove Project')}\n        help={tct(\n          'Remove the [project] project and all related data. [linebreak] Careful, this action cannot be undone.',\n          {\n            project: <strong>{project.slug}</strong>,\n            linebreak: <br />,\n          }\n        )}\n      >\n        {!isProjectAdmin &&\n          t('You do not have the required permission to remove this project.')}\n\n        {isInternal &&\n          t(\n            'This project cannot be removed. It is used internally by the Sentry server.'\n          )}\n\n        {isProjectAdmin && !isInternal && (\n          <Confirm\n            onConfirm={this.handleRemoveProject}\n            priority=\"danger\"\n            confirmText={t('Remove project')}\n            message={\n              <div>\n                <TextBlock>\n                  <strong>\n                    {t('Removing this project is permanent and cannot be undone!')}\n                  </strong>\n                </TextBlock>\n                <TextBlock>\n                  {t('This will also remove all associated event data.')}\n                </TextBlock>\n              </div>\n            }\n          >\n            <div>\n              <Button className=\"ref-remove-project\" type=\"button\" priority=\"danger\">\n                {t('Remove Project')}\n              </Button>\n            </div>\n          </Confirm>\n        )}\n      </Field>\n    );\n  }\n\n  renderTransferProject() {\n    const project = this.state.data;\n    const isProjectAdmin = this.isProjectAdmin();\n    const {isInternal} = project;\n\n    return (\n      <Field\n        label={t('Transfer Project')}\n        help={tct(\n          'Transfer the [project] project and all related data. [linebreak] Careful, this action cannot be undone.',\n          {\n            project: <strong>{project.slug}</strong>,\n            linebreak: <br />,\n          }\n        )}\n      >\n        {!isProjectAdmin &&\n          t('You do not have the required permission to transfer this project.')}\n\n        {isInternal &&\n          t(\n            'This project cannot be transferred. It is used internally by the Sentry server.'\n          )}\n\n        {isProjectAdmin && !isInternal && (\n          <Confirm\n            onConfirm={this.handleTransferProject}\n            priority=\"danger\"\n            confirmText={t('Transfer project')}\n            renderMessage={({confirm}) => (\n              <div>\n                <TextBlock>\n                  <strong>\n                    {t('Transferring this project is permanent and cannot be undone!')}\n                  </strong>\n                </TextBlock>\n                <TextBlock>\n                  {t(\n                    'Please enter the email of an organization owner to whom you would like to transfer this project.'\n                  )}\n                </TextBlock>\n                <Panel>\n                  <Form\n                    hideFooter\n                    onFieldChange={this.handleTransferFieldChange}\n                    onSubmit={(_data, _onSuccess, _onError, e) => {\n                      e.stopPropagation();\n                      confirm();\n                    }}\n                  >\n                    <TextField\n                      name=\"email\"\n                      label={t('Organization Owner')}\n                      placeholder=\"admin@example.com\"\n                      required\n                      help={t(\n                        'A request will be emailed to this address, asking the organization owner to accept the project transfer.'\n                      )}\n                    />\n                  </Form>\n                </Panel>\n              </div>\n            )}\n          >\n            <div>\n              <Button className=\"ref-transfer-project\" type=\"button\" priority=\"danger\">\n                {t('Transfer Project')}\n              </Button>\n            </div>\n          </Confirm>\n        )}\n      </Field>\n    );\n  }\n\n  renderBody() {\n    const {organization} = this.props;\n    const project = this.state.data;\n    const {orgId, projectId} = this.props.params;\n    const endpoint = `/projects/${orgId}/${projectId}/`;\n    const access = new Set(organization.access);\n    const jsonFormProps = {\n      additionalFieldProps: {\n        organization,\n      },\n      features: new Set(organization.features),\n      access,\n      disabled: !access.has('project:write'),\n    };\n    const team = project.teams.length ? project.teams?.[0] : undefined;\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Project Settings')} />\n        <PermissionAlert />\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={{\n            ...project,\n            team,\n          }}\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          onSubmitSuccess={resp => {\n            this.setState({data: resp});\n            if (projectId !== resp.slug) {\n              changeProjectSlug(projectId, resp.slug);\n              // Container will redirect after stores get updated with new slug\n              this.props.onChangeSlug(resp.slug);\n            }\n            // This will update our project context\n            ProjectActions.updateSuccess(resp);\n          }}\n        >\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Project Details')}\n            fields={[fields.slug, fields.platform]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Email')}\n            fields={[fields.subjectPrefix]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Event Settings')}\n            fields={[fields.resolveAge]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Client Security')}\n            fields={[\n              fields.allowedDomains,\n              fields.scrapeJavaScript,\n              fields.securityToken,\n              fields.securityTokenHeader,\n              fields.verifySSL,\n            ]}\n            renderHeader={() => (\n              <PanelAlert type=\"info\">\n                <TextBlock noMargin>\n                  {tct(\n                    'Configure origin URLs which Sentry should accept events from. This is used for communication with clients like [link].',\n                    {\n                      link: (\n                        <a href=\"https://github.com/getsentry/sentry-javascript\">\n                          sentry-javascript\n                        </a>\n                      ),\n                    }\n                  )}{' '}\n                  {tct(\n                    'This will restrict requests based on the [Origin] and [Referer] headers.',\n                    {\n                      Origin: <code>Origin</code>,\n                      Referer: <code>Referer</code>,\n                    }\n                  )}\n                </TextBlock>\n              </PanelAlert>\n            )}\n          />\n        </Form>\n\n        <Panel>\n          <PanelHeader>{t('Project Administration')}</PanelHeader>\n          {this.renderRemoveProject()}\n          {this.renderTransferProject()}\n        </Panel>\n      </div>\n    );\n  }\n}\n\ntype ContainerProps = {\n  organization: Organization;\n} & WithRouterProps<{orgId: string; projectId: string}>;\n\nclass ProjectGeneralSettingsContainer extends Component<ContainerProps> {\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  changedSlug: string | undefined = undefined;\n  unsubscribe = ProjectsStore.listen(() => this.onProjectsUpdate(), undefined);\n\n  onProjectsUpdate() {\n    if (!this.changedSlug) {\n      return;\n    }\n    const project = ProjectsStore.getBySlug(this.changedSlug);\n\n    if (!project) {\n      return;\n    }\n\n    browserHistory.replace(\n      recreateRoute('', {\n        ...this.props,\n        params: {\n          ...this.props.params,\n          projectId: this.changedSlug,\n        },\n      })\n    );\n  }\n\n  render() {\n    return (\n      <ProjectGeneralSettings\n        onChangeSlug={(newSlug: string) => (this.changedSlug = newSlug)}\n        {...this.props}\n      />\n    );\n  }\n}\n\nexport default withOrganization(ProjectGeneralSettingsContainer);\n"],"names":["recreateRoute","to","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","FormPanel","React","fields","access","disabled","additionalFieldProps","renderFooter","renderHeader","otherProps","props","id","sanitizeQuerySelector","undefined","field","defaultValue","_","fieldWithoutDefaultValue","disabledReason","highlighted","name","JsonForm","componentDidMount","scrollToHash","UNSAFE_componentWillReceiveProps","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","shouldDisplayForm","fieldsWithVisibleProp","filter","defined","visible","length","every","renderForm","formPanelProps","forms","features","_location","state","formGroup","i","withRouter","PermissionAlert","hasAccess","type","icon","size","t","ProjectGeneralSettings","value","_form","orgId","project","data","removeProject","api","then","window","assign","handleXhrErrorResponse","async","email","transferProject","status","Set","organization","has","projectId","routeTitleGen","getEndpoints","renderRemoveProject","isProjectAdmin","isInternal","label","help","tct","slug","linebreak","onConfirm","handleRemoveProject","priority","confirmText","message","className","renderTransferProject","handleTransferProject","renderMessage","confirm","hideFooter","onFieldChange","handleTransferFieldChange","onSubmit","_data","_onSuccess","_onError","e","stopPropagation","placeholder","required","renderBody","endpoint","jsonFormProps","team","teams","saveOnBlur","allowUndo","initialData","apiMethod","apiEndpoint","onSubmitSuccess","resp","changeProjectSlug","onChangeSlug","ProjectActions","noMargin","link","href","Origin","Referer","ProjectGeneralSettingsContainer","Component","ProjectsStore","onProjectsUpdate","componentWillUnmount","unsubscribe","changedSlug","browserHistory","newSlug","withOrganization"],"sourceRoot":""}