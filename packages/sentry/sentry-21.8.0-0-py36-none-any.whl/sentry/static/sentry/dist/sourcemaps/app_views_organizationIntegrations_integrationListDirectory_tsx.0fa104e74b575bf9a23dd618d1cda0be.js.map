{"version":3,"file":"chunks/app_views_organizationIntegrations_integrationListDirectory_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/createFuzzySearch.tsx","webpack:///./app/views/organizationIntegrations/integrationRow.tsx","webpack:///./app/views/organizationIntegrations/integrationListDirectory.tsx","webpack:///./app/views/settings/organization/permissionAlert.tsx"],"sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import {DEFAULT_FUSE_OPTIONS} from 'app/constants';\n\nexport function loadFuzzySearch() {\n  return import('fuse.js');\n}\n\nexport async function createFuzzySearch<\n  T = string,\n  Options extends Fuse.FuseOptions<T> = Fuse.FuseOptions<T>\n>(objects: any[], options: Options): Promise<Fuse<T, Options>> {\n  if (!options.keys) {\n    throw new Error('You need to define `options.keys`');\n  }\n\n  const {default: Fuse} = await loadFuzzySearch();\n  const opts = {\n    ...DEFAULT_FUSE_OPTIONS,\n    ...options,\n  };\n  return new Fuse(objects, opts);\n}\n","import styled from '@emotion/styled';\nimport startCase from 'lodash/startCase';\n\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport Link from 'app/components/links/link';\nimport {PanelItem} from 'app/components/panels';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\nimport PluginIcon from 'app/plugins/components/pluginIcon';\nimport space from 'app/styles/space';\nimport {IntegrationInstallationStatus, Organization, SentryApp} from 'app/types';\nimport {\n  convertIntegrationTypeToSnakeCase,\n  trackIntegrationEvent,\n} from 'app/utils/integrationUtil';\n\nimport IntegrationStatus from './integrationStatus';\n\ntype Props = {\n  organization: Organization;\n  type: 'plugin' | 'firstParty' | 'sentryApp' | 'documentIntegration';\n  slug: string;\n  displayName: string;\n  status?: IntegrationInstallationStatus;\n  publishStatus: 'unpublished' | 'published' | 'internal';\n  configurations: number;\n  categories: string[];\n  alertText?: string;\n};\n\nconst urlMap = {\n  plugin: 'plugins',\n  firstParty: 'integrations',\n  sentryApp: 'sentry-apps',\n  documentIntegration: 'document-integrations',\n};\n\nconst IntegrationRow = (props: Props) => {\n  const {\n    organization,\n    type,\n    slug,\n    displayName,\n    status,\n    publishStatus,\n    configurations,\n    categories,\n    alertText,\n  } = props;\n\n  const baseUrl =\n    publishStatus === 'internal'\n      ? `/settings/${organization.slug}/developer-settings/${slug}/`\n      : `/settings/${organization.slug}/${urlMap[type]}/${slug}/`;\n\n  const renderDetails = () => {\n    if (type === 'sentryApp') {\n      return publishStatus !== 'published' && <PublishStatus status={publishStatus} />;\n    }\n    // TODO: Use proper translations\n    return configurations > 0 ? (\n      <StyledLink to={`${baseUrl}?tab=configurations`}>{`${configurations} Configuration${\n        configurations > 1 ? 's' : ''\n      }`}</StyledLink>\n    ) : null;\n  };\n\n  const renderStatus = () => {\n    // status should be undefined for document integrations\n    if (status) {\n      return <IntegrationStatus status={status} />;\n    }\n    return <LearnMore to={baseUrl}>{t('Learn More')}</LearnMore>;\n  };\n\n  return (\n    <PanelRow noPadding data-test-id={slug}>\n      <FlexContainer>\n        <PluginIcon size={36} pluginId={slug} />\n        <Container>\n          <IntegrationName to={baseUrl}>{displayName}</IntegrationName>\n          <IntegrationDetails>\n            {renderStatus()}\n            {renderDetails()}\n          </IntegrationDetails>\n        </Container>\n        <InternalContainer>\n          {categories?.map(category => (\n            <CategoryTag\n              key={category}\n              category={startCase(category)}\n              priority={category === publishStatus}\n            />\n          ))}\n        </InternalContainer>\n      </FlexContainer>\n      {alertText && (\n        <AlertContainer>\n          <Alert type=\"warning\" icon={<IconWarning size=\"sm\" />}>\n            <span>{alertText}</span>\n            <ResolveNowButton\n              href={`${baseUrl}?tab=configurations&referrer=directory_resolve_now`}\n              size=\"xsmall\"\n              onClick={() =>\n                trackIntegrationEvent('integrations.resolve_now_clicked', {\n                  integration_type: convertIntegrationTypeToSnakeCase(type),\n                  integration: slug,\n                  organization,\n                })\n              }\n            >\n              {t('Resolve Now')}\n            </ResolveNowButton>\n          </Alert>\n        </AlertContainer>\n      )}\n    </PanelRow>\n  );\n};\n\nconst PanelRow = styled(PanelItem)`\n  flex-direction: column;\n`;\n\nconst FlexContainer = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(2)};\n`;\n\nconst InternalContainer = styled(FlexContainer)`\n  padding: 0 ${space(2)};\n`;\n\nconst Container = styled('div')`\n  flex: 1;\n  padding: 0 16px;\n`;\n\nconst IntegrationName = styled(Link)`\n  font-weight: bold;\n`;\n\nconst IntegrationDetails = styled('div')`\n  display: flex;\n  align-items: center;\n  margin-top: 6px;\n  font-size: 0.8em;\n`;\n\nconst StyledLink = styled(Link)`\n  color: ${p => p.theme.gray300};\n  &:before {\n    content: '|';\n    color: ${p => p.theme.gray200};\n    margin-right: ${space(0.75)};\n    font-weight: normal;\n  }\n`;\n\nconst LearnMore = styled(Link)`\n  color: ${p => p.theme.gray300};\n`;\n\ntype PublishStatusProps = {status: SentryApp['status']; theme?: any};\n\nconst PublishStatus = styled(({status, ...props}: PublishStatusProps) => (\n  <div {...props}>{t(`${status}`)}</div>\n))`\n  color: ${(props: PublishStatusProps) =>\n    props.status === 'published' ? props.theme.success : props.theme.gray300};\n  font-weight: light;\n  margin-right: ${space(0.75)};\n  text-transform: capitalize;\n  &:before {\n    content: '|';\n    color: ${p => p.theme.gray200};\n    margin-right: ${space(0.75)};\n    font-weight: normal;\n  }\n`;\n\n// TODO(Priscila): Replace this component with the Tag component\nconst CategoryTag = styled(\n  ({\n    priority: _priority,\n    category,\n    ...p\n  }: {\n    category: string;\n    priority: boolean;\n    theme?: any;\n  }) => <div {...p}>{category}</div>\n)`\n  display: flex;\n  flex-direction: row;\n  padding: 1px 10px;\n  background: ${p => (p.priority ? p.theme.purple200 : p.theme.gray100)};\n  border-radius: 20px;\n  font-size: ${space(1.5)};\n  margin-right: ${space(1)};\n  line-height: ${space(3)};\n  text-align: center;\n  color: ${p => (p.priority ? p.theme.white : p.theme.gray500)};\n`;\n\nconst ResolveNowButton = styled(Button)`\n  color: ${p => p.theme.subText};\n  float: right;\n`;\n\nconst AlertContainer = styled('div')`\n  padding: 0px ${space(3)} 0px 68px;\n`;\n\nexport default IntegrationRow;\n","import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\nimport flatten from 'lodash/flatten';\nimport groupBy from 'lodash/groupBy';\nimport startCase from 'lodash/startCase';\nimport uniq from 'lodash/uniq';\nimport * as queryString from 'query-string';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport SelectControl from 'app/components/forms/selectControl';\nimport {Panel, PanelBody} from 'app/components/panels';\nimport SearchBar from 'app/components/searchBar';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {\n  AppOrProviderOrPlugin,\n  DocumentIntegration,\n  Integration,\n  IntegrationProvider,\n  Organization,\n  PluginWithProjectList,\n  SentryApp,\n  SentryAppInstallation,\n} from 'app/types';\nimport {createFuzzySearch} from 'app/utils/createFuzzySearch';\nimport {\n  getCategoriesForIntegration,\n  getSentryAppInstallStatus,\n  isDocumentIntegration,\n  isPlugin,\n  isSentryApp,\n  trackIntegrationEvent,\n} from 'app/utils/integrationUtil';\nimport withOrganization from 'app/utils/withOrganization';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'app/views/settings/organization/permissionAlert';\n\nimport {documentIntegrations, POPULARITY_WEIGHT} from './constants';\nimport IntegrationRow from './integrationRow';\n\nconst fuseOptions = {\n  threshold: 0.3,\n  location: 0,\n  distance: 100,\n  includeScore: true as const,\n  keys: ['slug', 'key', 'name', 'id'],\n};\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n  hideHeader: boolean;\n};\n\ntype State = {\n  integrations: Integration[] | null;\n  plugins: PluginWithProjectList[] | null;\n  appInstalls: SentryAppInstallation[] | null;\n  orgOwnedApps: SentryApp[] | null;\n  publishedApps: SentryApp[] | null;\n  config: {providers: IntegrationProvider[]} | null;\n  extraApp?: SentryApp;\n  searchInput: string;\n  list: AppOrProviderOrPlugin[];\n  displayedList: AppOrProviderOrPlugin[];\n  selectedCategory: string;\n  fuzzy?: Fuse<AppOrProviderOrPlugin, typeof fuseOptions>;\n};\n\nconst TEXT_SEARCH_ANALYTICS_DEBOUNCE_IN_MS = 1000;\n\nexport class IntegrationListDirectory extends AsyncComponent<\n  Props & AsyncComponent['props'],\n  State & AsyncComponent['state']\n> {\n  // Some integrations require visiting a different website to add them. When\n  // we come back to the tab we want to show our integrations as soon as we can.\n  shouldReload = true;\n  reloadOnVisible = true;\n  shouldReloadOnVisible = true;\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      list: [],\n      displayedList: [],\n      selectedCategory: '',\n    };\n  }\n\n  onLoadAllEndpointsSuccess() {\n    const {publishedApps, orgOwnedApps, extraApp, plugins} = this.state;\n    const published = publishedApps || [];\n    // If we have an extra app in state from query parameter, add it as org owned app\n    if (orgOwnedApps !== null && extraApp) {\n      orgOwnedApps.push(extraApp);\n    }\n\n    // we don't want the app to render twice if its the org that created\n    // the published app.\n    const orgOwned = orgOwnedApps?.filter(\n      app => !published.find(p => p.slug === app.slug)\n    );\n\n    /**\n     * We should have three sections:\n     * 1. Public apps and integrations available to everyone\n     * 2. Unpublished apps available to that org\n     * 3. Internal apps available to that org\n     */\n\n    const combined = ([] as AppOrProviderOrPlugin[])\n      .concat(published)\n      .concat(orgOwned ?? [])\n      .concat(this.providers)\n      .concat(plugins ?? [])\n      .concat(Object.values(documentIntegrations));\n\n    const list = this.sortIntegrations(combined);\n\n    const {searchInput, selectedCategory} = this.getFilterParameters();\n\n    this.setState({list, searchInput, selectedCategory}, () => {\n      this.updateDisplayedList();\n      this.trackPageViewed();\n    });\n  }\n\n  trackPageViewed() {\n    // count the number of installed apps\n\n    const {integrations, publishedApps, plugins} = this.state;\n    const integrationsInstalled = new Set();\n    // add installed integrations\n    integrations?.forEach((integration: Integration) => {\n      integrationsInstalled.add(integration.provider.key);\n    });\n    // add sentry apps\n    publishedApps?.filter(this.getAppInstall).forEach((sentryApp: SentryApp) => {\n      integrationsInstalled.add(sentryApp.slug);\n    });\n    // add plugins\n    plugins?.forEach((plugin: PluginWithProjectList) => {\n      if (plugin.projectList.length) {\n        integrationsInstalled.add(plugin.slug);\n      }\n    });\n    trackIntegrationEvent(\n      'integrations.index_viewed',\n      {\n        integrations_installed: integrationsInstalled.size,\n        view: 'integrations_directory',\n        organization: this.props.organization,\n      },\n      {startSession: true}\n    );\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId} = this.props.params;\n    const baseEndpoints: ([string, string, any] | [string, string])[] = [\n      ['config', `/organizations/${orgId}/config/integrations/`],\n      [\n        'integrations',\n        `/organizations/${orgId}/integrations/`,\n        {query: {includeConfig: 0}},\n      ],\n      ['orgOwnedApps', `/organizations/${orgId}/sentry-apps/`],\n      ['publishedApps', '/sentry-apps/', {query: {status: 'published'}}],\n      ['appInstalls', `/organizations/${orgId}/sentry-app-installations/`],\n      ['plugins', `/organizations/${orgId}/plugins/configs/`],\n    ];\n    /**\n     * optional app to load for super users\n     * should only be done for unpublished integrations from another org\n     * but no checks are in place to ensure the above condition\n     */\n    const extraAppSlug = new URLSearchParams(this.props.location.search).get('extra_app');\n    if (extraAppSlug) {\n      baseEndpoints.push(['extraApp', `/sentry-apps/${extraAppSlug}/`]);\n    }\n\n    return baseEndpoints;\n  }\n\n  // State\n\n  get unmigratableReposByOrg() {\n    // Group by [GitHub|BitBucket|VSTS] Org name\n    return groupBy(this.state.unmigratableRepos, repo => repo.name.split('/')[0]);\n  }\n\n  get providers(): IntegrationProvider[] {\n    return this.state.config?.providers ?? [];\n  }\n\n  getAppInstall = (app: SentryApp) =>\n    this.state.appInstalls?.find(i => i.app.slug === app.slug);\n\n  // Returns 0 if uninstalled, 1 if pending, and 2 if installed\n  getInstallValue(integration: AppOrProviderOrPlugin) {\n    const {integrations} = this.state;\n\n    if (isPlugin(integration)) {\n      return integration.projectList.length > 0 ? 2 : 0;\n    }\n\n    if (isSentryApp(integration)) {\n      const install = this.getAppInstall(integration);\n      if (install) {\n        return install.status === 'pending' ? 1 : 2;\n      }\n      return 0;\n    }\n\n    if (isDocumentIntegration(integration)) {\n      return 0;\n    }\n\n    return integrations?.find(i => i.provider.key === integration.key) ? 2 : 0;\n  }\n\n  getPopularityWeight = (integration: AppOrProviderOrPlugin) =>\n    POPULARITY_WEIGHT[integration.slug] ?? 1;\n\n  sortByName = (a: AppOrProviderOrPlugin, b: AppOrProviderOrPlugin) =>\n    a.slug.localeCompare(b.slug);\n\n  sortByPopularity = (a: AppOrProviderOrPlugin, b: AppOrProviderOrPlugin) => {\n    const weightA = this.getPopularityWeight(a);\n    const weightB = this.getPopularityWeight(b);\n    return weightB - weightA;\n  };\n\n  sortByInstalled = (a: AppOrProviderOrPlugin, b: AppOrProviderOrPlugin) =>\n    this.getInstallValue(b) - this.getInstallValue(a);\n\n  sortIntegrations(integrations: AppOrProviderOrPlugin[]) {\n    return integrations.sort((a: AppOrProviderOrPlugin, b: AppOrProviderOrPlugin) => {\n      // sort by whether installed first\n      const diffWeight = this.sortByInstalled(a, b);\n      if (diffWeight !== 0) {\n        return diffWeight;\n      }\n      // then sort by popularity\n      const diffPop = this.sortByPopularity(a, b);\n      if (diffPop !== 0) {\n        return diffPop;\n      }\n      // then sort by name\n      return this.sortByName(a, b);\n    });\n  }\n\n  async componentDidUpdate(_: Props, prevState: State) {\n    if (this.state.list.length !== prevState.list.length) {\n      await this.createSearch();\n    }\n  }\n\n  async createSearch() {\n    const {list} = this.state;\n    this.setState({\n      fuzzy: await createFuzzySearch(list || [], fuseOptions),\n    });\n  }\n\n  debouncedTrackIntegrationSearch = debounce((search: string, numResults: number) => {\n    trackIntegrationEvent('integrations.directory_item_searched', {\n      view: 'integrations_directory',\n      search_term: search,\n      num_results: numResults,\n      organization: this.props.organization,\n    });\n  }, TEXT_SEARCH_ANALYTICS_DEBOUNCE_IN_MS);\n\n  /**\n   * Get filter parameters and guard against `queryString.parse` returning arrays.\n   */\n  getFilterParameters = (): {searchInput: string; selectedCategory: string} => {\n    const {category, search} = queryString.parse(this.props.location.search);\n\n    const selectedCategory = Array.isArray(category) ? category[0] : category || '';\n    const searchInput = Array.isArray(search) ? search[0] : search || '';\n\n    return {searchInput, selectedCategory};\n  };\n\n  /**\n   * Update the query string with the current filter parameter values.\n   */\n  updateQueryString = () => {\n    const {searchInput, selectedCategory} = this.state;\n\n    const searchString = queryString.stringify({\n      ...queryString.parse(this.props.location.search),\n      search: searchInput ? searchInput : undefined,\n      category: selectedCategory ? selectedCategory : undefined,\n    });\n\n    browserHistory.replace({\n      pathname: this.props.location.pathname,\n      search: searchString ? `?${searchString}` : undefined,\n    });\n  };\n\n  /**\n   * Filter the integrations list by ANDing together the search query and the category select.\n   */\n  updateDisplayedList = (): AppOrProviderOrPlugin[] => {\n    const {fuzzy, list, searchInput, selectedCategory} = this.state;\n\n    let displayedList = list;\n\n    if (searchInput && fuzzy) {\n      const searchResults = fuzzy.search(searchInput);\n      displayedList = this.sortIntegrations(searchResults.map(i => i.item));\n    }\n\n    if (selectedCategory) {\n      displayedList = displayedList.filter(integration =>\n        getCategoriesForIntegration(integration).includes(selectedCategory)\n      );\n    }\n\n    this.setState({displayedList});\n\n    return displayedList;\n  };\n\n  handleSearchChange = async (value: string) => {\n    this.setState({searchInput: value}, () => {\n      this.updateQueryString();\n      const result = this.updateDisplayedList();\n      if (value) {\n        this.debouncedTrackIntegrationSearch(value, result.length);\n      }\n    });\n  };\n\n  onCategorySelect = ({value: category}: {value: string}) => {\n    this.setState({selectedCategory: category}, () => {\n      this.updateQueryString();\n      this.updateDisplayedList();\n\n      if (category) {\n        trackIntegrationEvent('integrations.directory_category_selected', {\n          view: 'integrations_directory',\n          category,\n          organization: this.props.organization,\n        });\n      }\n    });\n  };\n\n  // Rendering\n  renderProvider = (provider: IntegrationProvider) => {\n    const {organization} = this.props;\n    // find the integration installations for that provider\n    const integrations =\n      this.state.integrations?.filter(i => i.provider.key === provider.key) ?? [];\n\n    return (\n      <IntegrationRow\n        key={`row-${provider.key}`}\n        data-test-id=\"integration-row\"\n        organization={organization}\n        type=\"firstParty\"\n        slug={provider.slug}\n        displayName={provider.name}\n        status={integrations.length ? 'Installed' : 'Not Installed'}\n        publishStatus=\"published\"\n        configurations={integrations.length}\n        categories={getCategoriesForIntegration(provider)}\n      />\n    );\n  };\n\n  renderPlugin = (plugin: PluginWithProjectList) => {\n    const {organization} = this.props;\n\n    const isLegacy = plugin.isHidden;\n    const displayName = `${plugin.name} ${isLegacy ? '(Legacy)' : ''}`;\n    // hide legacy integrations if we don't have any projects with them\n    if (isLegacy && !plugin.projectList.length) {\n      return null;\n    }\n    return (\n      <IntegrationRow\n        key={`row-plugin-${plugin.id}`}\n        data-test-id=\"integration-row\"\n        organization={organization}\n        type=\"plugin\"\n        slug={plugin.slug}\n        displayName={displayName}\n        status={plugin.projectList.length ? 'Installed' : 'Not Installed'}\n        publishStatus=\"published\"\n        configurations={plugin.projectList.length}\n        categories={getCategoriesForIntegration(plugin)}\n      />\n    );\n  };\n\n  // render either an internal or non-internal app\n  renderSentryApp = (app: SentryApp) => {\n    const {organization} = this.props;\n    const status = getSentryAppInstallStatus(this.getAppInstall(app));\n    const categories = getCategoriesForIntegration(app);\n\n    return (\n      <IntegrationRow\n        key={`sentry-app-row-${app.slug}`}\n        data-test-id=\"integration-row\"\n        organization={organization}\n        type=\"sentryApp\"\n        slug={app.slug}\n        displayName={app.name}\n        status={status}\n        publishStatus={app.status}\n        configurations={0}\n        categories={categories}\n      />\n    );\n  };\n\n  renderDocumentIntegration = (integration: DocumentIntegration) => {\n    const {organization} = this.props;\n    return (\n      <IntegrationRow\n        key={`doc-int-${integration.slug}`}\n        organization={organization}\n        type=\"documentIntegration\"\n        slug={integration.slug}\n        displayName={integration.name}\n        publishStatus=\"published\"\n        configurations={0}\n        categories={getCategoriesForIntegration(integration)}\n      />\n    );\n  };\n\n  renderIntegration = (integration: AppOrProviderOrPlugin) => {\n    if (isSentryApp(integration)) {\n      return this.renderSentryApp(integration);\n    }\n    if (isPlugin(integration)) {\n      return this.renderPlugin(integration);\n    }\n    if (isDocumentIntegration(integration)) {\n      return this.renderDocumentIntegration(integration);\n    }\n    return this.renderProvider(integration);\n  };\n\n  renderBody() {\n    const {orgId} = this.props.params;\n    const {displayedList, list, searchInput, selectedCategory} = this.state;\n\n    const title = t('Integrations');\n    const categoryList = uniq(flatten(list.map(getCategoriesForIntegration))).sort();\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} orgSlug={orgId} />\n\n        {!this.props.hideHeader && (\n          <SettingsPageHeader\n            title={title}\n            action={\n              <ActionContainer>\n                <SelectControl\n                  name=\"select-categories\"\n                  onChange={this.onCategorySelect}\n                  value={selectedCategory}\n                  choices={[\n                    ['', t('All Categories')],\n                    ...categoryList.map(category => [category, startCase(category)]),\n                  ]}\n                />\n                <SearchBar\n                  query={searchInput || ''}\n                  onChange={this.handleSearchChange}\n                  placeholder={t('Filter Integrations...')}\n                  width=\"25em\"\n                />\n              </ActionContainer>\n            }\n          />\n        )}\n\n        <PermissionAlert access={['org:integrations']} />\n        <Panel>\n          <PanelBody>\n            {displayedList.length ? (\n              displayedList.map(this.renderIntegration)\n            ) : (\n              <EmptyResultsContainer>\n                <EmptyResultsBody>\n                  {tct('No Integrations found for \"[searchTerm]\".', {\n                    searchTerm: searchInput,\n                  })}\n                </EmptyResultsBody>\n                <EmptyResultsBodyBold>\n                  {t(\"Not seeing what you're looking for?\")}\n                </EmptyResultsBodyBold>\n                <EmptyResultsBody>\n                  {tct('[link:Build it on the Sentry Integration Platform.]', {\n                    link: (\n                      <a href=\"https://docs.sentry.io/product/integrations/integration-platform/\" />\n                    ),\n                  })}\n                </EmptyResultsBody>\n              </EmptyResultsContainer>\n            )}\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n\nconst ActionContainer = styled('div')`\n  display: grid;\n  grid-template-columns: 240px max-content;\n  grid-gap: ${space(2)};\n`;\n\nconst EmptyResultsContainer = styled('div')`\n  height: 200px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst EmptyResultsBody = styled('div')`\n  font-size: 16px;\n  line-height: 28px;\n  color: ${p => p.theme.gray300};\n  padding-bottom: ${space(2)};\n`;\n\nconst EmptyResultsBodyBold = styled(EmptyResultsBody)`\n  font-weight: bold;\n`;\n\nexport default withOrganization(IntegrationListDirectory);\n","import * as React from 'react';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['org:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"sm\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner or manager role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n"],"names":["SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","async","createFuzzySearch","objects","options","keys","Error","default","Fuse","DEFAULT_FUSE_OPTIONS","urlMap","plugin","firstParty","sentryApp","documentIntegration","IntegrationRow","props","organization","type","slug","displayName","status","publishStatus","configurations","categories","alertText","baseUrl","PanelRow","noPadding","FlexContainer","size","pluginId","Container","IntegrationName","to","IntegrationDetails","LearnMore","t","PublishStatus","StyledLink","InternalContainer","map","category","CategoryTag","startCase","priority","AlertContainer","icon","ResolveNowButton","href","onClick","trackIntegrationEvent","integration_type","convertIntegrationTypeToSnakeCase","integration","PanelItem","space","Link","p","theme","gray300","gray200","success","_priority","purple200","gray100","white","gray500","Button","subText","fuseOptions","threshold","location","distance","includeScore","IntegrationListDirectory","AsyncComponent","app","this","state","appInstalls","find","i","POPULARITY_WEIGHT","a","b","localeCompare","weightA","getPopularityWeight","getInstallValue","debounce","search","numResults","view","search_term","num_results","queryString","selectedCategory","Array","isArray","searchInput","searchString","undefined","browserHistory","pathname","fuzzy","list","displayedList","searchResults","sortIntegrations","item","filter","getCategoriesForIntegration","includes","setState","value","updateQueryString","result","updateDisplayedList","debouncedTrackIntegrationSearch","length","provider","integrations","key","name","isLegacy","isHidden","projectList","id","getSentryAppInstallStatus","getAppInstall","isSentryApp","renderSentryApp","isPlugin","renderPlugin","isDocumentIntegration","renderDocumentIntegration","renderProvider","getDefaultState","super","onLoadAllEndpointsSuccess","publishedApps","orgOwnedApps","extraApp","plugins","published","push","orgOwned","combined","concat","providers","Object","values","documentIntegrations","getFilterParameters","trackPageViewed","integrationsInstalled","Set","forEach","add","integrations_installed","startSession","getEndpoints","orgId","params","baseEndpoints","query","includeConfig","extraAppSlug","URLSearchParams","get","groupBy","unmigratableRepos","repo","split","config","install","sort","diffWeight","sortByInstalled","diffPop","sortByPopularity","sortByName","_","prevState","createSearch","renderBody","categoryList","uniq","flatten","Fragment","hideHeader","action","ActionContainer","onChange","onCategorySelect","choices","handleSearchChange","placeholder","width","access","renderIntegration","EmptyResultsContainer","EmptyResultsBody","tct","searchTerm","EmptyResultsBodyBold","link","withOrganization","PermissionAlert","hasAccess"],"sourceRoot":""}