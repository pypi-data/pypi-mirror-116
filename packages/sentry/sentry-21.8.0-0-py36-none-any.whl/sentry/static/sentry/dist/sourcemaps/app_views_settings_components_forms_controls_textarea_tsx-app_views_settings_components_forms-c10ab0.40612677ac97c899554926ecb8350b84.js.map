{"version":3,"file":"chunks/app_views_settings_components_forms_controls_textarea_tsx-app_views_settings_components_forms-c10ab0.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/marked.tsx","webpack:///./app/utils/removeAtArrayIndex.tsx","webpack:///./app/views/settings/components/forms/controls/textarea.tsx","webpack:///./app/views/settings/components/forms/blankField.tsx","webpack:///./app/views/settings/components/forms/projectMapperField.tsx","webpack:///./app/views/settings/components/forms/selectAsyncField.tsx","webpack:///./app/views/settings/components/forms/tableField.tsx","webpack:///./app/views/settings/components/forms/fieldFromConfig.tsx","webpack:///./app/views/settings/components/forms/radioField.tsx","webpack:///./app/views/settings/components/forms/sentryProjectSelectorField.tsx"],"sourcesContent":["import dompurify from 'dompurify';\nimport marked from 'marked'; // eslint-disable-line no-restricted-imports\n\nimport {IS_ACCEPTANCE_TEST, NODE_ENV} from 'app/constants';\n\n// Only https and mailto, (e.g. no javascript, vbscript, data protocols)\nconst safeLinkPattern = /^(https?:|mailto:)/i;\n\nconst safeImagePattern = /^https?:\\/\\/./i;\n\nfunction isSafeHref(href: string, pattern: RegExp) {\n  try {\n    return pattern.test(decodeURIComponent(unescape(href)));\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Implementation of marked.Renderer which additonally sanitizes URLs.\n */\nclass SafeRenderer extends marked.Renderer {\n  link(href: string, title: string, text: string) {\n    // For a bad link, just return the plain text href\n    if (!isSafeHref(href, safeLinkPattern)) {\n      return href;\n    }\n\n    const out = `<a href=\"${href}\"${title ? ` title=\"${title}\"` : ''}>${text}</a>`;\n    return dompurify.sanitize(out);\n  }\n\n  image(href: string, title: string, text: string) {\n    // For a bad image, return an empty string\n    if (this.options.sanitize && !isSafeHref(href, safeImagePattern)) {\n      return '';\n    }\n\n    return `<img src=\"${href}\" alt=\"${text}\"${title ? ` title=\"${title}\"` : ''} />`;\n  }\n}\n\nclass NoParagraphRenderer extends SafeRenderer {\n  paragraph(text: string) {\n    return text;\n  }\n}\n\nmarked.setOptions({\n  renderer: new SafeRenderer(),\n  sanitize: true,\n\n  // Silence sanitize deprecation warning in test / ci (CI sets NODE_NV\n  // to production, but specifies `CI`).\n  //\n  // [!!] This has the side effect of causing failed markdown content to render\n  //      as a html error, instead of throwing an exception, however none of\n  //      our tests are rendering failed markdown so this is likely a safe\n  //      tradeoff to turn off off the deprecation warning.\n  silent: !!IS_ACCEPTANCE_TEST || NODE_ENV === 'test',\n});\n\nconst sanitizedMarked = (...args: Parameters<typeof marked>) =>\n  dompurify.sanitize(marked(...args));\n\nconst singleLineRenderer = (text: string, options: marked.MarkedOptions = {}) =>\n  sanitizedMarked(text, {...options, renderer: new NoParagraphRenderer()});\n\nexport {singleLineRenderer};\nexport default sanitizedMarked;\n","/**\n * Remove item at `index` in `array` without mutating `array`\n */\nexport function removeAtArrayIndex<T>(array: T[], index: number): T[] {\n  const newArray = [...array];\n  newArray.splice(index, 1);\n  return newArray;\n}\n","import * as React from 'react';\nimport TextareaAutosize from 'react-autosize-textarea';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\n\nimport {inputStyles} from 'app/styles/input';\nimport space from 'app/styles/space';\n\ntype InputProps = Omit<Parameters<typeof inputStyles>[0], 'theme'>;\ntype Props = Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'css'> &\n  InputProps & {\n    /**\n     * Enable autosizing of the textarea.\n     */\n    autosize?: boolean;\n    /**\n     * Number of rows to default to.\n     */\n    rows?: number;\n    /**\n     * Max number of rows to default to.\n     */\n    maxRows?: number;\n  };\n\nconst TextAreaControl = React.forwardRef(function TextAreaControl(\n  {autosize, rows, maxRows, ...p}: Props,\n  ref: React.Ref<HTMLTextAreaElement>\n) {\n  return autosize ? (\n    <TextareaAutosize {...p} async ref={ref} rows={rows ? rows : 2} maxRows={maxRows} />\n  ) : (\n    <textarea ref={ref} {...p} />\n  );\n});\n\nTextAreaControl.displayName = 'TextAreaControl';\n\nconst propFilter = (p: string) =>\n  ['autosize', 'rows', 'maxRows'].includes(p) || isPropValid(p);\n\nconst TextArea = styled(TextAreaControl, {shouldForwardProp: propFilter})`\n  ${inputStyles};\n  min-height: 40px;\n  padding: calc(${space(1)} - 1px) ${space(1)};\n  line-height: 1.5em;\n  ${p =>\n    p.autosize &&\n    `\n      height: auto;\n      padding: calc(${space(1)} - 2px) ${space(1)};\n      line-height: 1.6em;\n    `}\n`;\n\nexport default TextArea;\n","import * as React from 'react';\n\nimport Field from 'app/views/settings/components/forms/field';\n\ntype Props = Field['props'];\n\n/**\n * This class is meant to hook into `fieldFromConfig`. Like the FieldSeparator\n * class, this doesn't have any fields of its own and is just meant to make\n * forms more flexible.\n */\nexport default class BlankField extends React.Component<Props> {\n  render() {\n    return <Field {...this.props} />;\n  }\n}\n","import {Component, Fragment} from 'react';\nimport {components} from 'react-select';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport SelectControl from 'app/components/forms/selectControl';\nimport IdBadge from 'app/components/idBadge';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {PanelAlert} from 'app/components/panels';\nimport {\n  IconAdd,\n  IconArrow,\n  IconDelete,\n  IconGeneric,\n  IconOpen,\n  IconVercel,\n} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {safeGetQsParam} from 'app/utils/integrationUtil';\nimport {removeAtArrayIndex} from 'app/utils/removeAtArrayIndex';\nimport FieldErrorReason from 'app/views/settings/components/forms/field/fieldErrorReason';\nimport FormFieldControlState from 'app/views/settings/components/forms/formField/controlState';\nimport InputField from 'app/views/settings/components/forms/inputField';\nimport FormModel from 'app/views/settings/components/forms/model';\nimport {ProjectMapperType} from 'app/views/settings/components/forms/type';\n\ntype MappedValue = string | number;\n\ntype Props = InputField['props'];\ntype RenderProps = Props & ProjectMapperType & {model: FormModel};\n\ntype State = {\n  selectedSentryProjectId: number | null;\n  selectedMappedValue: MappedValue | null;\n};\n\n// Get the icon\nconst getIcon = (iconType: string) => {\n  switch (iconType) {\n    case 'vercel':\n      return <IconVercel />;\n    default:\n      return <IconGeneric />;\n  }\n};\n\nexport class RenderField extends Component<RenderProps, State> {\n  state: State = {selectedSentryProjectId: null, selectedMappedValue: null};\n\n  render() {\n    const {\n      onChange,\n      onBlur,\n      value: incomingValues,\n      sentryProjects,\n      mappedDropdown: {items: mappedDropdownItems, placeholder: mappedValuePlaceholder},\n      nextButton: {text: nextButtonText, description: nextDescription, allowedDomain},\n      iconType,\n      model,\n      id: formElementId,\n      error,\n    } = this.props;\n    const existingValues: Array<[number, MappedValue]> = incomingValues || [];\n    const nextUrlOrArray = safeGetQsParam('next');\n    let nextUrl = Array.isArray(nextUrlOrArray) ? nextUrlOrArray[0] : nextUrlOrArray;\n\n    if (nextUrl && !nextUrl.startsWith(allowedDomain)) {\n      // eslint-disable-next-line no-console\n      console.warn(`Got unexpected next url: ${nextUrl}`);\n      nextUrl = undefined;\n    }\n\n    const {selectedSentryProjectId, selectedMappedValue} = this.state;\n\n    // create maps by the project id for constant time lookups\n    const sentryProjectsById = Object.fromEntries(\n      sentryProjects.map(project => [project.id, project])\n    );\n\n    const mappedItemsByValue = Object.fromEntries(\n      mappedDropdownItems.map(item => [item.value, item])\n    );\n\n    // build sets of values used so we don't let the user select them twice\n    const projectIdsUsed = new Set(existingValues.map(tuple => tuple[0]));\n    const mappedValuesUsed = new Set(existingValues.map(tuple => tuple[1]));\n\n    const projectOptions = sentryProjects\n      .filter(project => !projectIdsUsed.has(project.id))\n      .map(({slug, id}) => ({label: slug, value: id}));\n\n    const mappedItemsToShow = mappedDropdownItems.filter(\n      item => !mappedValuesUsed.has(item.value)\n    );\n\n    const handleSelectProject = ({value}: {value: number}) => {\n      this.setState({selectedSentryProjectId: value});\n    };\n\n    const handleSelectMappedValue = ({value}: {value: MappedValue}) => {\n      this.setState({selectedMappedValue: value});\n    };\n\n    const handleAdd = () => {\n      // add the new value to the list of existing values\n      const projectMappings = [\n        ...existingValues,\n        [selectedSentryProjectId, selectedMappedValue],\n      ];\n      // trigger events so we save the value and show the check mark\n      onChange?.(projectMappings, []);\n      onBlur?.(projectMappings, []);\n      this.setState({selectedSentryProjectId: null, selectedMappedValue: null});\n    };\n\n    const handleDelete = (index: number) => {\n      const projectMappings = removeAtArrayIndex(existingValues, index);\n      // trigger events so we save the value and show the check mark\n      onChange?.(projectMappings, []);\n      onBlur?.(projectMappings, []);\n    };\n\n    const renderItem = (itemTuple: [number, any], index: number) => {\n      const [projectId, mappedValue] = itemTuple;\n      const project = sentryProjectsById[projectId];\n      // TODO: add special formatting if deleted\n      const mappedItem = mappedItemsByValue[mappedValue];\n      return (\n        <Item key={index}>\n          <MappedProjectWrapper>\n            {project ? (\n              <IdBadge\n                project={project}\n                avatarSize={20}\n                displayName={project.slug}\n                avatarProps={{consistentWidth: true}}\n              />\n            ) : (\n              t('Deleted')\n            )}\n            <IconArrow size=\"xs\" direction=\"right\" />\n          </MappedProjectWrapper>\n          <MappedItemValue>\n            {mappedItem ? (\n              <Fragment>\n                <IntegrationIconWrapper>{getIcon(iconType)}</IntegrationIconWrapper>\n                {mappedItem.label}\n                <StyledExternalLink href={mappedItem.url}>\n                  <IconOpen size=\"xs\" />\n                </StyledExternalLink>\n              </Fragment>\n            ) : (\n              t('Deleted')\n            )}\n          </MappedItemValue>\n          <DeleteButtonWrapper>\n            <Button\n              onClick={() => handleDelete(index)}\n              icon={<IconDelete color=\"gray300\" />}\n              size=\"small\"\n              type=\"button\"\n              aria-label={t('Delete')}\n            />\n          </DeleteButtonWrapper>\n        </Item>\n      );\n    };\n\n    const customValueContainer = containerProps => {\n      // if no value set, we want to return the default component that is rendered\n      const project = sentryProjectsById[selectedSentryProjectId || ''];\n      if (!project) {\n        return <components.ValueContainer {...containerProps} />;\n      }\n      return (\n        <components.ValueContainer {...containerProps}>\n          <IdBadge\n            project={project}\n            avatarSize={20}\n            displayName={project.slug}\n            avatarProps={{consistentWidth: true}}\n            disableLink\n          />\n        </components.ValueContainer>\n      );\n    };\n\n    const customOptionProject = projectProps => {\n      const project = sentryProjectsById[projectProps.value];\n      // Should never happen for a dropdown item\n      if (!project) {\n        return null;\n      }\n      return (\n        <components.Option {...projectProps}>\n          <IdBadge\n            project={project}\n            avatarSize={20}\n            displayName={project.slug}\n            avatarProps={{consistentWidth: true}}\n            disableLink\n          />\n        </components.Option>\n      );\n    };\n\n    const customMappedValueContainer = containerProps => {\n      // if no value set, we want to return the default component that is rendered\n      const mappedValue = mappedItemsByValue[selectedMappedValue || ''];\n      if (!mappedValue) {\n        return <components.ValueContainer {...containerProps} />;\n      }\n      return (\n        <components.ValueContainer {...containerProps}>\n          <IntegrationIconWrapper>{getIcon(iconType)}</IntegrationIconWrapper>\n          <OptionLabelWrapper>{mappedValue.label}</OptionLabelWrapper>\n        </components.ValueContainer>\n      );\n    };\n\n    const customOptionMappedValue = optionProps => {\n      return (\n        <components.Option {...optionProps}>\n          <OptionWrapper>\n            <IntegrationIconWrapper>{getIcon(iconType)}</IntegrationIconWrapper>\n            <OptionLabelWrapper>{optionProps.label}</OptionLabelWrapper>\n          </OptionWrapper>\n        </components.Option>\n      );\n    };\n\n    return (\n      <Fragment>\n        {existingValues.map(renderItem)}\n        <Item>\n          <SelectControl\n            placeholder={t('Sentry project\\u2026')}\n            name=\"project\"\n            options={projectOptions}\n            components={{\n              Option: customOptionProject,\n              ValueContainer: customValueContainer,\n            }}\n            onChange={handleSelectProject}\n            value={selectedSentryProjectId}\n          />\n          <SelectControl\n            placeholder={mappedValuePlaceholder}\n            name=\"mappedDropdown\"\n            options={mappedItemsToShow}\n            components={{\n              Option: customOptionMappedValue,\n              ValueContainer: customMappedValueContainer,\n            }}\n            onChange={handleSelectMappedValue}\n            value={selectedMappedValue}\n          />\n          <AddProjectWrapper>\n            <Button\n              type=\"button\"\n              disabled={!selectedSentryProjectId || !selectedMappedValue}\n              size=\"small\"\n              priority=\"primary\"\n              onClick={handleAdd}\n              icon={<IconAdd />}\n            />\n          </AddProjectWrapper>\n          <FieldControlWrapper>\n            {formElementId && (\n              <div>\n                <FormFieldControlState model={model} name={formElementId} />\n                {error ? <StyledFieldErrorReason>{error}</StyledFieldErrorReason> : null}\n              </div>\n            )}\n          </FieldControlWrapper>\n        </Item>\n        {nextUrl && (\n          <NextButtonPanelAlert icon={false} type=\"muted\">\n            <NextButtonWrapper>\n              {nextDescription ?? ''}\n              <Button\n                type=\"button\"\n                size=\"small\"\n                priority=\"primary\"\n                icon={<IconOpen size=\"xs\" color=\"white\" />}\n                href={nextUrl}\n              >\n                {nextButtonText}\n              </Button>\n            </NextButtonWrapper>\n          </NextButtonPanelAlert>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst ProjectMapperField = (props: Props) => (\n  <StyledInputField\n    {...props}\n    resetOnError\n    inline={false}\n    stacked={false}\n    hideControlState\n    field={(renderProps: RenderProps) => <RenderField {...renderProps} />}\n  />\n);\n\nexport default ProjectMapperField;\n\nconst MappedProjectWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-right: ${space(1)};\n`;\n\nconst Item = styled('div')`\n  min-height: 60px;\n  padding: ${space(2)};\n\n  &:not(:last-child) {\n    border-bottom: 1px solid ${p => p.theme.innerBorder};\n  }\n\n  display: grid;\n  grid-column-gap: ${space(1)};\n  align-items: center;\n  grid-template-columns: 2.5fr 2.5fr max-content 30px;\n  grid-template-areas: 'sentry-project mapped-value manage-project field-control';\n`;\n\nconst MappedItemValue = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-auto-columns: max-content;\n  align-items: center;\n  grid-gap: ${space(1)};\n  width: 100%;\n`;\n\nconst DeleteButtonWrapper = styled('div')`\n  grid-area: manage-project;\n`;\n\nconst IntegrationIconWrapper = styled('span')`\n  display: flex;\n  align-items: center;\n`;\n\nconst AddProjectWrapper = styled('div')`\n  grid-area: manage-project;\n`;\n\nconst OptionLabelWrapper = styled('div')`\n  margin-left: ${space(0.5)};\n`;\n\nconst StyledInputField = styled(InputField)`\n  padding: 0;\n`;\n\nconst StyledExternalLink = styled(ExternalLink)`\n  display: flex;\n`;\n\nconst OptionWrapper = styled('div')`\n  align-items: center;\n  display: flex;\n`;\n\nconst FieldControlWrapper = styled('div')`\n  position: relative;\n  grid-area: field-control;\n`;\n\nconst NextButtonPanelAlert = styled(PanelAlert)`\n  align-items: center;\n  margin-bottom: -1px;\n  border-bottom-left-radius: ${p => p.theme.borderRadius};\n  border-bottom-right-radius: ${p => p.theme.borderRadius};\n`;\n\nconst NextButtonWrapper = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  grid-gap: ${space(1)};\n  align-items: center;\n`;\n\nconst StyledFieldErrorReason = styled(FieldErrorReason)``;\n","import * as React from 'react';\n\nimport SelectAsyncControl from 'app/components/forms/selectAsyncControl';\nimport InputField from 'app/views/settings/components/forms/inputField';\n\n// projects can be passed as a direct prop as well\ntype Props = Omit<InputField['props'], 'highlighted' | 'visible' | 'required'>;\n\nexport type SelectAsyncFieldProps = React.ComponentPropsWithoutRef<\n  typeof SelectAsyncControl\n> &\n  Props;\n\nclass SelectAsyncField extends React.Component<SelectAsyncFieldProps> {\n  state = {\n    results: [],\n  };\n  // need to map the option object to the value\n  // this is essentially the same code from ./selectField handleChange()\n  handleChange = (\n    onBlur: Props['onBlur'],\n    onChange: Props['onChange'],\n    optionObj: {value: string | any[]},\n    event: React.MouseEvent\n  ) => {\n    let {value} = optionObj;\n    if (!optionObj) {\n      value = optionObj;\n    } else if (this.props.multiple && Array.isArray(optionObj)) {\n      // List of optionObjs\n      value = optionObj.map(({value: val}) => val);\n    } else if (!Array.isArray(optionObj)) {\n      value = optionObj.value;\n    }\n    onChange?.(value, event);\n    onBlur?.(value, event);\n  };\n\n  findValue(propsValue) {\n    /**\n     * The propsValue is the `id` of the object (user, team, etc), and\n     * react-select expects a full value object: {value: \"id\", label: \"name\"}\n     *\n     * Returning {} here will show the user a dropdown with \"No options\".\n     **/\n    return this.state.results.find(({value}) => value === propsValue) || {};\n  }\n\n  render() {\n    const {...otherProps} = this.props;\n    return (\n      <InputField\n        {...otherProps}\n        field={({onChange, onBlur, required: _required, onResults, value, ...props}) => (\n          <SelectAsyncControl\n            {...props}\n            onChange={this.handleChange.bind(this, onBlur, onChange)}\n            onResults={data => {\n              const results = onResults(data);\n              this.setState({results});\n              return results;\n            }}\n            onSelectResetsInput\n            onCloseResetsInput={false}\n            onBlurResetsInput={false}\n            value={this.findValue(value)}\n          />\n        )}\n      />\n    );\n  }\n}\n\nexport default SelectAsyncField;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport flatten from 'lodash/flatten';\n\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport {IconAdd, IconDelete} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {defined, objectIsEmpty} from 'app/utils';\nimport {singleLineRenderer} from 'app/utils/marked';\nimport Input from 'app/views/settings/components/forms/controls/input';\nimport InputField from 'app/views/settings/components/forms/inputField';\nimport {TableType} from 'app/views/settings/components/forms/type';\n\nconst defaultProps = {\n  /**\n   * Text used for the 'add' button. An empty string can be used\n   * to just render the \"+\" icon.\n   */\n  addButtonText: t('Add Item'),\n  /**\n   * Automatically save even if fields are empty\n   */\n  allowEmpty: false,\n};\n\ntype DefaultProps = Readonly<typeof defaultProps>;\ntype Props = InputField['props'];\ntype RenderProps = Props & DefaultProps & TableType;\n\nexport default class TableField extends React.Component<Props> {\n  static defaultProps = defaultProps;\n\n  hasValue = value => defined(value) && !objectIsEmpty(value);\n\n  renderField = (props: RenderProps) => {\n    const {\n      onChange,\n      onBlur,\n      addButtonText,\n      columnLabels,\n      columnKeys,\n      disabled: rawDisabled,\n      allowEmpty,\n      confirmDeleteMessage,\n    } = props;\n\n    const mappedKeys = columnKeys || [];\n    const emptyValue = mappedKeys.reduce((a, v) => ({...a, [v]: null}), {id: ''});\n\n    const valueIsEmpty = this.hasValue(props.value);\n    const value = valueIsEmpty ? (props.value as any[]) : [];\n\n    const saveChanges = (nextValue: object[]) => {\n      onChange?.(nextValue, []);\n\n      // nextValue is an array of ObservableObjectAdministration objects\n      const validValues = !flatten(Object.values(nextValue).map(Object.entries)).some(\n        ([key, val]) => key !== 'id' && !val // don't allow empty values except if it's the ID field\n      );\n\n      if (allowEmpty || validValues) {\n        // TOOD: add debouncing or use a form save button\n        onBlur?.(nextValue, []);\n      }\n    };\n\n    const addRow = () => {\n      saveChanges([...value, emptyValue]);\n    };\n\n    const removeRow = rowIndex => {\n      const newValue = [...value];\n      newValue.splice(rowIndex, 1);\n      saveChanges(newValue);\n    };\n\n    const setValue = (\n      rowIndex: number,\n      fieldKey: string,\n      fieldValue: React.FormEvent<HTMLInputElement>\n    ) => {\n      const newValue = [...value];\n      newValue[rowIndex][fieldKey] = fieldValue.currentTarget\n        ? fieldValue.currentTarget.value\n        : null;\n      saveChanges(newValue);\n    };\n\n    // should not be a function for this component\n    const disabled = typeof rawDisabled === 'function' ? false : rawDisabled;\n\n    const button = (\n      <Button\n        icon={<IconAdd size=\"xs\" isCircled />}\n        onClick={addRow}\n        size=\"xsmall\"\n        disabled={disabled}\n      >\n        {addButtonText}\n      </Button>\n    );\n\n    // The field will be set to inline when there is no value set for the\n    // field, just show the button.\n    if (!valueIsEmpty) {\n      return <div>{button}</div>;\n    }\n\n    const renderConfirmMessage = () => {\n      return (\n        <React.Fragment>\n          <Alert type=\"error\">\n            <span\n              dangerouslySetInnerHTML={{\n                __html: singleLineRenderer(\n                  confirmDeleteMessage || t('Are you sure you want to delete this item?')\n                ),\n              }}\n            />\n          </Alert>\n        </React.Fragment>\n      );\n    };\n\n    return (\n      <React.Fragment>\n        <HeaderContainer>\n          {mappedKeys.map((fieldKey, i) => (\n            <Header key={fieldKey}>\n              <HeaderLabel>{columnLabels?.[fieldKey]}</HeaderLabel>\n              {i === mappedKeys.length - 1 && button}\n            </Header>\n          ))}\n        </HeaderContainer>\n        {value.map((row, rowIndex) => (\n          <RowContainer data-test-id=\"field-row\" key={rowIndex}>\n            {mappedKeys.map((fieldKey: string, i: number) => (\n              <Row key={fieldKey}>\n                <RowInput>\n                  <Input\n                    onChange={v => setValue(rowIndex, fieldKey, v)}\n                    value={!defined(row[fieldKey]) ? '' : row[fieldKey]}\n                  />\n                </RowInput>\n                {i === mappedKeys.length - 1 && (\n                  <Confirm\n                    priority=\"danger\"\n                    disabled={disabled}\n                    onConfirm={() => removeRow(rowIndex)}\n                    message={renderConfirmMessage()}\n                  >\n                    <RemoveButton>\n                      <Button\n                        icon={<IconDelete />}\n                        size=\"small\"\n                        disabled={disabled}\n                        label={t('delete')}\n                      />\n                    </RemoveButton>\n                  </Confirm>\n                )}\n              </Row>\n            ))}\n          </RowContainer>\n        ))}\n      </React.Fragment>\n    );\n  };\n\n  render() {\n    // We need formatMessageValue=false since we're saving an object\n    // and there isn't a great way to render the\n    // change within the toast. Just turn off displaying the from/to portion of\n    // the message\n    return (\n      <InputField\n        {...this.props}\n        formatMessageValue={false}\n        inline={({model}) => !this.hasValue(model.getValue(this.props.name))}\n        field={this.renderField}\n      />\n    );\n  }\n}\n\nconst HeaderLabel = styled('div')`\n  font-size: 0.8em;\n  text-transform: uppercase;\n  color: ${p => p.theme.subText};\n`;\n\nconst HeaderContainer = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Header = styled('div')`\n  display: flex;\n  flex: 1 0 0;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst RowContainer = styled('div')`\n  display: flex;\n  align-items: center;\n  margin-top: ${space(1)};\n`;\n\nconst Row = styled('div')`\n  display: flex;\n  flex: 1 0 0;\n  align-items: center;\n  margin-top: ${space(1)};\n`;\n\nconst RowInput = styled('div')`\n  flex: 1;\n  margin-right: ${space(1)};\n`;\n\nconst RemoveButton = styled('div')`\n  margin-left: ${space(1)};\n`;\n","import {Component} from 'react';\n\nimport {Scope} from 'app/types';\n\nimport BlankField from './blankField';\nimport BooleanField from './booleanField';\nimport ChoiceMapperField from './choiceMapperField';\nimport EmailField from './emailField';\nimport FieldSeparator from './fieldSeparator';\nimport HiddenField from './hiddenField';\nimport InputField from './inputField';\nimport NumberField from './numberField';\nimport ProjectMapperField from './projectMapperField';\nimport RadioField from './radioField';\nimport RangeField from './rangeField';\nimport SelectAsyncField from './selectAsyncField';\nimport SelectField from './selectField';\nimport SentryProjectSelectorField from './sentryProjectSelectorField';\nimport TableField from './tableField';\nimport TextareaField from './textareaField';\nimport TextField from './textField';\nimport {Field} from './type';\n\ntype Props = {\n  field: Field;\n  highlighted?: boolean;\n  disabled?: boolean | ((props) => boolean);\n  flexibleControlStateSize?: boolean;\n  getData?: (data) => any;\n  stacked?: boolean;\n  inline?: boolean;\n  onBlur?: (value, event) => void;\n  access?: Set<Scope>;\n  noOptionsMessage?: () => string;\n};\n\nexport default class FieldFromConfig extends Component<Props> {\n  render() {\n    const {field, ...otherProps} = this.props;\n\n    const props = {\n      ...otherProps,\n      ...field,\n    };\n\n    switch (field.type) {\n      case 'separator':\n        return <FieldSeparator />;\n      case 'secret':\n        return <InputField {...props} type=\"password\" />;\n      case 'range':\n        // TODO(ts) The switch on field.type is not resolving\n        // the Field union for this component. The union might be 'too big'.\n        return <RangeField {...(props as any)} />;\n      case 'blank':\n        return <BlankField {...props} />;\n      case 'bool':\n      case 'boolean':\n        return <BooleanField {...props} />;\n      case 'email':\n        return <EmailField {...props} />;\n      case 'hidden':\n        return <HiddenField {...props} />;\n      case 'string':\n      case 'text':\n      case 'url':\n        if (props.multiline) {\n          return <TextareaField {...props} />;\n        }\n        return <TextField {...props} />;\n      case 'number':\n        return <NumberField {...props} />;\n      case 'textarea':\n        return <TextareaField {...props} />;\n      case 'choice':\n      case 'select':\n      case 'array':\n        return <SelectField {...props} />;\n      case 'choice_mapper':\n        // TODO(ts) The switch on field.type is not resolving\n        // the Field union for this component. The union might be 'too big'.\n        return <ChoiceMapperField {...(props as any)} />;\n      case 'radio':\n        const choices = props.choices;\n        if (!Array.isArray(choices)) {\n          throw new Error('Invalid `choices` type. Use an array of options');\n        }\n        return <RadioField {...props} choices={choices} />;\n      case 'table':\n        // TODO(ts) The switch on field.type is not resolving\n        // the Field union for this component. The union might be 'too big'.\n        return <TableField {...(props as any)} />;\n      case 'project_mapper':\n        return <ProjectMapperField {...props} />;\n      case 'sentry_project_selector':\n        return <SentryProjectSelectorField {...props} />;\n      case 'select_async':\n        return <SelectAsyncField {...props} />;\n      case 'custom':\n        return field.Component(props);\n      default:\n        return null;\n    }\n  }\n}\n","import * as React from 'react';\n\nimport RadioGroup from 'app/views/settings/components/forms/controls/radioGroup';\nimport InputField, {onEvent} from 'app/views/settings/components/forms/inputField';\n\ntype RadioGroupProps = React.ComponentProps<typeof RadioGroup>;\n\ntype Props = Omit<InputField['props'], 'type'> &\n  Pick<RadioGroupProps, 'choices' | 'orientInline'>;\n\nclass RadioField extends React.Component<Props> {\n  onChange = (\n    id: string,\n    onChange: onEvent,\n    onBlur: onEvent,\n    e: React.FormEvent<HTMLInputElement>\n  ) => {\n    onChange(id, e);\n    onBlur(id, e);\n  };\n\n  render() {\n    return (\n      <InputField\n        {...this.props}\n        field={({onChange, onBlur, value, disabled, orientInline, ...props}) => (\n          <RadioGroup\n            choices={props.choices}\n            disabled={disabled}\n            orientInline={orientInline}\n            value={value === '' ? null : value}\n            label={props.label}\n            onChange={(id, e) => this.onChange(id, onChange, onBlur, e)}\n          />\n        )}\n      />\n    );\n  }\n}\n\nexport default RadioField;\n","import * as React from 'react';\nimport {components} from 'react-select';\n\nimport SelectControl from 'app/components/forms/selectControl';\nimport IdBadge from 'app/components/idBadge';\nimport {t} from 'app/locale';\nimport {Project} from 'app/types';\nimport InputField from 'app/views/settings/components/forms/inputField';\n\nconst defaultProps = {\n  avatarSize: 20,\n  placeholder: t('Choose Sentry project'),\n};\n\n// projects can be passed as a direct prop as well\ntype Props = {projects?: Project[]} & InputField['props'];\n\ntype RenderProps = {\n  projects: Project[]; // can't use AvatarProject since we need the ID\n} & Omit<Partial<Readonly<typeof defaultProps>>, 'placeholder'> &\n  Props;\n\nclass RenderField extends React.Component<RenderProps> {\n  static defaultProps = defaultProps;\n\n  // need to map the option object to the value\n  handleChange = (\n    onBlur: Props['onBlur'],\n    onChange: Props['onChange'],\n    optionObj: {value: any},\n    event: React.MouseEvent\n  ) => {\n    const {value} = optionObj;\n    onChange?.(value, event);\n    onBlur?.(value, event);\n  };\n\n  render() {\n    const {projects, avatarSize, onChange, onBlur, ...rest} = this.props;\n\n    const projectOptions = projects.map(({slug, id}) => ({value: id, label: slug}));\n\n    const customOptionProject = projectProps => {\n      const project = projects.find(proj => proj.id === projectProps.value);\n      // shouldn't happen but need to account for it\n      if (!project) {\n        return <components.Option {...projectProps} />;\n      }\n      return (\n        <components.Option {...projectProps}>\n          <IdBadge\n            project={project}\n            avatarSize={avatarSize}\n            displayName={project.slug}\n            avatarProps={{consistentWidth: true}}\n          />\n        </components.Option>\n      );\n    };\n\n    const customValueContainer = containerProps => {\n      const selectedValue = containerProps.getValue()[0];\n      const project = projects.find(proj => proj.id === selectedValue?.value);\n      // shouldn't happen but need to account for it\n      if (!project) {\n        return <components.ValueContainer {...containerProps} />;\n      }\n      return (\n        <components.ValueContainer {...containerProps}>\n          <IdBadge\n            project={project}\n            avatarSize={avatarSize}\n            displayName={project.slug}\n            avatarProps={{consistentWidth: true}}\n          />\n        </components.ValueContainer>\n      );\n    };\n\n    return (\n      <SelectControl\n        options={projectOptions}\n        components={{\n          Option: customOptionProject,\n          SingleValue: customValueContainer,\n        }}\n        {...rest}\n        onChange={this.handleChange.bind(this, onBlur, onChange)}\n      />\n    );\n  }\n}\n\nconst SentryProjectSelectorField = (props: Props) => (\n  <InputField\n    {...props}\n    field={(renderProps: RenderProps) => <RenderField {...renderProps} />}\n  />\n);\n\nexport default SentryProjectSelectorField;\n"],"names":["safeLinkPattern","safeImagePattern","isSafeHref","href","pattern","test","decodeURIComponent","unescape","SafeRenderer","marked","link","title","text","out","dompurify","image","this","options","sanitize","NoParagraphRenderer","paragraph","renderer","silent","IS_ACCEPTANCE_TEST","NODE_ENV","sanitizedMarked","args","singleLineRenderer","removeAtArrayIndex","array","index","newArray","splice","TextAreaControl","React","autosize","rows","maxRows","p","ref","async","displayName","shouldForwardProp","includes","isPropValid","inputStyles","space","BlankField","render","props","getIcon","iconType","RenderField","Component","selectedSentryProjectId","selectedMappedValue","onChange","onBlur","value","incomingValues","sentryProjects","mappedDropdown","items","mappedDropdownItems","placeholder","mappedValuePlaceholder","nextButton","nextButtonText","description","nextDescription","allowedDomain","model","id","formElementId","error","existingValues","nextUrlOrArray","safeGetQsParam","nextUrl","Array","isArray","startsWith","console","warn","undefined","state","sentryProjectsById","Object","fromEntries","map","project","mappedItemsByValue","item","projectIdsUsed","Set","tuple","mappedValuesUsed","projectOptions","filter","has","slug","label","mappedItemsToShow","Fragment","itemTuple","projectId","mappedValue","mappedItem","Item","MappedProjectWrapper","avatarSize","avatarProps","consistentWidth","t","size","direction","MappedItemValue","IntegrationIconWrapper","StyledExternalLink","url","DeleteButtonWrapper","onClick","projectMappings","handleDelete","icon","color","type","name","components","Option","projectProps","disableLink","ValueContainer","containerProps","setState","optionProps","OptionWrapper","OptionLabelWrapper","AddProjectWrapper","disabled","priority","FieldControlWrapper","StyledFieldErrorReason","NextButtonPanelAlert","NextButtonWrapper","ProjectMapperField","StyledInputField","resetOnError","inline","stacked","hideControlState","field","renderProps","theme","innerBorder","InputField","ExternalLink","PanelAlert","borderRadius","FieldErrorReason","SelectAsyncField","results","optionObj","event","multiple","val","findValue","propsValue","find","otherProps","required","_required","onResults","handleChange","bind","data","onSelectResetsInput","onCloseResetsInput","onBlurResetsInput","defaultProps","addButtonText","allowEmpty","TableField","defined","objectIsEmpty","columnLabels","columnKeys","rawDisabled","confirmDeleteMessage","mappedKeys","emptyValue","reduce","a","v","valueIsEmpty","hasValue","saveChanges","nextValue","validValues","flatten","values","entries","some","key","button","isCircled","HeaderContainer","fieldKey","i","Header","HeaderLabel","length","row","rowIndex","RowContainer","Row","RowInput","fieldValue","newValue","currentTarget","setValue","onConfirm","removeRow","message","dangerouslySetInnerHTML","__html","RemoveButton","formatMessageValue","getValue","renderField","subText","FieldFromConfig","multiline","choices","Error","RadioField","e","orientInline","projects","rest","proj","SingleValue","selectedValue","SentryProjectSelectorField"],"sourceRoot":""}