{"version":3,"file":"chunks/app_views_settings_project_projectUserFeedback_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/data/forms/userFeedback.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/project/projectUserFeedback.tsx"],"sourcesContent":["import {JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/user-feedback/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Settings',\n    fields: [\n      {\n        name: 'feedback:branding',\n        type: 'boolean',\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Show Sentry Branding',\n        placeholder: 'e.g. secondary@example.com',\n        help: 'Show \"powered by Sentry within the feedback dialog. We appreciate you helping get the word out about Sentry! <3',\n        getData: data => ({options: data}),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport Access from 'app/components/acl/access';\nimport Button from 'app/components/button';\nimport formGroups from 'app/data/forms/userFeedback';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\ntype Props = RouteComponentProps<RouteParams, {}>;\n\nclass ProjectUserFeedbackSettings extends AsyncView<Props> {\n  componentDidMount() {\n    window.sentryEmbedCallback = function (embed) {\n      // Mock the embed's submit xhr to always be successful\n      // NOTE: this will not have errors if the form is empty\n      embed.submit = function (_body) {\n        this._submitInProgress = true;\n        setTimeout(() => {\n          this._submitInProgress = false;\n          this.onSuccess();\n        }, 500);\n      };\n    };\n  }\n\n  componentWillUnmount() {\n    window.sentryEmbedCallback = null;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [\n      ['keyList', `/projects/${orgId}/${projectId}/keys/`],\n      ['project', `/projects/${orgId}/${projectId}/`],\n    ];\n  }\n\n  getTitle(): string {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('User Feedback'), projectId, false);\n  }\n\n  handleClick = () => {\n    Sentry.showReportDialog({\n      // should never make it to the Sentry API, but just in case, use throwaway id\n      eventId: '00000000000000000000000000000000',\n    });\n  };\n\n  renderBody() {\n    const {orgId, projectId} = this.props.params;\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('User Feedback')} />\n        <TextBlock>\n          {t(\n            `Don't rely on stack traces and graphs alone to understand\n            the cause and impact of errors. Enable User Feedback to collect\n            your users' comments when they encounter a crash or bug.`\n          )}\n        </TextBlock>\n        <TextBlock>\n          {t(\n            `When configured, your users will be presented with a dialog prompting\n            them for additional information. That information will get attached to\n            the issue in Sentry.`\n          )}\n        </TextBlock>\n        <ButtonList>\n          <Button external href=\"https://docs.sentry.io/product/user-feedback/\">\n            {t('Read the docs')}\n          </Button>\n          <Button priority=\"primary\" onClick={this.handleClick}>\n            {t('Open the report dialog')}\n          </Button>\n        </ButtonList>\n\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint={`/projects/${orgId}/${projectId}/`}\n          initialData={this.state.project.options}\n        >\n          <Access access={['project:write']}>\n            {({hasAccess}) => <JsonForm disabled={!hasAccess} forms={formGroups} />}\n          </Access>\n        </Form>\n      </div>\n    );\n  }\n}\n\nconst ButtonList = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n  margin-bottom: ${space(2)};\n`;\n\nexport default ProjectUserFeedbackSettings;\n"],"names":["route","title","fields","name","type","label","placeholder","help","getData","data","options","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","this","renderComponent","FormPanel","React","access","disabled","additionalFieldProps","renderFooter","renderHeader","otherProps","props","id","sanitizeQuerySelector","undefined","map","field","defaultValue","_","fieldWithoutDefaultValue","disabledReason","highlighted","JsonForm","location","hash","componentDidMount","scrollToHash","UNSAFE_componentWillReceiveProps","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","shouldDisplayForm","fieldsWithVisibleProp","filter","defined","visible","length","every","renderForm","formPanelProps","forms","features","_location","state","formGroup","i","withRouter","ProjectUserFeedbackSettings","eventId","window","sentryEmbedCallback","embed","submit","_body","_submitInProgress","setTimeout","onSuccess","componentWillUnmount","getEndpoints","orgId","projectId","params","routeTitleGen","t","renderBody","ButtonList","external","href","priority","onClick","handleClick","saveOnBlur","apiMethod","apiEndpoint","initialData","project","hasAccess","formGroups","space"],"sourceRoot":""}