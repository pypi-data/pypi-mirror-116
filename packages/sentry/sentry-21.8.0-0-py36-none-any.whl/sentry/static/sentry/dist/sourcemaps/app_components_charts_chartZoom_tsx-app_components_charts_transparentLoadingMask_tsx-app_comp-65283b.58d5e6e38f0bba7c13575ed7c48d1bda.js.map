{"version":3,"file":"chunks/app_components_charts_chartZoom_tsx-app_components_charts_transparentLoadingMask_tsx-app_comp-65283b.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/charts/chartZoom.tsx","webpack:///./app/components/charts/transparentLoadingMask.tsx","webpack:///./app/components/globalSdkUpdateAlert.tsx","webpack:///./app/views/performance/onboarding.tsx"],"sourcesContent":["import * as React from 'react';\nimport {WithRouterProps} from 'react-router/lib/withRouter';\nimport {EChartOption} from 'echarts/lib/echarts';\nimport moment from 'moment';\nimport * as qs from 'query-string';\n\nimport {updateDateTime} from 'app/actionCreators/globalSelection';\nimport DataZoomInside from 'app/components/charts/components/dataZoomInside';\nimport ToolBox from 'app/components/charts/components/toolBox';\nimport {DateString} from 'app/types';\nimport {\n  EChartChartReadyHandler,\n  EChartDataZoomHandler,\n  EChartFinishedHandler,\n  EChartRestoreHandler,\n} from 'app/types/echarts';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {getUtcDateString, getUtcToLocalDateObject} from 'app/utils/dates';\n\nconst getDate = date =>\n  date ? moment.utc(date).format(moment.HTML5_FMT.DATETIME_LOCAL_SECONDS) : null;\n\ntype Period = {\n  period: string;\n  start: DateString;\n  end: DateString;\n};\n\nconst ZoomPropKeys = [\n  'period',\n  'xAxis',\n  'onChartReady',\n  'onDataZoom',\n  'onRestore',\n  'onFinished',\n] as const;\n\nexport type ZoomRenderProps = Pick<Props, typeof ZoomPropKeys[number]> & {\n  utc?: boolean;\n  start?: Date;\n  end?: Date;\n  isGroupedByDate?: boolean;\n  showTimeInTooltip?: boolean;\n  dataZoom?: EChartOption.DataZoom[];\n  toolBox?: EChartOption['toolbox'];\n};\n\ntype Props = {\n  router?: WithRouterProps['router'];\n  children: (props: ZoomRenderProps) => React.ReactNode;\n  disabled?: boolean;\n  xAxis?: EChartOption.XAxis;\n  xAxisIndex?: number | number[];\n  start?: DateString;\n  end?: DateString;\n  period?: string;\n  utc?: boolean | null;\n  onChartReady?: EChartChartReadyHandler;\n  onDataZoom?: EChartDataZoomHandler;\n  onFinished?: EChartFinishedHandler;\n  onRestore?: EChartRestoreHandler;\n  onZoom?: (period: Period) => void;\n  usePageDate?: boolean;\n};\n\n/**\n * This is a very opinionated component that takes a render prop through `children`. It\n * will provide props to be passed to `BaseChart` to enable support of zooming without\n * eCharts' clunky zoom toolboxes.\n *\n * This also is very tightly coupled with the Global Selection Header. We can make it more\n * generic if need be in the future.\n */\nclass ChartZoom extends React.Component<Props> {\n  constructor(props) {\n    super(props);\n\n    // Zoom history\n    this.history = [];\n\n    // Initialize current period instance state for zoom history\n    this.saveCurrentPeriod(props);\n  }\n\n  componentDidUpdate() {\n    if (this.props.disabled) {\n      return;\n    }\n\n    // When component updates, make sure we sync current period state\n    // for use in zoom history\n    this.saveCurrentPeriod(this.props);\n  }\n\n  history: Period[];\n  currentPeriod?: Period;\n  zooming: (() => void) | null = null;\n\n  /**\n   * Save current period state from period in props to be used\n   * in handling chart's zoom history state\n   */\n  saveCurrentPeriod = props => {\n    this.currentPeriod = {\n      period: props.period,\n      start: getDate(props.start),\n      end: getDate(props.end),\n    };\n  };\n\n  /**\n   * Sets the new period due to a zoom related action\n   *\n   * Saves the current period to an instance property so that we\n   * can control URL state when zoom history is being manipulated\n   * by the chart controls.\n   *\n   * Saves a callback function to be called after chart animation is completed\n   */\n  setPeriod = ({period, start, end}, saveHistory = false) => {\n    const {router, onZoom, usePageDate} = this.props;\n    const startFormatted = getDate(start);\n    const endFormatted = getDate(end);\n\n    // Save period so that we can revert back to it when using echarts \"back\" navigation\n    if (saveHistory) {\n      this.history.push(this.currentPeriod!);\n    }\n\n    // Callback to let parent component know zoom has changed\n    // This is required for some more perceived responsiveness since\n    // we delay updating URL state so that chart animation can finish\n    //\n    // Parent container can use this to change into a loading state before\n    // URL parameters are changed\n    callIfFunction(onZoom, {\n      period,\n      start: startFormatted,\n      end: endFormatted,\n    });\n\n    this.zooming = () => {\n      if (usePageDate && router) {\n        const newQuery = {\n          ...router.location.query,\n          pageStart: start ? getUtcDateString(start) : undefined,\n          pageEnd: end ? getUtcDateString(end) : undefined,\n          pageStatsPeriod: period ?? undefined,\n        };\n\n        // Only push new location if query params has changed because this will cause a heavy re-render\n        if (qs.stringify(newQuery) !== qs.stringify(router.location.query)) {\n          router.push({\n            pathname: router.location.pathname,\n            query: newQuery,\n          });\n        }\n      } else {\n        updateDateTime(\n          {\n            period,\n            start: startFormatted\n              ? getUtcToLocalDateObject(startFormatted)\n              : startFormatted,\n            end: endFormatted ? getUtcToLocalDateObject(endFormatted) : endFormatted,\n          },\n          router\n        );\n      }\n\n      this.saveCurrentPeriod({period, start, end});\n    };\n  };\n\n  /**\n   * Enable zoom immediately instead of having to toggle to zoom\n   */\n  handleChartReady = chart => {\n    chart.dispatchAction({\n      type: 'takeGlobalCursor',\n      key: 'dataZoomSelect',\n      dataZoomSelectActive: true,\n    });\n\n    callIfFunction(this.props.onChartReady, chart);\n  };\n\n  /**\n   * Restores the chart to initial viewport/zoom level\n   *\n   * Updates URL state to reflect initial params\n   */\n  handleZoomRestore = (evt, chart) => {\n    if (!this.history.length) {\n      return;\n    }\n\n    this.setPeriod(this.history[0]);\n\n    // reset history\n    this.history = [];\n\n    callIfFunction(this.props.onRestore, evt, chart);\n  };\n\n  handleDataZoom = (evt, chart) => {\n    const model = chart.getModel();\n    const {xAxis} = model.option;\n    const axis = xAxis[0];\n\n    // if `rangeStart` and `rangeEnd` are null, then we are going back\n    if (axis.rangeStart === null && axis.rangeEnd === null) {\n      const previousPeriod = this.history.pop();\n\n      if (!previousPeriod) {\n        return;\n      }\n\n      this.setPeriod(previousPeriod);\n    } else {\n      const start = moment.utc(axis.rangeStart);\n\n      // Add a day so we go until the end of the day (e.g. next day at midnight)\n      const end = moment.utc(axis.rangeEnd);\n\n      this.setPeriod({period: null, start, end}, true);\n    }\n\n    callIfFunction(this.props.onDataZoom, evt, chart);\n  };\n\n  /**\n   * Chart event when *any* rendering+animation finishes\n   *\n   * `this.zooming` acts as a callback function so that\n   * we can let the native zoom animation on the chart complete\n   * before we update URL state and re-render\n   */\n  handleChartFinished = () => {\n    if (typeof this.zooming === 'function') {\n      this.zooming();\n      this.zooming = null;\n    }\n    callIfFunction(this.props.onFinished);\n  };\n\n  render() {\n    const {\n      utc: _utc,\n      start: _start,\n      end: _end,\n      disabled,\n      children,\n      xAxisIndex,\n\n      router: _router,\n      onZoom: _onZoom,\n      onRestore: _onRestore,\n      onChartReady: _onChartReady,\n      onDataZoom: _onDataZoom,\n      onFinished: _onFinished,\n      ...props\n    } = this.props;\n\n    const utc = _utc ?? undefined;\n    const start = _start ? getUtcToLocalDateObject(_start) : undefined;\n    const end = _end ? getUtcToLocalDateObject(_end) : undefined;\n\n    if (disabled) {\n      return children({\n        utc,\n        start,\n        end,\n        ...props,\n      });\n    }\n\n    const renderProps = {\n      // Zooming only works when grouped by date\n      isGroupedByDate: true,\n      onChartReady: this.handleChartReady,\n      utc,\n      start,\n      end,\n      dataZoom: DataZoomInside({xAxisIndex}),\n      showTimeInTooltip: true,\n      toolBox: ToolBox(\n        {},\n        {\n          dataZoom: {\n            title: {\n              zoom: '',\n              back: '',\n            },\n            iconStyle: {\n              borderWidth: 0,\n              color: 'transparent',\n              opacity: 0,\n            },\n          },\n        }\n      ),\n      onDataZoom: this.handleDataZoom,\n      onFinished: this.handleChartFinished,\n      onRestore: this.handleZoomRestore,\n      ...props,\n    };\n\n    return children(renderProps);\n  }\n}\n\nexport default ChartZoom;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport LoadingMask from 'app/components/loadingMask';\n\ntype Props = {\n  visible: boolean;\n  className?: string;\n  children?: React.ReactNode;\n} & React.ComponentProps<typeof LoadingMask>;\n\nconst TransparentLoadingMask = styled(\n  ({className, visible, children, ...props}: Props) => {\n    const other = visible ? {...props, 'data-test-id': 'loading-placeholder'} : props;\n    return (\n      <LoadingMask className={className} {...other}>\n        {children}\n      </LoadingMask>\n    );\n  }\n)<Props>`\n  ${p => !p.visible && 'display: none;'};\n  opacity: 0.4;\n  z-index: 1;\n`;\n\nexport default TransparentLoadingMask;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {promptsCheck, promptsUpdate} from 'app/actionCreators/prompts';\nimport SidebarPanelActions from 'app/actions/sidebarPanelActions';\nimport {Client} from 'app/api';\nimport Alert from 'app/components/alert';\nimport {ALL_ACCESS_PROJECTS} from 'app/constants/globalSelectionHeader';\nimport {IconUpgrade} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {\n  GlobalSelection,\n  Organization,\n  ProjectSdkUpdates,\n  SDKUpdatesSuggestion,\n} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport {promptIsDismissed} from 'app/utils/promptIsDismissed';\nimport withApi from 'app/utils/withApi';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport withOrganization from 'app/utils/withOrganization';\nimport withSdkUpdates from 'app/utils/withSdkUpdates';\n\nimport {SidebarPanelKey} from './sidebar/types';\nimport Button from './button';\n\ntype Props = React.ComponentProps<typeof Alert> & {\n  api: Client;\n  organization: Organization;\n  sdkUpdates?: ProjectSdkUpdates[] | null;\n  selection?: GlobalSelection;\n  Wrapper?: React.ComponentType;\n};\n\ntype State = {\n  isDismissed: boolean | null;\n};\n\ntype AnalyticsOpts = {\n  organization: Organization;\n};\n\nconst recordAnalyticsSeen = ({organization}: AnalyticsOpts) =>\n  trackAnalyticsEvent({\n    eventKey: 'sdk_updates.seen',\n    eventName: 'SDK Updates: Seen',\n    organization_id: organization.id,\n  });\n\nconst recordAnalyticsSnoozed = ({organization}: AnalyticsOpts) =>\n  trackAnalyticsEvent({\n    eventKey: 'sdk_updates.snoozed',\n    eventName: 'SDK Updates: Snoozed',\n    organization_id: organization.id,\n  });\n\nconst recordAnalyticsClicked = ({organization}: AnalyticsOpts) =>\n  trackAnalyticsEvent({\n    eventKey: 'sdk_updates.clicked',\n    eventName: 'SDK Updates: Clicked',\n    organization_id: organization.id,\n  });\n\nconst flattenSuggestions = (list: ProjectSdkUpdates[]) =>\n  list.reduce<SDKUpdatesSuggestion[]>(\n    (suggestions, sdk) => [...suggestions, ...sdk.suggestions],\n    []\n  );\n\nclass InnerGlobalSdkSuggestions extends React.Component<Props, State> {\n  state: State = {\n    isDismissed: null,\n  };\n\n  componentDidMount() {\n    this.promptsCheck();\n    recordAnalyticsSeen({organization: this.props.organization});\n  }\n\n  async promptsCheck() {\n    const {api, organization} = this.props;\n\n    const prompt = await promptsCheck(api, {\n      organizationId: organization.id,\n      feature: 'sdk_updates',\n    });\n\n    this.setState({\n      isDismissed: promptIsDismissed(prompt),\n    });\n  }\n\n  snoozePrompt = () => {\n    const {api, organization} = this.props;\n    promptsUpdate(api, {\n      organizationId: organization.id,\n      feature: 'sdk_updates',\n      status: 'snoozed',\n    });\n\n    this.setState({isDismissed: true});\n    recordAnalyticsSnoozed({organization: this.props.organization});\n  };\n\n  render() {\n    const {\n      api: _api,\n      selection,\n      sdkUpdates,\n      organization,\n      Wrapper,\n      ...props\n    } = this.props;\n\n    const {isDismissed} = this.state;\n\n    if (!sdkUpdates || isDismissed === null || isDismissed) {\n      return null;\n    }\n\n    // withSdkUpdates explicitly only queries My Projects. This means that when\n    // looking at any projects outside of My Projects (like All Projects), this\n    // will only show the updates relevant to the to user.\n    const projectSpecificUpdates =\n      selection?.projects.length === 0 || selection?.projects === [ALL_ACCESS_PROJECTS]\n        ? sdkUpdates\n        : sdkUpdates.filter(update =>\n            selection?.projects?.includes(parseInt(update.projectId, 10))\n          );\n\n    // Are there any updates?\n    if (flattenSuggestions(projectSpecificUpdates).length === 0) {\n      return null;\n    }\n\n    const showBroadcastsPanel = (\n      <Button\n        priority=\"link\"\n        onClick={() => {\n          SidebarPanelActions.activatePanel(SidebarPanelKey.Broadcasts);\n          recordAnalyticsClicked({organization});\n        }}\n      >\n        {t('Review updates')}\n      </Button>\n    );\n\n    const notice = (\n      <Alert type=\"info\" icon={<IconUpgrade />} {...props}>\n        <Content>\n          {t(\n            `You have outdated SDKs in your projects. Update them for important fixes and features.`\n          )}\n          <Actions>\n            <Button\n              priority=\"link\"\n              title={t('Dismiss for the next two weeks')}\n              onClick={this.snoozePrompt}\n            >\n              {t('Remind me later')}\n            </Button>\n            |{showBroadcastsPanel}\n          </Actions>\n        </Content>\n      </Alert>\n    );\n\n    return Wrapper ? <Wrapper>{notice}</Wrapper> : notice;\n  }\n}\n\nconst Content = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    justify-content: space-between;\n  }\n`;\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(3, max-content);\n  grid-gap: ${space(1)};\n`;\n\nconst GlobalSdkSuggestions = withOrganization(\n  withSdkUpdates(withGlobalSelection(withApi(InnerGlobalSdkSuggestions)))\n);\n\nexport default GlobalSdkSuggestions;\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport emptyStateImg from 'sentry-images/spot/performance-empty-state.svg';\nimport tourAlert from 'sentry-images/spot/performance-tour-alert.svg';\nimport tourCorrelate from 'sentry-images/spot/performance-tour-correlate.svg';\nimport tourMetrics from 'sentry-images/spot/performance-tour-metrics.svg';\nimport tourTrace from 'sentry-images/spot/performance-tour-trace.svg';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport FeatureTourModal, {\n  TourImage,\n  TourStep,\n  TourText,\n} from 'app/components/modals/featureTourModal';\nimport OnboardingPanel from 'app/components/onboardingPanel';\nimport {t} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport {trackAdvancedAnalyticsEvent} from 'app/utils/advancedAnalytics';\nimport withApi from 'app/utils/withApi';\n\nconst performanceSetupUrl =\n  'https://docs.sentry.io/performance-monitoring/getting-started/';\n\nconst docsLink = (\n  <Button external href={performanceSetupUrl}>\n    {t('Setup')}\n  </Button>\n);\n\nexport const PERFORMANCE_TOUR_STEPS: TourStep[] = [\n  {\n    title: t('Track Application Metrics'),\n    image: <TourImage src={tourMetrics} />,\n    body: (\n      <TourText>\n        {t(\n          'Monitor your slowest pageloads and APIs to see which users are having the worst time.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Correlate Errors and Performance'),\n    image: <TourImage src={tourCorrelate} />,\n    body: (\n      <TourText>\n        {t(\n          'See what errors occurred within a transaction and the impact of those errors.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Watch and Alert'),\n    image: <TourImage src={tourAlert} />,\n    body: (\n      <TourText>\n        {t(\n          'Highlight mission-critical pages and APIs and set latency alerts to notify you before things go wrong.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Trace Across Systems'),\n    image: <TourImage src={tourTrace} />,\n    body: (\n      <TourText>\n        {t(\n          \"Follow a trace from a user's session and drill down to identify any bottlenecks that occur.\"\n        )}\n      </TourText>\n    ),\n  },\n];\n\ntype Props = {\n  organization: Organization;\n  api: Client;\n  project: Project;\n};\n\nfunction Onboarding({organization, project, api}: Props) {\n  function handleAdvance(step: number, duration: number) {\n    trackAdvancedAnalyticsEvent('performance_views.tour.advance', {\n      step,\n      duration,\n      organization,\n    });\n  }\n\n  function handleClose(step: number, duration: number) {\n    trackAdvancedAnalyticsEvent('performance_views.tour.close', {\n      step,\n      duration,\n      organization,\n    });\n  }\n  const showSampleTransactionBtn = organization.features.includes(\n    'performance-create-sample-transaction'\n  );\n  const featureTourBtn = (\n    <FeatureTourModal\n      steps={PERFORMANCE_TOUR_STEPS}\n      onAdvance={handleAdvance}\n      onCloseModal={handleClose}\n      doneUrl={performanceSetupUrl}\n      doneText={t('Start Setup')}\n    >\n      {({showModal}) => (\n        <Button\n          priority={showSampleTransactionBtn ? 'link' : 'default'}\n          onClick={() => {\n            trackAdvancedAnalyticsEvent('performance_views.tour.start', {organization});\n            showModal();\n          }}\n        >\n          {t('Take a Tour')}\n        </Button>\n      )}\n    </FeatureTourModal>\n  );\n  const secondaryBtn = showSampleTransactionBtn ? (\n    <Button\n      data-test-id=\"create-sample-transaction-btn\"\n      onClick={async () => {\n        trackAdvancedAnalyticsEvent('performance_views.create_sample_transaction', {\n          platform: project.platform,\n          organization,\n        });\n        addLoadingMessage(t('Processing sample event...'), {\n          duration: 15000,\n        });\n        const url = `/projects/${organization.slug}/${project.slug}/create-sample-transaction/`;\n        try {\n          const eventData = await api.requestPromise(url, {method: 'POST'});\n          browserHistory.push(\n            `/organizations/${organization.slug}/performance/${project.slug}:${eventData.eventID}/`\n          );\n          clearIndicators();\n        } catch (error) {\n          Sentry.withScope(scope => {\n            scope.setExtra('error', error);\n            Sentry.captureException(new Error('Failed to create sample event'));\n          });\n          clearIndicators();\n          addErrorMessage(t('Failed to create a new sample event'));\n          return;\n        }\n      }}\n    >\n      {t('Create Sample Transaction')}\n    </Button>\n  ) : (\n    featureTourBtn\n  );\n\n  return (\n    <OnboardingPanel image={<PerfImage src={emptyStateImg} />}>\n      <h3>{t('Pinpoint problems')}</h3>\n      <p>\n        {t(\n          'Something seem slow? Track down transactions to connect the dots between 10-second page loads and poor-performing API calls or slow database queries.'\n        )}\n      </p>\n      <ButtonList gap={1}>\n        <Button\n          priority=\"primary\"\n          target=\"_blank\"\n          href=\"https://docs.sentry.io/performance-monitoring/getting-started/\"\n        >\n          {t('Start Setup')}\n        </Button>\n        {secondaryBtn}\n      </ButtonList>\n      {showSampleTransactionBtn && featureTourBtn}\n    </OnboardingPanel>\n  );\n}\n\nconst PerfImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    max-width: unset;\n    user-select: none;\n    position: absolute;\n    top: 75px;\n    bottom: 0;\n    width: 450px;\n    margin-top: auto;\n    margin-bottom: auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    width: 480px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    width: 600px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n  margin-bottom: 16px;\n`;\n\nexport default withApi(Onboarding);\n"],"names":["getDate","date","moment","format","ChartZoom","React","constructor","props","super","this","currentPeriod","period","start","end","saveHistory","router","onZoom","usePageDate","startFormatted","endFormatted","history","push","callIfFunction","zooming","newQuery","location","query","pageStart","getUtcDateString","undefined","pageEnd","pageStatsPeriod","qs","pathname","updateDateTime","getUtcToLocalDateObject","saveCurrentPeriod","chart","dispatchAction","type","key","dataZoomSelectActive","onChartReady","evt","length","setPeriod","onRestore","model","getModel","xAxis","option","axis","rangeStart","rangeEnd","previousPeriod","pop","onDataZoom","onFinished","componentDidUpdate","disabled","render","utc","_utc","_start","_end","children","xAxisIndex","_router","_onZoom","_onRestore","_onChartReady","_onDataZoom","_onFinished","isGroupedByDate","handleChartReady","dataZoom","DataZoomInside","showTimeInTooltip","toolBox","ToolBox","title","zoom","back","iconStyle","borderWidth","color","opacity","handleDataZoom","handleChartFinished","handleZoomRestore","className","visible","other","p","InnerGlobalSdkSuggestions","isDismissed","api","organization","promptsUpdate","organizationId","id","feature","status","setState","trackAnalyticsEvent","eventKey","eventName","organization_id","recordAnalyticsSnoozed","componentDidMount","promptsCheck","recordAnalyticsSeen","prompt","promptIsDismissed","_api","selection","sdkUpdates","Wrapper","state","list","projects","ALL_ACCESS_PROJECTS","filter","update","includes","parseInt","projectId","reduce","suggestions","sdk","showBroadcastsPanel","priority","onClick","SidebarPanelActions","SidebarPanelKey","recordAnalyticsClicked","t","notice","icon","Content","Actions","snoozePrompt","theme","breakpoints","space","withOrganization","withSdkUpdates","withGlobalSelection","withApi","performanceSetupUrl","docsLink","external","href","PERFORMANCE_TOUR_STEPS","image","src","tourMetrics","body","actions","tourCorrelate","tourAlert","tourTrace","Onboarding","project","showSampleTransactionBtn","features","featureTourBtn","steps","onAdvance","step","duration","trackAdvancedAnalyticsEvent","onCloseModal","doneUrl","doneText","showModal","secondaryBtn","async","platform","addLoadingMessage","url","slug","eventData","requestPromise","method","browserHistory","eventID","clearIndicators","error","Sentry","scope","setExtra","Error","addErrorMessage","PerfImage","emptyStateImg","ButtonList","gap","target","ButtonBar"],"sourceRoot":""}