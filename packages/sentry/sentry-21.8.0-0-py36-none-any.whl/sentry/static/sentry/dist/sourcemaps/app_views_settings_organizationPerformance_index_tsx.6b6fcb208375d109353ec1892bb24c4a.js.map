{"version":3,"file":"chunks/app_views_settings_organizationPerformance_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/organization/permissionAlert.tsx","webpack:///./app/views/settings/organizationPerformance/index.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n","import * as React from 'react';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['org:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"sm\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner or manager role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {Component, Fragment} from 'react';\nimport {Location} from 'history';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {updateOrganization} from 'app/actionCreators/organizations';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {t, tct} from 'app/locale';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'app/views/settings/organization/permissionAlert';\n\nconst fields: JsonFormObject[] = [\n  {\n    title: t('General'),\n    fields: [\n      {\n        name: 'apdexThreshold',\n        type: 'number',\n        required: true,\n        label: t('Response Time Threshold (Apdex)'),\n        help: tct(\n          `Set a response time threshold in milliseconds to help define what satisfactory\n                and tolerable response times are. This value will be reflected in the\n                calculation of your [link:Apdex], a standard measurement in performance.`,\n          {\n            link: (\n              <ExternalLink href=\"https://docs.sentry.io/performance-monitoring/performance/metrics/#apdex\" />\n            ),\n          }\n        ),\n      },\n    ],\n  },\n];\n\ntype Props = {\n  organization: Organization;\n  location: Location;\n};\n\nclass OrganizationPerformance extends Component<Props> {\n  handleSuccess = (data: Organization) => {\n    updateOrganization(data);\n  };\n\n  render() {\n    const {location, organization} = this.props;\n    const features = new Set(organization.features);\n    const access = new Set(organization.access);\n    const endpoint = `/organizations/${organization.slug}/`;\n\n    const jsonFormSettings = {\n      location,\n      features,\n      access,\n      disabled: !(access.has('org:write') && features.has('performance-view')),\n    };\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title=\"Performance\" />\n        <PermissionAlert />\n\n        <Form\n          data-test-id=\"organization-performance-settings\"\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          saveOnBlur\n          allowUndo\n          initialData={organization}\n          onSubmitSuccess={this.handleSuccess}\n          onSubmitError={() => addErrorMessage('Unable to save changes')}\n        >\n          <JsonForm {...jsonFormSettings} forms={fields} />\n        </Form>\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationPerformance);\n"],"names":["FormPanel","React","render","title","fields","access","disabled","additionalFieldProps","renderFooter","renderHeader","otherProps","this","props","id","sanitizeQuerySelector","undefined","map","field","defaultValue","_","fieldWithoutDefaultValue","disabledReason","highlighted","name","JsonForm","location","hash","componentDidMount","scrollToHash","UNSAFE_componentWillReceiveProps","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","shouldDisplayForm","fieldsWithVisibleProp","filter","defined","visible","length","every","renderForm","formPanelProps","forms","features","_location","state","formGroup","i","withRouter","PermissionAlert","hasAccess","type","icon","size","t","required","label","help","tct","link","href","OrganizationPerformance","Component","data","updateOrganization","organization","Set","endpoint","slug","jsonFormSettings","has","Fragment","apiMethod","apiEndpoint","saveOnBlur","allowUndo","initialData","onSubmitSuccess","handleSuccess","onSubmitError","addErrorMessage","withOrganization"],"sourceRoot":""}