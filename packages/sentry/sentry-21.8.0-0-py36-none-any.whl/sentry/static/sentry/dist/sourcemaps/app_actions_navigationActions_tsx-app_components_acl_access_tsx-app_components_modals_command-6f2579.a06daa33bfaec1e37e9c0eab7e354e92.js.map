{"version":3,"file":"chunks/app_actions_navigationActions_tsx-app_components_acl_access_tsx-app_components_modals_command-6f2579.xxxxxxxxxxxxxxxxxxxx.js","mappings":"uRAEA,Q,MAAeA,GAAAA,cAAqB,CAAC,kB,0HCArC,Q,MAAeA,GAAAA,cAAqB,CAClC,UACA,eACA,iBACA,aACA,gBACA,eACA,YACA,iBACA,6BACA,mBACA,gBACA,qBACA,uBACA,aACA,kBACA,oBACA,QACA,YACA,SACA,cACA,mB,uHCrBF,MAmBA,E,MAnBoBA,GAAAA,cAAqB,CACvC,aACA,kBACA,oBACA,WACA,gBACA,kBACA,eACA,oBACA,sBACA,YACA,aACA,kBACA,oBACA,SACA,cACA,mB,6dCRF,MAAMC,GACJ,QAAC,IAAD,CAAOC,KAAK,QAAQC,MAAM,QAAC,KAAD,CAAUC,KAAK,OAAzC,UACGC,EAAAA,EAAAA,GAAE,4DA8DP,MAAMC,UAAeC,EAAAA,UAGnBC,SACE,MAAM,aACJC,EADI,OAEJC,EAFI,OAGJC,EAHI,WAIJC,EAJI,YAKJC,EALI,sBAMJC,EANI,SAOJC,GACEC,KAAKC,OAEFN,OAAQO,GAAaT,GAAgB,CAACE,OAAQ,IAG/CQ,GAAaR,GAAUA,EAFdC,EAAa,QAAU,SAEMQ,GAAOF,EAAUG,SAASD,KAChEE,KAAkBZ,EAAOa,OAAQb,EAAOa,KAAKV,aAE7CW,EAAgC,CACpCL,UAAAA,EACAG,aAAAA,GAGId,EAASW,KAAeN,GAAeS,GAE7C,OAAKd,GAA2C,mBAA1BM,GAEVN,GAAUM,EACbb,GAGLwB,EAAAA,EAAAA,GAA4BV,GACvBA,EAASS,GAGXhB,EAASO,EAAW,KATlBD,EAAsBU,IA5B7BlB,EAAAA,YAAAA,U,OAAAA,EAAAA,eA3B6B,CACjCQ,uBAAuB,EACvBD,aAAa,EACbD,YAAY,EACZD,OAAQ,KAgEV,SAAee,EAAAA,EAAAA,IAAiBC,EAAAA,EAAAA,GAAWrB,K,uvBCnG3C,MAAMsB,UAAuBC,EAAAA,UAC3BC,qBACEC,EAAAA,EAAAA,IAAU,kBAAmB,IAG/BvB,SACE,MAAM,MAACwB,EAAD,KAAQC,GAAQjB,KAAKC,MAE3B,OACE,QAACgB,EAAD,WACE,QAAC,KAAD,UACG,EAAEC,IAAKC,MACN,QAAC,IAAD,CACEC,WAAW,kBACXC,UAAW,EACXC,WAAY,GACZC,cAAeJ,EAAF,qTAOaH,EAAMQ,QAEhCC,YAAa,EAAEC,cAAAA,MACb,QAACC,EAAD,WACE,QAACC,EAAD,CACEC,WAAS,KACLH,EAAc,CAChBxC,KAAM,OACN4C,aAAazC,EAAAA,EAAAA,GAAE,6DA/B/BuB,EAAAA,YAAAA,iBA4CN,SAAemB,EAAAA,EAAAA,GAAUnB,GAEZoB,EAAW,CAAH,uDAMfL,GAAe,OAAO,MAAP,sBAAH,YACLM,EAAAA,EAAAA,GAAM,KADD,KAIZL,GAAc,OAAOM,EAAAA,EAAP,sBAAH,uBAEJD,EAAAA,EAAAA,GAAM,GAFF,iI,sGCrEV,MAAME,EAAQ,4BAqBrB,EAnBqC,CACnC,CAEEC,MAAO,uBACPC,OAAQ,CACN,CACEC,KAAM,QACNpD,KAAM,SAGNqD,MAAO,mBACPT,YAAa,6BACbU,KAAM,kDACNC,kBAAkB,O,2UCuB1B,MAAMC,EAA2E,CAC/EC,UAAW,GACXC,SAAS,EAETC,OACE7C,KAAK8C,QAEL9C,KAAK+C,SAASC,EAAAA,EAAAA,eAA+BhD,KAAKiD,WAClDjD,KAAK+C,SAASC,EAAAA,EAAAA,WAA2BhD,KAAKkD,cAC9ClD,KAAK+C,SAASC,EAAAA,EAAAA,cAA8BhD,KAAKmD,iBACjDnD,KAAK+C,SAASC,EAAAA,EAAAA,aAA6BhD,KAAKoD,iBAChDpD,KAAK+C,SAASC,EAAAA,EAAAA,iBAAiChD,KAAKqD,oBACpDrD,KAAK+C,SAASC,EAAAA,EAAAA,kBAAkChD,KAAKsD,cACrDtD,KAAK+C,SAASC,EAAAA,EAAAA,MAAsBhD,KAAK8C,OACzC9C,KAAK+C,SAASC,EAAAA,EAAAA,cAA8BhD,KAAKuD,iBAEjDvD,KAAK+C,SAASS,EAAAA,EAAAA,kBAA+BxD,KAAKyD,eAGpDX,QACE9C,KAAK2C,UAAY,GACjB3C,KAAK4C,SAAU,GAGjBQ,gBAAgBM,GACd1D,KAAK2C,UAAYe,EAAMC,QAAO,CAACC,EAAKC,KAClCD,EAAIC,EAAQC,IAAMD,EACXD,IACN,IACH5D,KAAK4C,SAAU,EACf5C,KAAK+D,QAAQ,IAAIC,IAAIC,OAAOC,KAAKlE,KAAK2C,cAGxCO,aAAaiB,EAAkBC,GAC7B,MAAMC,EAAcrE,KAAKsE,UAAUH,GAGnC,IAAKE,EACH,OAGF,MAAME,EAAa,IACdF,EACHG,KAAMJ,GAGRpE,KAAK2C,UAAY,IACZ3C,KAAK2C,UACR,CAAC4B,EAAWT,IAAKS,GAKnBvE,KAAK+D,QAAQ,IAAIC,IAAI,CAACK,EAAYP,OAGpCX,gBAAgBU,GACd7D,KAAK2C,UAAY,IACZ3C,KAAK2C,UACR,CAACkB,EAAQC,IAAKD,GAEhB7D,KAAK+D,QAAQ,IAAIC,IAAI,CAACH,EAAQC,OAGhCP,gBAAgBkB,GACd,MAAMZ,EAAU7D,KAAK0E,QAAQD,EAAKX,IAClC,IAAKD,EACH,OAEF,MAAMU,EAAaN,OAAOU,OAAO,GAAId,EAASY,GAC9CzE,KAAK2C,UAAY,IACZ3C,KAAK2C,UACR,CAACkB,EAAQC,IAAKS,GAEhBvE,KAAK+D,QAAQ,IAAIC,IAAI,CAACS,EAAKX,OAG7BT,mBAAmBoB,GACjB,MAAMG,EAAuB,GAC7BX,OAAOY,QAAQJ,GAAQ,IAAIK,SAAQ,EAAEC,EAAWC,MAC1CD,KAAa/E,KAAK2C,YACpB3C,KAAK2C,UAAUoC,GAAWC,MAAQA,EAClCJ,EAAWK,KAAKF,OAGpB/E,KAAK+D,QAAQ,IAAIC,IAAIY,KAQvBnB,aAAayB,GAEX,MAAMC,EAAanF,KAAKoF,YAAYF,GAAUtB,KAAIyB,IAChDrF,KAAKsF,sBAAsBJ,EAAUG,GAC9BA,EAAgBvB,MAGzB9D,KAAK+D,QAAQ,IAAIC,IAAI,CAACmB,MAGxB7B,aAAa4B,EAAkBK,GAC7B,MAAM1B,EAAU7D,KAAKsE,UAAUiB,GAC1B1B,IAIL7D,KAAKsF,sBAAsBJ,EAAUrB,GACrC7D,KAAK+D,QAAQ,IAAIC,IAAI,CAACH,EAAQC,QAGhCb,UAAUuC,EAAYD,GACpB,MAAM1B,EAAU7D,KAAKsE,UAAUiB,GAG1B1B,IAIL7D,KAAK2C,UAAY,IACZ3C,KAAK2C,UACR,CAACkB,EAAQC,IAAK,IACTD,EACH4B,MAAO,IAAI5B,EAAQ4B,MAAOD,KAI9BxF,KAAK+D,QAAQ,IAAIC,IAAI,CAACH,EAAQC,QAIhCwB,sBAAsBJ,EAAkBrB,GACtC,MAAM6B,EAAW7B,EAAQ4B,MAAME,QAAO,EAAEnB,KAAAA,KAAUA,IAASU,IAE3DlF,KAAK2C,UAAY,IACZ3C,KAAK2C,UACR,CAACkB,EAAQC,IAAK,IACTD,EACH4B,MAAOC,KAUbN,YAAYF,GACV,OAAOlF,KAAK4F,SAASD,QAAO,EAAEF,MAAAA,KAAWA,EAAMI,MAAK,EAAErB,KAAAA,KAAUA,IAASU,OAG3EU,SACE,OAAO3B,OAAO6B,OAAO9F,KAAK2C,WAAWoD,MAAK,CAACC,EAAYC,IACjDD,EAAExB,KAAOyB,EAAEzB,KACN,EAELwB,EAAExB,KAAOyB,EAAEzB,MACL,EAEH,KAIXE,QAAQZ,GACN,OAAO9D,KAAK4F,SAASC,MAAKhC,GAAWA,EAAQC,KAAOA,KAGtDQ,UAAUE,GACR,OAAOxE,KAAK4F,SAASC,MAAKhC,GAAWA,EAAQW,OAASA,KAGxD0B,WAAWC,GACT,OAAOnG,KAAK4F,SAASD,QAAO9B,GAAWsC,EAAM9F,SAASwD,EAAQW,SAGhE4B,SAASD,GACP,MAAO,CACLE,SAAUF,EAAQnG,KAAKkG,WAAWC,GAASnG,KAAK4F,SAChDhD,QAAS5C,KAAK4C,WASpB,EAFsB5D,IAAAA,YAAmB0D,I,2UC1MzC,MA0BA,EA1BgB,CACd4D,GACCC,gBAAAA,GAAgC,MAFnB,mBAId,cAAchH,EAAAA,UAGZiH,YAAYvG,GACVwG,MAAMxG,IAD4B,0BAElCD,KAAK0G,IAAM,IAAIC,EAAAA,GAGjBC,uBACOL,GACHvG,KAAK0G,IAAIG,QAMbrH,SACE,MAAM,IAACkH,KAAQzG,GAASD,KAAKC,MAC7B,OAAO,QAACqG,EAAD,CAAwBI,IAAKA,MAAAA,EAAAA,EAAO1G,KAAK0G,OAAQzG,OAtB9C,0CAKoB6G,EAAAA,EAAAA,GAAeR,GALnC,U,waC0BhB,QAlCA,SACEA,GAEA,MAAMS,UAAqBxH,EAAAA,UAGzB,mDAGeyH,EAAAA,EAAAA,aAHf,0BAScA,EAAAA,EAAAA,QACZ,IAAMhH,KAAKiH,SAASD,EAAAA,EAAAA,kBACpBE,IANFN,uBACE5G,KAAKmH,cAQP3H,SACE,OACE,QAAC8G,EAAD,IACOtG,KAAKC,MACVoG,SAAUrG,KAAKoH,MAAMf,SACrBgB,gBAAiBrH,KAAKoH,MAAMxE,WAMpC,OA5BMmE,EADN,mCACMA,EADN,sCAKuCD,EAAAA,EAAAA,GAAeR,GALtD,MA6BOS,I,mDClDT,IAAIO,EAAc,EAAQ,0CACtBC,EAAY,EAAQ,uCA+BxBC,EAAOC,QATP,SAAsBC,EAAOC,GAE3B,OADsB,MAATD,GAAoBA,EAAME,QAIvCD,OAAkBT,IAAVS,EAAsB,EAAIJ,EAAUI,GACrCL,EAAYI,EAAOC,IAHjB","sources":["webpack:///./app/actions/navigationActions.tsx","webpack:///./app/actions/projectActions.tsx","webpack:///./app/actions/teamActions.tsx","webpack:///./app/components/acl/access.tsx","webpack:///./app/components/modals/commandPalette.tsx","webpack:///./app/data/forms/accountEmails.tsx","webpack:///./app/stores/projectsStore.tsx","webpack:///./app/utils/withApi.tsx","webpack:///./app/utils/withProjects.tsx","webpack:///../node_modules/lodash/flattenDepth.js"],"sourcesContent":["import Reflux from 'reflux';\n\nexport default Reflux.createActions(['setLastRoute']);\n","import Reflux from 'reflux';\n\nexport default Reflux.createActions([\n  'addTeam',\n  'addTeamError',\n  'addTeamSuccess',\n  'changeSlug',\n  'createSuccess',\n  'loadProjects',\n  'loadStats',\n  'loadStatsError',\n  'loadStatsForProjectSuccess',\n  'loadStatsSuccess',\n  'removeProject',\n  'removeProjectError',\n  'removeProjectSuccess',\n  'removeTeam',\n  'removeTeamError',\n  'removeTeamSuccess',\n  'reset',\n  'setActive',\n  'update',\n  'updateError',\n  'updateSuccess',\n]);\n","import Reflux from 'reflux';\n\nconst TeamActions = Reflux.createActions([\n  'createTeam',\n  'createTeamError',\n  'createTeamSuccess',\n  'fetchAll',\n  'fetchAllError',\n  'fetchAllSuccess',\n  'fetchDetails',\n  'fetchDetailsError',\n  'fetchDetailsSuccess',\n  'loadTeams',\n  'removeTeam',\n  'removeTeamError',\n  'removeTeamSuccess',\n  'update',\n  'updateError',\n  'updateSuccess',\n]);\n\nexport default TeamActions;\n","import * as React from 'react';\n\nimport Alert from 'app/components/alert';\nimport {IconInfo} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Config, Organization, Scope} from 'app/types';\nimport {isRenderFunc} from 'app/utils/isRenderFunc';\nimport withConfig from 'app/utils/withConfig';\nimport withOrganization from 'app/utils/withOrganization';\n\nconst DEFAULT_NO_ACCESS_MESSAGE = (\n  <Alert type=\"error\" icon={<IconInfo size=\"md\" />}>\n    {t('You do not have sufficient permissions to access this.')}\n  </Alert>\n);\n\n// Props that function children will get.\nexport type ChildRenderProps = {\n  hasAccess: boolean;\n  hasSuperuser: boolean;\n};\n\ntype ChildFunction = (props: ChildRenderProps) => React.ReactNode;\n\ntype DefaultProps = {\n  /**\n   * Should the component require all access levels or just one or more.\n   */\n  requireAll?: boolean;\n\n  /**\n   * Requires superuser\n   */\n  isSuperuser?: boolean;\n\n  /**\n   * Custom renderer function for \"no access\" message OR `true` to use\n   * default message. `false` will suppress message.\n   */\n  renderNoAccessMessage: ChildFunction | boolean;\n\n  /**\n   * List of required access levels\n   */\n  access: Scope[];\n};\n\nconst defaultProps: DefaultProps = {\n  renderNoAccessMessage: false,\n  isSuperuser: false,\n  requireAll: true,\n  access: [],\n};\n\ntype Props = {\n  /**\n   * Current Organization\n   */\n  organization: Organization;\n\n  /**\n   * Configuration from ConfigStore\n   */\n  config: Config;\n\n  /**\n   * Children can be a node or a function as child.\n   */\n  children?: React.ReactNode | ChildFunction;\n} & Partial<DefaultProps>;\n\n/**\n * Component to handle access restrictions.\n */\nclass Access extends React.Component<Props> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      organization,\n      config,\n      access,\n      requireAll,\n      isSuperuser,\n      renderNoAccessMessage,\n      children,\n    } = this.props;\n\n    const {access: orgAccess} = organization || {access: []};\n    const method = requireAll ? 'every' : 'some';\n\n    const hasAccess = !access || access[method](acc => orgAccess.includes(acc));\n    const hasSuperuser = !!(config.user && config.user.isSuperuser);\n\n    const renderProps: ChildRenderProps = {\n      hasAccess,\n      hasSuperuser,\n    };\n\n    const render = hasAccess && (!isSuperuser || hasSuperuser);\n\n    if (!render && typeof renderNoAccessMessage === 'function') {\n      return renderNoAccessMessage(renderProps);\n    } else if (!render && renderNoAccessMessage) {\n      return DEFAULT_NO_ACCESS_MESSAGE;\n    }\n\n    if (isRenderFunc<ChildFunction>(children)) {\n      return children(renderProps);\n    }\n\n    return render ? children : null;\n  }\n}\n\nexport default withOrganization(withConfig(Access));\n","import {Component} from 'react';\nimport {ClassNames, css, withTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport Search from 'app/components/search';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {analytics} from 'app/utils/analytics';\nimport {Theme} from 'app/utils/theme';\nimport Input from 'app/views/settings/components/forms/controls/input';\n\ntype Props = ModalRenderProps & {\n  theme: Theme;\n};\n\nclass CommandPalette extends Component<Props> {\n  componentDidMount() {\n    analytics('omnisearch.open', {});\n  }\n\n  render() {\n    const {theme, Body} = this.props;\n\n    return (\n      <Body>\n        <ClassNames>\n          {({css: injectedCss}) => (\n            <Search\n              entryPoint=\"command_palette\"\n              minSearch={1}\n              maxResults={10}\n              dropdownStyle={injectedCss`\n                width: 100%;\n                border: transparent;\n                border-top-left-radius: 0;\n                border-top-right-radius: 0;\n                position: initial;\n                box-shadow: none;\n                border-top: 1px solid ${theme.border};\n              `}\n              renderInput={({getInputProps}) => (\n                <InputWrapper>\n                  <StyledInput\n                    autoFocus\n                    {...getInputProps({\n                      type: 'text',\n                      placeholder: t('Search for projects, teams, settings, etc...'),\n                    })}\n                  />\n                </InputWrapper>\n              )}\n            />\n          )}\n        </ClassNames>\n      </Body>\n    );\n  }\n}\n\nexport default withTheme(CommandPalette);\n\nexport const modalCss = css`\n  [role='document'] {\n    padding: 0;\n  }\n`;\n\nconst InputWrapper = styled('div')`\n  padding: ${space(0.25)};\n`;\n\nconst StyledInput = styled(Input)`\n  width: 100%;\n  padding: ${space(1)};\n  border-radius: 8px;\n\n  outline: none;\n  border: none;\n  box-shadow: none;\n\n  :focus,\n  :active,\n  :hover {\n    outline: none;\n    border: none;\n    box-shadow: none;\n  }\n`;\n","import {JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/emails/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Add Secondary Emails',\n    fields: [\n      {\n        name: 'email',\n        type: 'string',\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Additional Email',\n        placeholder: 'e.g. secondary@example.com',\n        help: 'Designate an alternative email for this account',\n        showReturnButton: true,\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","import Reflux from 'reflux';\n\nimport ProjectActions from 'app/actions/projectActions';\nimport TeamActions from 'app/actions/teamActions';\nimport {Project, Team} from 'app/types';\n\ntype State = {\n  projects: Project[];\n  loading: boolean;\n};\n\ntype StatsData = Record<string, Project['stats']>;\n\n/**\n * Attributes that need typing but aren't part of the external interface,\n */\ntype Internals = {\n  itemsById: Record<string, Project>;\n  loading: boolean;\n};\n\ntype ProjectsStoreInterface = {\n  init: () => void;\n  reset: () => void;\n  loadInitialData: (projects: Project[]) => void;\n  onStatsLoadSuccess: (data: StatsData) => void;\n  onChangeSlug: (prevSlug: string, newSlug: string) => void;\n  onCreateSuccess: (project: Project) => void;\n  onUpdateSuccess: (data: Partial<Project>) => void;\n  onDeleteTeam: (slug: string) => void;\n  onRemoveTeam: (teamSlug: string, projectSlug: string) => void;\n  onAddTeam: (team: Team, projectSlug: string) => void;\n  removeTeamFromProject: (teamSlug: string, project: Project) => void;\n  getWithTeam: (teamSlug: string) => Project[];\n  getAll: () => Project[];\n  getBySlugs: (slug: string[]) => Project[];\n  getState: (slugs?: string[]) => State;\n  getById: (id?: string) => Project | undefined;\n  getBySlug: (slug?: string) => Project | undefined;\n};\n\nconst storeConfig: Reflux.StoreDefinition & Internals & ProjectsStoreInterface = {\n  itemsById: {},\n  loading: true,\n\n  init() {\n    this.reset();\n\n    this.listenTo(ProjectActions.addTeamSuccess, this.onAddTeam);\n    this.listenTo(ProjectActions.changeSlug, this.onChangeSlug);\n    this.listenTo(ProjectActions.createSuccess, this.onCreateSuccess);\n    this.listenTo(ProjectActions.loadProjects, this.loadInitialData);\n    this.listenTo(ProjectActions.loadStatsSuccess, this.onStatsLoadSuccess);\n    this.listenTo(ProjectActions.removeTeamSuccess, this.onRemoveTeam);\n    this.listenTo(ProjectActions.reset, this.reset);\n    this.listenTo(ProjectActions.updateSuccess, this.onUpdateSuccess);\n\n    this.listenTo(TeamActions.removeTeamSuccess, this.onDeleteTeam);\n  },\n\n  reset() {\n    this.itemsById = {};\n    this.loading = true;\n  },\n\n  loadInitialData(items: Project[]) {\n    this.itemsById = items.reduce((map, project) => {\n      map[project.id] = project;\n      return map;\n    }, {});\n    this.loading = false;\n    this.trigger(new Set(Object.keys(this.itemsById)));\n  },\n\n  onChangeSlug(prevSlug: string, newSlug: string) {\n    const prevProject = this.getBySlug(prevSlug);\n\n    // This shouldn't happen\n    if (!prevProject) {\n      return;\n    }\n\n    const newProject = {\n      ...prevProject,\n      slug: newSlug,\n    };\n\n    this.itemsById = {\n      ...this.itemsById,\n      [newProject.id]: newProject,\n    };\n\n    // Ideally we'd always trigger this.itemsById, but following existing patterns\n    // so we don't break things\n    this.trigger(new Set([prevProject.id]));\n  },\n\n  onCreateSuccess(project: Project) {\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: project,\n    };\n    this.trigger(new Set([project.id]));\n  },\n\n  onUpdateSuccess(data: Partial<Project>) {\n    const project = this.getById(data.id);\n    if (!project) {\n      return;\n    }\n    const newProject = Object.assign({}, project, data);\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: newProject,\n    };\n    this.trigger(new Set([data.id]));\n  },\n\n  onStatsLoadSuccess(data) {\n    const touchedIds: string[] = [];\n    Object.entries(data || {}).forEach(([projectId, stats]) => {\n      if (projectId in this.itemsById) {\n        this.itemsById[projectId].stats = stats;\n        touchedIds.push(projectId);\n      }\n    });\n    this.trigger(new Set(touchedIds));\n  },\n\n  /**\n   * Listener for when a team is completely removed\n   *\n   * @param teamSlug Team Slug\n   */\n  onDeleteTeam(teamSlug: string) {\n    // Look for team in all projects\n    const projectIds = this.getWithTeam(teamSlug).map(projectWithTeam => {\n      this.removeTeamFromProject(teamSlug, projectWithTeam);\n      return projectWithTeam.id;\n    });\n\n    this.trigger(new Set([projectIds]));\n  },\n\n  onRemoveTeam(teamSlug: string, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n    if (!project) {\n      return;\n    }\n\n    this.removeTeamFromProject(teamSlug, project);\n    this.trigger(new Set([project.id]));\n  },\n\n  onAddTeam(team: Team, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n\n    // Don't do anything if we can't find a project\n    if (!project) {\n      return;\n    }\n\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: {\n        ...project,\n        teams: [...project.teams, team],\n      },\n    };\n\n    this.trigger(new Set([project.id]));\n  },\n\n  // Internal method, does not trigger\n  removeTeamFromProject(teamSlug: string, project: Project) {\n    const newTeams = project.teams.filter(({slug}) => slug !== teamSlug);\n\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: {\n        ...project,\n        teams: newTeams,\n      },\n    };\n  },\n\n  /**\n   * Returns a list of projects that has the specified team\n   *\n   * @param {String} teamSlug Slug of team to find in projects\n   */\n  getWithTeam(teamSlug: string) {\n    return this.getAll().filter(({teams}) => teams.find(({slug}) => slug === teamSlug));\n  },\n\n  getAll() {\n    return Object.values(this.itemsById).sort((a: Project, b: Project) => {\n      if (a.slug > b.slug) {\n        return 1;\n      }\n      if (a.slug < b.slug) {\n        return -1;\n      }\n      return 0;\n    });\n  },\n\n  getById(id) {\n    return this.getAll().find(project => project.id === id);\n  },\n\n  getBySlug(slug) {\n    return this.getAll().find(project => project.slug === slug);\n  },\n\n  getBySlugs(slugs: string[]) {\n    return this.getAll().filter(project => slugs.includes(project.slug));\n  },\n\n  getState(slugs?: string[]): State {\n    return {\n      projects: slugs ? this.getBySlugs(slugs) : this.getAll(),\n      loading: this.loading,\n    };\n  },\n};\n\ntype ProjectsStore = Reflux.Store & ProjectsStoreInterface;\n\nconst ProjectsStore = Reflux.createStore(storeConfig) as ProjectsStore;\n\nexport default ProjectsStore;\n","import * as React from 'react';\n\nimport {Client} from 'app/api';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\ntype OptionProps = {\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * some where the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  {persistInFlight}: OptionProps = {}\n) =>\n  class extends React.Component<WrappedProps<P>> {\n    static displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props: WrappedProps<P>) {\n      super(props);\n      this.api = new Client();\n    }\n\n    componentWillUnmount() {\n      if (!persistInFlight) {\n        this.api.clear();\n      }\n    }\n\n    private api: Client;\n\n    render() {\n      const {api, ...props} = this.props;\n      return <WrappedComponent {...({api: api ?? this.api, ...props} as P)} />;\n    }\n  };\n\nexport default withApi;\n","import * as React from 'react';\n\nimport ProjectsStore from 'app/stores/projectsStore';\nimport {Project} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedProjectsProps = {\n  projects: Project[];\n  loadingProjects?: boolean;\n};\n\ntype State = {\n  projects: Project[];\n  loading: boolean;\n};\n\n/**\n * Higher order component that uses ProjectsStore and provides a list of projects\n */\nfunction withProjects<P extends InjectedProjectsProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithProjects extends React.Component<\n    Omit<P, keyof InjectedProjectsProps> & Partial<InjectedProjectsProps>,\n    State\n  > {\n    static displayName = `withProjects(${getDisplayName(WrappedComponent)})`;\n\n    state: State = ProjectsStore.getState();\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = ProjectsStore.listen(\n      () => this.setState(ProjectsStore.getState()),\n      undefined\n    );\n\n    render() {\n      return (\n        <WrappedComponent\n          {...(this.props as P)}\n          projects={this.state.projects}\n          loadingProjects={this.state.loading}\n        />\n      );\n    }\n  }\n\n  return WithProjects;\n}\n\nexport default withProjects;\n","var baseFlatten = require('./_baseFlatten'),\n    toInteger = require('./toInteger');\n\n/**\n * Recursively flatten `array` up to `depth` times.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @param {number} [depth=1] The maximum recursion depth.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * var array = [1, [2, [3, [4]], 5]];\n *\n * _.flattenDepth(array, 1);\n * // => [1, 2, [3, [4]], 5]\n *\n * _.flattenDepth(array, 2);\n * // => [1, 2, 3, [4], 5]\n */\nfunction flattenDepth(array, depth) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  depth = depth === undefined ? 1 : toInteger(depth);\n  return baseFlatten(array, depth);\n}\n\nmodule.exports = flattenDepth;\n"],"names":["Reflux","DEFAULT_NO_ACCESS_MESSAGE","type","icon","size","t","Access","React","render","organization","config","access","requireAll","isSuperuser","renderNoAccessMessage","children","this","props","orgAccess","hasAccess","acc","includes","hasSuperuser","user","renderProps","isRenderFunc","withOrganization","withConfig","CommandPalette","Component","componentDidMount","analytics","theme","Body","css","injectedCss","entryPoint","minSearch","maxResults","dropdownStyle","border","renderInput","getInputProps","InputWrapper","StyledInput","autoFocus","placeholder","withTheme","modalCss","space","Input","route","title","fields","name","label","help","showReturnButton","storeConfig","itemsById","loading","init","reset","listenTo","ProjectActions","onAddTeam","onChangeSlug","onCreateSuccess","loadInitialData","onStatsLoadSuccess","onRemoveTeam","onUpdateSuccess","TeamActions","onDeleteTeam","items","reduce","map","project","id","trigger","Set","Object","keys","prevSlug","newSlug","prevProject","getBySlug","newProject","slug","data","getById","assign","touchedIds","entries","forEach","projectId","stats","push","teamSlug","projectIds","getWithTeam","projectWithTeam","removeTeamFromProject","projectSlug","team","teams","newTeams","filter","getAll","find","values","sort","a","b","getBySlugs","slugs","getState","projects","WrappedComponent","persistInFlight","constructor","super","api","Client","componentWillUnmount","clear","getDisplayName","WithProjects","ProjectsStore","setState","undefined","unsubscribe","state","loadingProjects","baseFlatten","toInteger","module","exports","array","depth","length"],"sourceRoot":""}