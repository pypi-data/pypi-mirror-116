{"version":3,"sources":["CookieManager.jsx","index.jsx"],"names":["CookieManager","componentDidMount","Streamlit","setComponentReady","args","props","method","cookie","value","output","setCookie","getCookie","getAllCookies","deleteCookie","console","log","setComponentValue","render","cookies","set","path","samesite","remove","StreamlitComponentBase","propTypes","instanceOf","Cookies","isRequired","withStreamlitConnection","withCookies","ReactDOM","StrictMode","document","getElementById"],"mappings":"yQAcMA,E,4MACJC,kBAAoB,WAClBC,IAAUC,oBAEV,IAAQC,EAAS,EAAKC,MAAdD,KAEFE,EAASF,EAAI,OACbG,EAASH,EAAI,OACbI,EAAQJ,EAAI,MAEdK,EAAS,KAEb,OAAQH,GACN,IAAK,MACHG,EAAS,EAAKC,UAAUH,EAAQC,GAChC,MACF,IAAK,MACHC,EAAS,EAAKE,UAAUJ,GACxB,MACF,IAAK,SACHE,EAAS,EAAKG,gBACd,MACF,IAAK,SACHH,EAAS,EAAKI,aAAaN,GAM/BO,QAAQC,IAAIN,GACZP,IAAUc,kBAAkBP,I,EAG9BQ,OAAS,WACP,OAAO,+B,EAGTP,UAAY,SAACH,EAAQC,GAGnB,OAFoB,EAAKH,MAAjBa,QACAC,IAAIZ,EAAQC,EAAO,CAAEY,KAAM,IAAKC,SAAU,YAC3C,G,EAGTV,UAAY,SAACJ,GAGX,OAFoB,EAAKF,MAAjBa,QACcA,QAAQX,I,EAIhCM,aAAe,SAACN,GAGd,OAFoB,EAAKF,MAAjBa,QACAI,OAAOf,EAAQ,CAAEa,KAAM,IAAKC,SAAU,YACvC,G,EAGTT,cAAgB,WAEd,OADoB,EAAKP,MAAjBa,QACOA,S,YAzDSK,KA6D5BvB,EAAcwB,UAAY,CACxBN,QAASO,qBAAWC,KAASC,YAGhBC,kBAAwBC,YAAY7B,IC3EnD8B,IAASb,OACP,kBAAC,IAAMc,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.09b0457c.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React from 'react'\nimport { instanceOf } from \"prop-types\"\n\nimport { withCookies, Cookies } from \"react-cookie\"\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass CookieManager extends StreamlitComponentBase<State> {\n  componentDidMount = ()=>{\n    Streamlit.setComponentReady()\n\n    const { args } = this.props\n\n    const method = args[\"method\"]\n    const cookie = args[\"cookie\"]\n    const value = args[\"value\"]\n  \n    let output = null\n\n    switch (method) {\n      case \"set\":\n        output = this.setCookie(cookie, value)\n        break\n      case \"get\":\n        output = this.getCookie(cookie)\n        break\n      case \"getAll\":\n        output = this.getAllCookies()\n        break\n      case \"delete\":\n        output = this.deleteCookie(cookie)\n        break\n      default:\n        break\n    }\n\n    console.log(output);\n    Streamlit.setComponentValue(output)\n  }\n\n  render = () => {\n    return <div></div>\n  }\n\n  setCookie = (cookie, value) => {\n    const { cookies } = this.props\n    cookies.set(cookie, value, { path: \"/\", samesite: \"strict\" })\n    return true\n  }\n\n  getCookie = (cookie) => {\n    const { cookies } = this.props\n    const value = cookies.cookies[cookie]\n    return value\n  }\n\n  deleteCookie = (cookie) => {\n    const { cookies } = this.props\n    cookies.remove(cookie, { path: \"/\", samesite: \"strict\" })\n    return true\n  }\n\n  getAllCookies = () => {\n    const { cookies } = this.props\n    return cookies.cookies\n  }\n}\n\nCookieManager.propTypes = {\n  cookies: instanceOf(Cookies).isRequired,\n}\n\nexport default withStreamlitConnection(withCookies(CookieManager))\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CookieManager from \"./CookieManager\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <CookieManager />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}