__all__ = [
    'AssignmentEvent',
    'BaseEvent',
    'TaskEvent',
    'UserBonusEvent',
    'UserSkillEvent',
]
from datetime import datetime
from enum import Enum
from toloka.client.assignment import Assignment
from toloka.client.primitives.base import BaseTolokaObject
from toloka.client.task import Task
from toloka.client.user_bonus import UserBonus
from toloka.client.user_skill import UserSkill
from typing import (
    Any,
    Dict,
    Optional
)


class BaseEvent(BaseTolokaObject):
    def __init__(self, *, event_time: Optional[datetime] = None) -> None:
        """Method generated by attrs for class BaseEvent.
        """
        ...

    _unexpected: Optional[Dict[str, Any]]
    event_time: Optional[datetime]


class AssignmentEvent(BaseEvent):
    """Assignment-related event.

    Attributes:
        event_time: Event datetime.
        event_type: One of the folllowing event types:
            * CREATED
            * SUBMITTED
            * ACCEPTED
            * REJECTED
            * SKIPPED
            * EXPIRED
        assignment: Assignment object itself.
    """

    class Type(Enum):
        """An enumeration.
        """

        CREATED = 'CREATED'
        SUBMITTED = 'SUBMITTED'
        ACCEPTED = 'ACCEPTED'
        REJECTED = 'REJECTED'
        SKIPPED = 'SKIPPED'
        EXPIRED = 'EXPIRED'

    def __init__(
        self,
        *,
        event_time: Optional[datetime] = None,
        event_type: Optional[Type] = None,
        assignment: Optional[Assignment] = None
    ) -> None:
        """Method generated by attrs for class AssignmentEvent.
        """
        ...

    _unexpected: Optional[Dict[str, Any]]
    event_time: Optional[datetime]
    event_type: Optional[Type]
    assignment: Optional[Assignment]


class TaskEvent(BaseEvent):
    """Task-related event.

    Attributes:
        event_time: Event datetime.
        task: Task object itself.
    """

    def __init__(
        self,
        *,
        event_time: Optional[datetime] = None,
        task: Optional[Task] = None
    ) -> None:
        """Method generated by attrs for class TaskEvent.
        """
        ...

    _unexpected: Optional[Dict[str, Any]]
    event_time: Optional[datetime]
    task: Optional[Task]


class UserBonusEvent(BaseEvent):
    """UserBonus-related event.

    Attributes:
        event_time: Event datetime.
        user_bonus: UserBonus object itself.
    """

    def __init__(
        self,
        *,
        event_time: Optional[datetime] = None,
        user_bonus: Optional[UserBonus] = None
    ) -> None:
        """Method generated by attrs for class UserBonusEvent.
        """
        ...

    _unexpected: Optional[Dict[str, Any]]
    event_time: Optional[datetime]
    user_bonus: Optional[UserBonus]


class UserSkillEvent(BaseEvent):
    """UserSkill-related event.

    Attributes:
        event_time: Event datetime.
        event_type: One of the folllowing event types:
            * CREATED
            * MODIFIED
        user_skill: UserSkill object itself.
    """

    class Type(Enum):
        """An enumeration.
        """

        CREATED = 'CREATED'
        MODIFIED = 'MODIFIED'

    def __init__(
        self,
        *,
        event_time: Optional[datetime] = None,
        event_type: Optional[Type] = None,
        user_skill: Optional[UserSkill] = None
    ) -> None:
        """Method generated by attrs for class UserSkillEvent.
        """
        ...

    _unexpected: Optional[Dict[str, Any]]
    event_time: Optional[datetime]
    event_type: Optional[Type]
    user_skill: Optional[UserSkill]
