from . import DEFAULTS as DEFAULTS
from .byte_buffer import ByteBuffer as ByteBuffer
from typing import Any, Callable
from vtelem.enums.primitive import Primitive as Primitive, default_val as default_val, get_size as get_size

LOG: Any

class TypePrimitive:
    type: Any
    data: Any
    changed_cb: Any
    last_set: Any
    def __init__(self, instance: Primitive, changed_cb: Callable = ...) -> None: ...
    def __eq__(self, other) -> bool: ...
    def add(self, data: Any, time: float = ...) -> bool: ...
    def set(self, data: Any, time: float = ...) -> bool: ...
    def get(self) -> Any: ...
    def size(self) -> int: ...
    def write(self, buf: ByteBuffer, pos: int = ...) -> int: ...
    def read(self, buf: ByteBuffer, pos: int = ...) -> Any: ...

def new_default(default: str, changed_cb: Callable = ...) -> TypePrimitive: ...
