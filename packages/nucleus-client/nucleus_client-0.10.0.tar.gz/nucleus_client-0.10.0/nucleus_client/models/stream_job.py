# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StreamJob(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'client_id': 'str',
        'dt_u': 'datetime',
        'execution_mode': 'str',
        'job_name': 'str',
        'operations': 'list[StreamJobOperation]',
        'partner_id': 'str',
        'slug': 'str'
    }

    attribute_map = {
        'id': '_id',
        'client_id': 'client_id',
        'dt_u': 'dt_u',
        'execution_mode': 'execution_mode',
        'job_name': 'job_name',
        'operations': 'operations',
        'partner_id': 'partner_id',
        'slug': 'slug'
    }

    def __init__(self, id=None, client_id=None, dt_u=None, execution_mode=None, job_name=None, operations=None, partner_id=None, slug=None):  # noqa: E501
        """StreamJob - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._client_id = None
        self._dt_u = None
        self._execution_mode = None
        self._job_name = None
        self._operations = None
        self._partner_id = None
        self._slug = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if client_id is not None:
            self.client_id = client_id
        if dt_u is not None:
            self.dt_u = dt_u
        self.execution_mode = execution_mode
        self.job_name = job_name
        if operations is not None:
            self.operations = operations
        if partner_id is not None:
            self.partner_id = partner_id
        if slug is not None:
            self.slug = slug

    @property
    def id(self):
        """Gets the id of this StreamJob.  # noqa: E501


        :return: The id of this StreamJob.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StreamJob.


        :param id: The id of this StreamJob.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def client_id(self):
        """Gets the client_id of this StreamJob.  # noqa: E501


        :return: The client_id of this StreamJob.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this StreamJob.


        :param client_id: The client_id of this StreamJob.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def dt_u(self):
        """Gets the dt_u of this StreamJob.  # noqa: E501


        :return: The dt_u of this StreamJob.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this StreamJob.


        :param dt_u: The dt_u of this StreamJob.  # noqa: E501
        :type: datetime
        """

        self._dt_u = dt_u

    @property
    def execution_mode(self):
        """Gets the execution_mode of this StreamJob.  # noqa: E501


        :return: The execution_mode of this StreamJob.  # noqa: E501
        :rtype: str
        """
        return self._execution_mode

    @execution_mode.setter
    def execution_mode(self, execution_mode):
        """Sets the execution_mode of this StreamJob.


        :param execution_mode: The execution_mode of this StreamJob.  # noqa: E501
        :type: str
        """
        if execution_mode is None:
            raise ValueError("Invalid value for `execution_mode`, must not be `None`")  # noqa: E501

        self._execution_mode = execution_mode

    @property
    def job_name(self):
        """Gets the job_name of this StreamJob.  # noqa: E501


        :return: The job_name of this StreamJob.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this StreamJob.


        :param job_name: The job_name of this StreamJob.  # noqa: E501
        :type: str
        """
        if job_name is None:
            raise ValueError("Invalid value for `job_name`, must not be `None`")  # noqa: E501

        self._job_name = job_name

    @property
    def operations(self):
        """Gets the operations of this StreamJob.  # noqa: E501


        :return: The operations of this StreamJob.  # noqa: E501
        :rtype: list[StreamJobOperation]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this StreamJob.


        :param operations: The operations of this StreamJob.  # noqa: E501
        :type: list[StreamJobOperation]
        """

        self._operations = operations

    @property
    def partner_id(self):
        """Gets the partner_id of this StreamJob.  # noqa: E501


        :return: The partner_id of this StreamJob.  # noqa: E501
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this StreamJob.


        :param partner_id: The partner_id of this StreamJob.  # noqa: E501
        :type: str
        """

        self._partner_id = partner_id

    @property
    def slug(self):
        """Gets the slug of this StreamJob.  # noqa: E501


        :return: The slug of this StreamJob.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this StreamJob.


        :param slug: The slug of this StreamJob.  # noqa: E501
        :type: str
        """

        self._slug = slug

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StreamJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
