stages:
  - setup
  - static-analysis
  - tests
  - package
  - publish

variables:
  FLIT_ROOT_INSTALL: 1

  PYPI_API_USER: __token__

  # Don't forget to update the coverage threshold in .pre-commit-config.yaml
  UNITTEST_COVERAGE_THRESHOLD: 90

  VENV_BIN: /venv/bin

  BUILD_IMAGE_PATH: ${CI_REGISTRY_IMAGE}/build-image:${CI_COMMIT_SHORT_SHA}
  BUILD_IMAGE_VENV_PATH: /venv

workflow:
  rules:
    # NOTE: Gitlab-CI conditionals are not strictly shell compliant and must not use
    #       curly brackets.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'


.declare-artifacts: &declare-artifacts
  artifacts:
    expire_in: 1 week
    paths:
      - dist/


.build-harness-target:
  image: ${BUILD_IMAGE_PATH}
  script:
    - |
      ${VENV_BIN}/build-harness \
        ${TARGET}


check-dockerfile:
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    expire_in: 1 day
    when: always
    reports:
      codequality:
        - "reports/*"
    paths:
      - "reports/*"
  image:
    name: hadolint/hadolint:2.5.0-debian
  stage: setup

  script:
    - mkdir -p reports
    - |
      hadolint \
        -f gitlab_codeclimate \
        ${CI_PROJECT_DIR}/docker/Dockerfile \
        > reports/hadolint-$(md5sum ${CI_PROJECT_DIR}/docker/Dockerfile | cut -d" " -f1).json


construct-build-image:
  # https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
  # Run this build on Gitlab shared runners since it is IO intensive.
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  stage: setup
  variables:
    KANIKO_DOCKER_DIR: /kaniko/.docker

  script:
    - mkdir -p ${KANIKO_DOCKER_DIR}
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > ${KANIKO_DOCKER_DIR}/config.json
    - |
      /kaniko/executor \
        --build-arg venv_path=${BUILD_IMAGE_VENV_PATH} \
        --build-arg project_dir=${CI_PROJECT_DIR} \
        --context ${CI_PROJECT_DIR} \
        --dockerfile ${CI_PROJECT_DIR}/docker/Dockerfile \
        --destination ${BUILD_IMAGE_PATH}


formatting-check:
  extends:
    - .build-harness-target
  stage: static-analysis
  variables:
    TARGET: formatting --check


all-check:
  extends:
    - .build-harness-target
  stage: static-analysis
  variables:
    TARGET: static-analysis


flake8-check:
  extends:
    - .build-harness-target
  stage: static-analysis
  variables:
    TARGET: static-analysis --analysis flake8


mypy-check:
  extends:
    - .build-harness-target
  stage: static-analysis
  variables:
    TARGET: static-analysis --analysis mypy


pydocstyle-check:
  extends:
    - .build-harness-target
  stage: static-analysis
  variables:
    TARGET: static-analysis --analysis pydocstyle


run-tests:
  extends:
    - .build-harness-target
  stage: tests
  # Use Gitlab shared runners (untagged) for IO intensive test
  tags:
  variables:
    TARGET: unit-test


run-tests-coverage:
  extends:
    - .build-harness-target
  stage: tests
  # Use Gitlab shared runners (untagged) for IO intensive test
  tags:
  variables:
    TARGET: unit-test --check ${UNITTEST_COVERAGE_THRESHOLD}

  <<: *declare-artifacts


install-check:
  extends:
    - .build-harness-target
  stage: tests
  variables:
    TARGET: install


build-packages:
  image: ${BUILD_IMAGE_PATH}
  stage: package
  script:
    - export THIS_VERSION=$(${VENV_BIN}/release-flow)
    # log THIS_VERSION to pipeline log for debugging
    - echo ${THIS_VERSION}
    - ${VENV_BIN}/build-harness package --release-id ${THIS_VERSION}

  <<: *declare-artifacts


.publish-packages:
  image: ${BUILD_IMAGE_PATH}
  needs:
    - job: build-packages
      artifacts: true
  stage: publish

publish-packages-protected:
  extends:
    - .publish-packages
  rules:
    # NOTE: Gitlab-CI conditionals are not strictly shell compliant and must not use
    #       curly brackets.
    - if: '$CI_COMMIT_REF_NAME == "main"'
    - if: '$CI_COMMIT_TAG'
  script:
    - |
      ${VENV_BIN}/build-harness \
        publish \
          --user $PYPI_API_USER \
          --password $PYPI_API_TOKEN

publish-packages-unprotected:
  extends:
    - .publish-packages
  rules:
    # NOTE: Gitlab-CI conditionals are not strictly shell compliant and must not use
    #       curly brackets.
    - if: '$CI_COMMIT_REF_NAME =~ /feature/'
  script:
    - |
      ${VENV_BIN}/build-harness \
        publish \
          --user $PYPI_API_USER \
          --password $PYPI_API_TOKEN
