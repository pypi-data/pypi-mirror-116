{% import 'trace_common.python.jinja' as trace %}
{# expects (p, q, b, reps) #}

@strategies.composite
def traces(draw):
    chunks = []
    r = draw(strategies.randoms())
{% if p.strategy %}{# after or after-until #}
{{ trace.gen_activator(p)|indent(width=4, first=true) }}
{% else %}
    # Property scope is activated at launch.
{% endif %}
    _n = len(chunks)
{{ trace.gen_spam_chunks(b.spam)|indent(width=4, first=true) }}
    for _chunk in chunks[_n:]:
        _chunk.req_scope = True
{% if q.strategy %}{# after-until or until #}
{% set ends_via_timeout = 'False' %}
{% if 2 * b.timeout > q.min_time %}
{{ trace.gen_terminator(q, q.min_time, 2 * b.timeout)|indent(width=4, first=true) }}
{% else %}
{{ trace.gen_terminator(q, q.min_time, 2 * q.min_time)|indent(width=4, first=true) }}
{% endif %}
{% else %}
{% set ends_via_timeout = 'True' %}
    # Property scope is terminated at shutdown.
{{ trace.gen_delay_chunk(b.timeout, 2 * b.timeout, relative_delay=true)|indent(width=4, first=true) }}
    chunk.req_scope = True
{% endif %}
    return Trace(chunks, reps={{ reps|default(1) }}, {# -#}
                 ends_via_timeout={{ ends_via_timeout }})
