# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import signing_pb2 as signing__pb2


class SigningStub(object):
    """*
    Signing service allows an Imp node to sign and verify messages with the connected lightning node.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SignMessage = channel.unary_unary(
                '/signing.Signing/SignMessage',
                request_serializer=signing__pb2.SignRequest.SerializeToString,
                response_deserializer=signing__pb2.SignResponse.FromString,
                )
        self.VerifySignature = channel.unary_unary(
                '/signing.Signing/VerifySignature',
                request_serializer=signing__pb2.VerifyRequest.SerializeToString,
                response_deserializer=signing__pb2.VerifyResponse.FromString,
                )


class SigningServicer(object):
    """*
    Signing service allows an Imp node to sign and verify messages with the connected lightning node.
    """

    def SignMessage(self, request, context):
        """*
        SignMessage signs a message with your node's private key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifySignature(self, request, context):
        """*
        Verifymessage verifies a message was signed from another node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SigningServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SignMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SignMessage,
                    request_deserializer=signing__pb2.SignRequest.FromString,
                    response_serializer=signing__pb2.SignResponse.SerializeToString,
            ),
            'VerifySignature': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifySignature,
                    request_deserializer=signing__pb2.VerifyRequest.FromString,
                    response_serializer=signing__pb2.VerifyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'signing.Signing', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Signing(object):
    """*
    Signing service allows an Imp node to sign and verify messages with the connected lightning node.
    """

    @staticmethod
    def SignMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/signing.Signing/SignMessage',
            signing__pb2.SignRequest.SerializeToString,
            signing__pb2.SignResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifySignature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/signing.Signing/VerifySignature',
            signing__pb2.VerifyRequest.SerializeToString,
            signing__pb2.VerifyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
