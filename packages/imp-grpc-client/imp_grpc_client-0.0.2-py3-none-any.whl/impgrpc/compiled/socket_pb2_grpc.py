# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import socket_pb2 as socket__pb2


class SocketStub(object):
    """*
    Socket service allows for p2p sockets to be established between Impervious nodes.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendSocket = channel.unary_unary(
                '/socket.Socket/SendSocket',
                request_serializer=socket__pb2.SendSocketRequest.SerializeToString,
                response_deserializer=socket__pb2.SendSocketResponse.FromString,
                )
        self.StartSocket = channel.unary_unary(
                '/socket.Socket/StartSocket',
                request_serializer=socket__pb2.StartSocketRequest.SerializeToString,
                response_deserializer=socket__pb2.StartSocketResponse.FromString,
                )
        self.StopSocket = channel.unary_unary(
                '/socket.Socket/StopSocket',
                request_serializer=socket__pb2.StopSocketRequest.SerializeToString,
                response_deserializer=socket__pb2.StopSocketResponse.FromString,
                )


class SocketServicer(object):
    """*
    Socket service allows for p2p sockets to be established between Impervious nodes.
    """

    def SendSocket(self, request, context):
        """*
        SendSocket sends a socket request to another node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartSocket(self, request, context):
        """*
        StartSocket starts the socket on your Impervious node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopSocket(self, request, context):
        """*
        StopSocket stops the socket on your Impervious node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SocketServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendSocket': grpc.unary_unary_rpc_method_handler(
                    servicer.SendSocket,
                    request_deserializer=socket__pb2.SendSocketRequest.FromString,
                    response_serializer=socket__pb2.SendSocketResponse.SerializeToString,
            ),
            'StartSocket': grpc.unary_unary_rpc_method_handler(
                    servicer.StartSocket,
                    request_deserializer=socket__pb2.StartSocketRequest.FromString,
                    response_serializer=socket__pb2.StartSocketResponse.SerializeToString,
            ),
            'StopSocket': grpc.unary_unary_rpc_method_handler(
                    servicer.StopSocket,
                    request_deserializer=socket__pb2.StopSocketRequest.FromString,
                    response_serializer=socket__pb2.StopSocketResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'socket.Socket', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Socket(object):
    """*
    Socket service allows for p2p sockets to be established between Impervious nodes.
    """

    @staticmethod
    def SendSocket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/socket.Socket/SendSocket',
            socket__pb2.SendSocketRequest.SerializeToString,
            socket__pb2.SendSocketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartSocket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/socket.Socket/StartSocket',
            socket__pb2.StartSocketRequest.SerializeToString,
            socket__pb2.StartSocketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopSocket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/socket.Socket/StopSocket',
            socket__pb2.StopSocketRequest.SerializeToString,
            socket__pb2.StopSocketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
