# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import vpn_pb2 as vpn__pb2


class VPNStub(object):
    """*
    VPN service allows for an Encrypted Wireguard VPN between Impervious nodes.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestQuote = channel.unary_unary(
                '/vpn.VPN/RequestQuote',
                request_serializer=vpn__pb2.RequestQuoteRequest.SerializeToString,
                response_deserializer=vpn__pb2.RequestQuoteResponse.FromString,
                )
        self.AcceptContract = channel.unary_unary(
                '/vpn.VPN/AcceptContract',
                request_serializer=vpn__pb2.AcceptContractRequest.SerializeToString,
                response_deserializer=vpn__pb2.AcceptContractResponse.FromString,
                )
        self.RefreshContract = channel.unary_unary(
                '/vpn.VPN/RefreshContract',
                request_serializer=vpn__pb2.RefreshContractRequest.SerializeToString,
                response_deserializer=vpn__pb2.RefreshContractResponse.FromString,
                )


class VPNServicer(object):
    """*
    VPN service allows for an Encrypted Wireguard VPN between Impervious nodes.
    """

    def RequestQuote(self, request, context):
        """*
        RequestQuote requests a quote from another node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcceptContract(self, request, context):
        """*
        AcceptContract accepts and pays for a specific contract.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefreshContract(self, request, context):
        """*
        RefreshContract accepts and pays for a specific contract refresh on an existing VPN.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VPNServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestQuote': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestQuote,
                    request_deserializer=vpn__pb2.RequestQuoteRequest.FromString,
                    response_serializer=vpn__pb2.RequestQuoteResponse.SerializeToString,
            ),
            'AcceptContract': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptContract,
                    request_deserializer=vpn__pb2.AcceptContractRequest.FromString,
                    response_serializer=vpn__pb2.AcceptContractResponse.SerializeToString,
            ),
            'RefreshContract': grpc.unary_unary_rpc_method_handler(
                    servicer.RefreshContract,
                    request_deserializer=vpn__pb2.RefreshContractRequest.FromString,
                    response_serializer=vpn__pb2.RefreshContractResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vpn.VPN', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VPN(object):
    """*
    VPN service allows for an Encrypted Wireguard VPN between Impervious nodes.
    """

    @staticmethod
    def RequestQuote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vpn.VPN/RequestQuote',
            vpn__pb2.RequestQuoteRequest.SerializeToString,
            vpn__pb2.RequestQuoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AcceptContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vpn.VPN/AcceptContract',
            vpn__pb2.AcceptContractRequest.SerializeToString,
            vpn__pb2.AcceptContractResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefreshContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vpn.VPN/RefreshContract',
            vpn__pb2.RefreshContractRequest.SerializeToString,
            vpn__pb2.RefreshContractResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
