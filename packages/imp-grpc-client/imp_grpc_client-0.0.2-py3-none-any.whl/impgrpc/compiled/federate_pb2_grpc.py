# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import federate_pb2 as federate__pb2


class FederateStub(object):
    """*
    Federate service allows for P2P federation between Impervious nodes.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestFederate = channel.unary_unary(
                '/federate.Federate/RequestFederate',
                request_serializer=federate__pb2.RequestFederateRequest.SerializeToString,
                response_deserializer=federate__pb2.RequestFederateResponse.FromString,
                )
        self.LeaveFederation = channel.unary_unary(
                '/federate.Federate/LeaveFederation',
                request_serializer=federate__pb2.LeaveFederationRequest.SerializeToString,
                response_deserializer=federate__pb2.LeaveFederationResponse.FromString,
                )


class FederateServicer(object):
    """*
    Federate service allows for P2P federation between Impervious nodes.
    """

    def RequestFederate(self, request, context):
        """*
        RequestFederation performs the federation request to a specific peer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LeaveFederation(self, request, context):
        """*
        LeaveFederation performs the removal of a federated peer (upon message receipt).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FederateServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestFederate': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestFederate,
                    request_deserializer=federate__pb2.RequestFederateRequest.FromString,
                    response_serializer=federate__pb2.RequestFederateResponse.SerializeToString,
            ),
            'LeaveFederation': grpc.unary_unary_rpc_method_handler(
                    servicer.LeaveFederation,
                    request_deserializer=federate__pb2.LeaveFederationRequest.FromString,
                    response_serializer=federate__pb2.LeaveFederationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'federate.Federate', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Federate(object):
    """*
    Federate service allows for P2P federation between Impervious nodes.
    """

    @staticmethod
    def RequestFederate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/federate.Federate/RequestFederate',
            federate__pb2.RequestFederateRequest.SerializeToString,
            federate__pb2.RequestFederateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LeaveFederation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/federate.Federate/LeaveFederation',
            federate__pb2.LeaveFederationRequest.SerializeToString,
            federate__pb2.LeaveFederationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
