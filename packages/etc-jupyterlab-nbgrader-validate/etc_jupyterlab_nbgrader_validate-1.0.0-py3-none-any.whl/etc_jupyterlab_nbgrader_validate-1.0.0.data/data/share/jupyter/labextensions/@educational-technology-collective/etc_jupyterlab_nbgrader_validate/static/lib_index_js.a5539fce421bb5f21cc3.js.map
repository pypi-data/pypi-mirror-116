{"version":3,"file":"lib_index_js.a5539fce421bb5f21cc3.js","mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCwD;AACf;AACgC;AAC/B;AACC;AACJ;AACvC;AACO,qCAAqC,oDAAK;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,0CAA0C,qDAAM;AAChD,+CAA+C,qDAAM;AACrD,+CAA+C,qDAAM;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,kCAAkC,oDAAU;AAC5C;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,4FAA4F,WAAW,KAAK,OAAO;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,mCAAmC,gEAAU;AAC7C;AACA,8BAA8B,mDAAM,GAAG,YAAY;AACnD,8BAA8B,iEAAe;AAC7C,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+DAAa;AAChD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://@educational-technology-collective/etc_jupyterlab_nbgrader_validate/./lib/handler.js","webpack://@educational-technology-collective/etc_jupyterlab_nbgrader_validate/./lib/index.js"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'jupyterlab-nbgrader-validate', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { DisposableDelegate } from '@lumino/disposable';\nimport { Widget } from '@lumino/widgets';\nimport { showDialog, Dialog, ToolbarButton } from '@jupyterlab/apputils';\nimport { Token } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { requestAPI } from './handler';\nconst PLUGIN_ID = '@educational-technology-collective/etc_jupyterlab_nbgrader_validate:plugin';\nexport const IValidateButtonExtension = new Token(PLUGIN_ID);\n/**\n * Initialization data for the jupyterlab-nbgrader-validate extension.\n */\nconst plugin = {\n    id: PLUGIN_ID,\n    provides: IValidateButtonExtension,\n    autoStart: true,\n    activate\n};\n/**\n * A notebook widget extension that adds a button to the toolbar.\n */\nexport class ValidateButtonExtension {\n    constructor() {\n        this._validateButtonClicked = new Signal(this);\n        this._validationResultsDisplayed = new Signal(this);\n        this._validationResultsDismissed = new Signal(this);\n    }\n    /**\n     * Create a new extension for the notebook panel widget.\n     */\n    createNew(panel, context) {\n        const validate = async () => {\n            try {\n                this._validateButtonClicked.emit({\n                    event_name: 'validate_button_clicked',\n                    notebook_panel: panel\n                });\n                //  Emit a Signal when the validate button is clicked; \n                //  hence, emit a Signal at the start of the handler.\n                let validateButton = document.getElementsByClassName('validate-button')[0];\n                validateButton.children[0].children[0].innerHTML = \"Validating...\";\n                // POST request\n                const notebookPath = panel.context.path;\n                const dataToSend = { name: notebookPath };\n                let reply;\n                try {\n                    reply = await requestAPI('validate', {\n                        body: JSON.stringify(dataToSend),\n                        method: 'POST'\n                    });\n                    console.log(reply);\n                }\n                catch (reason) {\n                    throw new Error(`Error on POST /jupyterlab-nbgrader-validate/validate ${dataToSend}.\\n${reason}`);\n                }\n                finally {\n                    validateButton.children[0].children[0].innerHTML = \"Validate\";\n                }\n                let body = document.createElement('div');\n                let pre = document.createElement('pre');\n                pre.innerText = reply.output;\n                body.appendChild(pre);\n                this._validationResultsDisplayed.emit({\n                    event_name: 'validate_results_displayed',\n                    notebook_panel: panel,\n                    message: reply.output\n                });\n                //  Emit a Signal when the Validation Results are displayed; \n                //  hence, emit a Signal just prior to displaying the results.\n                let result = await showDialog({\n                    title: 'Validation Results',\n                    body: new Widget({ node: body }),\n                    buttons: [Dialog.okButton()],\n                });\n                this._validationResultsDismissed.emit({\n                    event_name: 'validate_results_dismissed',\n                    notebook_panel: panel,\n                    message: result\n                });\n                //  Emit a Signal once the dialog has been dismissed (either accepted or declined);\n                //  hence, emit a Signal with the result message.\n            }\n            catch (e) {\n                console.error(e);\n            }\n        };\n        const validateButton = new ToolbarButton({\n            className: 'validate-button',\n            label: 'Validate',\n            onClick: validate,\n            tooltip: 'Validate'\n        });\n        panel.toolbar.insertItem(10, 'validateNotebook', validateButton);\n        return new DisposableDelegate(() => {\n            validateButton.dispose();\n        });\n    }\n    get validateButtonClicked() {\n        return this._validateButtonClicked;\n    }\n    get validationResultsDisplayed() {\n        return this._validationResultsDisplayed;\n    }\n    get validationResultsDismissed() {\n        return this._validationResultsDismissed;\n    }\n}\n/**\n * Activate the extension.\n */\nfunction activate(app) {\n    const validateButtonExtension = new ValidateButtonExtension();\n    app.docRegistry.addWidgetExtension('Notebook', validateButtonExtension);\n    return validateButtonExtension;\n}\n/**\n * Export the plugin as default.\n */\nexport default plugin;\n"],"names":[],"sourceRoot":""}