# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetOssBackupPlansPlanResult',
    'GetVaultsVaultResult',
]

@pulumi.output_type
class GetOssBackupPlansPlanResult(dict):
    def __init__(__self__, *,
                 backup_type: str,
                 bucket: str,
                 disabled: bool,
                 id: str,
                 oss_backup_plan_id: str,
                 oss_backup_plan_name: str,
                 prefix: str,
                 retention: str,
                 schedule: str,
                 vault_id: str):
        """
        :param str backup_type: Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
        :param str bucket: The OSS Bucket Name.
        :param str oss_backup_plan_name: The Configuration Page of a Backup Plan Name. 1-64 Characters, requiring a Single Warehouse under Each of the Data Source Type Drop-down List of the Configuration Page of a Backup Plan Name Is Unique.
        :param str retention: Backup Retention Period, the Minimum Value of 1.
        :param str schedule: Backup strategy. Optional format: I|{startTime}|{interval} * startTime Backup start time, UNIX time, in seconds. * interval ISO8601 time interval. E.g: ** PT1H, one hour apart. ** P1D, one day apart. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed, the next backup task will not be triggered.
        :param str vault_id: Vault ID.
        """
        pulumi.set(__self__, "backup_type", backup_type)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "oss_backup_plan_id", oss_backup_plan_id)
        pulumi.set(__self__, "oss_backup_plan_name", oss_backup_plan_name)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "retention", retention)
        pulumi.set(__self__, "schedule", schedule)
        pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> str:
        """
        Backup Type. Valid Values: * Complete. Valid values: `COMPLETE`.
        """
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The OSS Bucket Name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ossBackupPlanId")
    def oss_backup_plan_id(self) -> str:
        return pulumi.get(self, "oss_backup_plan_id")

    @property
    @pulumi.getter(name="ossBackupPlanName")
    def oss_backup_plan_name(self) -> str:
        """
        The Configuration Page of a Backup Plan Name. 1-64 Characters, requiring a Single Warehouse under Each of the Data Source Type Drop-down List of the Configuration Page of a Backup Plan Name Is Unique.
        """
        return pulumi.get(self, "oss_backup_plan_name")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def retention(self) -> str:
        """
        Backup Retention Period, the Minimum Value of 1.
        """
        return pulumi.get(self, "retention")

    @property
    @pulumi.getter
    def schedule(self) -> str:
        """
        Backup strategy. Optional format: I|{startTime}|{interval} * startTime Backup start time, UNIX time, in seconds. * interval ISO8601 time interval. E.g: ** PT1H, one hour apart. ** P1D, one day apart. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed, the next backup task will not be triggered.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> str:
        """
        Vault ID.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetVaultsVaultResult(dict):
    def __init__(__self__, *,
                 bucket_name: str,
                 bytes_done: str,
                 create_time: str,
                 dedup: bool,
                 description: str,
                 id: str,
                 index_available: bool,
                 index_level: str,
                 index_update_time: str,
                 latest_replication_time: str,
                 payment_type: str,
                 replication: bool,
                 replication_source_region_id: str,
                 replication_source_vault_id: str,
                 retention: str,
                 search_enabled: bool,
                 source_types: Sequence[str],
                 status: str,
                 storage_size: str,
                 updated_time: str,
                 vault_id: str,
                 vault_name: str,
                 vault_status_message: str,
                 vault_storage_class: str,
                 vault_type: str):
        """
        :param str bucket_name: The name of the OSS bucket of the Vault.
        :param str bytes_done: The amount of backup data. The unit is Byte.
        :param str create_time: The creation time of the Vault. UNIX time in seconds.
        :param bool dedup: Whether to enable the deduplication function for the database backup Vault.
        :param str description: The description of the Vault.
        :param str id: The ID of Vault.
        :param bool index_available: Index available.
        :param str index_level: Index level.
        :param str index_update_time: Index update time.
        :param str latest_replication_time: The time of the last remote backup synchronization.
        :param str payment_type: Billing model, possible values:
        :param bool replication: Whether it is a remote backup warehouse. It's a boolean value.
        :param str replication_source_region_id: The region ID to which the remote backup Vault belongs.
        :param str replication_source_vault_id: The source vault ID of the remote backup Vault.
        :param str retention: Warehouse-level data retention days, only valid for archive libraries.
        :param bool search_enabled: Whether to enable the backup search function.
        :param str status: The status of Vault. Valid values: `INITIALIZING`, `CREATED`, `ERROR`, `UNKNOWN`.
        :param str storage_size: Backup vault storage usage. The unit is Byte.
        :param str updated_time: The update time of the Vault. UNIX time in seconds.
        :param str vault_id: The ID of Vault.
        :param str vault_name: The name of Vault.
        :param str vault_status_message: Error status information of Vault.
        :param str vault_storage_class: The storage class of Vault. Valid values: `STANDARD`.
        :param str vault_type: The type of Vault. Valid values: `STANDARD`.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "bytes_done", bytes_done)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "dedup", dedup)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "index_available", index_available)
        pulumi.set(__self__, "index_level", index_level)
        pulumi.set(__self__, "index_update_time", index_update_time)
        pulumi.set(__self__, "latest_replication_time", latest_replication_time)
        pulumi.set(__self__, "payment_type", payment_type)
        pulumi.set(__self__, "replication", replication)
        pulumi.set(__self__, "replication_source_region_id", replication_source_region_id)
        pulumi.set(__self__, "replication_source_vault_id", replication_source_vault_id)
        pulumi.set(__self__, "retention", retention)
        pulumi.set(__self__, "search_enabled", search_enabled)
        pulumi.set(__self__, "source_types", source_types)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage_size", storage_size)
        pulumi.set(__self__, "updated_time", updated_time)
        pulumi.set(__self__, "vault_id", vault_id)
        pulumi.set(__self__, "vault_name", vault_name)
        pulumi.set(__self__, "vault_status_message", vault_status_message)
        pulumi.set(__self__, "vault_storage_class", vault_storage_class)
        pulumi.set(__self__, "vault_type", vault_type)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        """
        The name of the OSS bucket of the Vault.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="bytesDone")
    def bytes_done(self) -> str:
        """
        The amount of backup data. The unit is Byte.
        """
        return pulumi.get(self, "bytes_done")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The creation time of the Vault. UNIX time in seconds.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def dedup(self) -> bool:
        """
        Whether to enable the deduplication function for the database backup Vault.
        """
        return pulumi.get(self, "dedup")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the Vault.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of Vault.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="indexAvailable")
    def index_available(self) -> bool:
        """
        Index available.
        """
        return pulumi.get(self, "index_available")

    @property
    @pulumi.getter(name="indexLevel")
    def index_level(self) -> str:
        """
        Index level.
        """
        return pulumi.get(self, "index_level")

    @property
    @pulumi.getter(name="indexUpdateTime")
    def index_update_time(self) -> str:
        """
        Index update time.
        """
        return pulumi.get(self, "index_update_time")

    @property
    @pulumi.getter(name="latestReplicationTime")
    def latest_replication_time(self) -> str:
        """
        The time of the last remote backup synchronization.
        """
        return pulumi.get(self, "latest_replication_time")

    @property
    @pulumi.getter(name="paymentType")
    def payment_type(self) -> str:
        """
        Billing model, possible values:
        """
        return pulumi.get(self, "payment_type")

    @property
    @pulumi.getter
    def replication(self) -> bool:
        """
        Whether it is a remote backup warehouse. It's a boolean value.
        """
        return pulumi.get(self, "replication")

    @property
    @pulumi.getter(name="replicationSourceRegionId")
    def replication_source_region_id(self) -> str:
        """
        The region ID to which the remote backup Vault belongs.
        """
        return pulumi.get(self, "replication_source_region_id")

    @property
    @pulumi.getter(name="replicationSourceVaultId")
    def replication_source_vault_id(self) -> str:
        """
        The source vault ID of the remote backup Vault.
        """
        return pulumi.get(self, "replication_source_vault_id")

    @property
    @pulumi.getter
    def retention(self) -> str:
        """
        Warehouse-level data retention days, only valid for archive libraries.
        """
        return pulumi.get(self, "retention")

    @property
    @pulumi.getter(name="searchEnabled")
    def search_enabled(self) -> bool:
        """
        Whether to enable the backup search function.
        """
        return pulumi.get(self, "search_enabled")

    @property
    @pulumi.getter(name="sourceTypes")
    def source_types(self) -> Sequence[str]:
        return pulumi.get(self, "source_types")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of Vault. Valid values: `INITIALIZING`, `CREATED`, `ERROR`, `UNKNOWN`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> str:
        """
        Backup vault storage usage. The unit is Byte.
        """
        return pulumi.get(self, "storage_size")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> str:
        """
        The update time of the Vault. UNIX time in seconds.
        """
        return pulumi.get(self, "updated_time")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> str:
        """
        The ID of Vault.
        """
        return pulumi.get(self, "vault_id")

    @property
    @pulumi.getter(name="vaultName")
    def vault_name(self) -> str:
        """
        The name of Vault.
        """
        return pulumi.get(self, "vault_name")

    @property
    @pulumi.getter(name="vaultStatusMessage")
    def vault_status_message(self) -> str:
        """
        Error status information of Vault.
        """
        return pulumi.get(self, "vault_status_message")

    @property
    @pulumi.getter(name="vaultStorageClass")
    def vault_storage_class(self) -> str:
        """
        The storage class of Vault. Valid values: `STANDARD`.
        """
        return pulumi.get(self, "vault_storage_class")

    @property
    @pulumi.getter(name="vaultType")
    def vault_type(self) -> str:
        """
        The type of Vault. Valid values: `STANDARD`.
        """
        return pulumi.get(self, "vault_type")


