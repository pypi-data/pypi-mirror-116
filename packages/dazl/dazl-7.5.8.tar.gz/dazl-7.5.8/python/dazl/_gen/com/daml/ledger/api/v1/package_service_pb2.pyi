# Copyright (c) 2017-2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
# fmt: off
# isort: skip_file

import typing as _typing

from google.protobuf.descriptor import EnumDescriptor, FieldDescriptor as __FieldDescriptor
from google.protobuf.internal.containers import RepeatedScalarFieldContainer
from google.protobuf.message import Message as _Message

from .trace_context_pb2 import TraceContext

__all__ = [
    "ListPackagesRequest",
    "ListPackagesResponse",
    "GetPackageRequest",
    "GetPackageResponse",
    "GetPackageStatusRequest",
    "GetPackageStatusResponse",
]

class PackageStatus:
    DESCRIPTOR: _typing.ClassVar[EnumDescriptor] = ...
    UNKNOWN: _typing.ClassVar[_typing.Literal[0]] = ...
    REGISTERED: _typing.ClassVar[_typing.Literal[1]] = ...
UNKNOWN = _typing.Literal[0]
REGISTERED = _typing.Literal[1]

class HashFunction:
    DESCRIPTOR: _typing.ClassVar[EnumDescriptor] = ...
    SHA256: _typing.ClassVar[_typing.Literal[0]] = ...
SHA256 = _typing.Literal[0]


class ListPackagesRequest(_Message):
    ledger_id: str
    @property
    def trace_context(self) -> TraceContext: ...
    def __init__(self, *, ledger_id: _typing.Optional[str] = ..., trace_context: _typing.Optional[TraceContext] = ...): ...
    def __eq__(self, other_msg: _typing.Optional[_typing.Any]) -> bool: ...
    def __str__(self) -> str: ...
    def __unicode__(self) -> str: ...
    def MergeFrom(self, other_msg: ListPackagesRequest) -> None: ...
    def Clear(self) -> None: ...
    def SetInParent(self) -> None: ...
    def IsInitialized(self) -> bool: ...
    def ParseFromString(self, serialized: bytes) -> int: ...
    def MergeFromString(self, serialized: bytes) -> int: ...
    def SerializeToString(self, *, deterministic: bool = ...) -> bytes: ...
    def SerializePartialToString(self, *, deterministic: bool = ...) -> bytes: ...
    def ListFields(self) -> _typing.Sequence[_typing.Tuple[__FieldDescriptor, _typing.Any]]: ...
    def HasField(self, field_name: _typing.Literal["ledger_id", "trace_context"]) -> bool: ...
    def ClearField(self, field_name: _typing.Literal["ledger_id", "trace_context"]) -> None: ...
    def WhichOneof(self, oneof_group: _typing.NoReturn) -> _typing.NoReturn: ...
    def HasExtension(self, extension_handle: _typing.Any) -> bool: ...
    def ClearExtension(self, extension_handle: _typing.Any) -> None: ...
    def UnknownFields(self) -> _typing.Any: ...
    def DiscardUnknownFields(self) -> None: ...
    def ByteSize(self) -> int: ...
    def _SetListener(self, message_listener: _typing.Any) -> None: ...

class ListPackagesResponse(_Message):
    @property
    def package_ids(self) -> RepeatedScalarFieldContainer[str]: ...
    def __init__(self, *, package_ids: _typing.Optional[_typing.Iterable[str]] = ...): ...
    def __eq__(self, other_msg: _typing.Optional[_typing.Any]) -> bool: ...
    def __str__(self) -> str: ...
    def __unicode__(self) -> str: ...
    def MergeFrom(self, other_msg: ListPackagesResponse) -> None: ...
    def Clear(self) -> None: ...
    def SetInParent(self) -> None: ...
    def IsInitialized(self) -> bool: ...
    def ParseFromString(self, serialized: bytes) -> int: ...
    def MergeFromString(self, serialized: bytes) -> int: ...
    def SerializeToString(self, *, deterministic: bool = ...) -> bytes: ...
    def SerializePartialToString(self, *, deterministic: bool = ...) -> bytes: ...
    def ListFields(self) -> _typing.Sequence[_typing.Tuple[__FieldDescriptor, _typing.Any]]: ...
    def HasField(self, field_name: _typing.Literal["package_ids"]) -> bool: ...
    def ClearField(self, field_name: _typing.Literal["package_ids"]) -> None: ...
    def WhichOneof(self, oneof_group: _typing.NoReturn) -> _typing.NoReturn: ...
    def HasExtension(self, extension_handle: _typing.Any) -> bool: ...
    def ClearExtension(self, extension_handle: _typing.Any) -> None: ...
    def UnknownFields(self) -> _typing.Any: ...
    def DiscardUnknownFields(self) -> None: ...
    def ByteSize(self) -> int: ...
    def _SetListener(self, message_listener: _typing.Any) -> None: ...

class GetPackageRequest(_Message):
    ledger_id: str
    package_id: str
    @property
    def trace_context(self) -> TraceContext: ...
    def __init__(self, *, ledger_id: _typing.Optional[str] = ..., package_id: _typing.Optional[str] = ..., trace_context: _typing.Optional[TraceContext] = ...): ...
    def __eq__(self, other_msg: _typing.Optional[_typing.Any]) -> bool: ...
    def __str__(self) -> str: ...
    def __unicode__(self) -> str: ...
    def MergeFrom(self, other_msg: GetPackageRequest) -> None: ...
    def Clear(self) -> None: ...
    def SetInParent(self) -> None: ...
    def IsInitialized(self) -> bool: ...
    def ParseFromString(self, serialized: bytes) -> int: ...
    def MergeFromString(self, serialized: bytes) -> int: ...
    def SerializeToString(self, *, deterministic: bool = ...) -> bytes: ...
    def SerializePartialToString(self, *, deterministic: bool = ...) -> bytes: ...
    def ListFields(self) -> _typing.Sequence[_typing.Tuple[__FieldDescriptor, _typing.Any]]: ...
    def HasField(self, field_name: _typing.Literal["ledger_id", "package_id", "trace_context"]) -> bool: ...
    def ClearField(self, field_name: _typing.Literal["ledger_id", "package_id", "trace_context"]) -> None: ...
    def WhichOneof(self, oneof_group: _typing.NoReturn) -> _typing.NoReturn: ...
    def HasExtension(self, extension_handle: _typing.Any) -> bool: ...
    def ClearExtension(self, extension_handle: _typing.Any) -> None: ...
    def UnknownFields(self) -> _typing.Any: ...
    def DiscardUnknownFields(self) -> None: ...
    def ByteSize(self) -> int: ...
    def _SetListener(self, message_listener: _typing.Any) -> None: ...

class GetPackageResponse(_Message):
    hash_function: _typing.Literal[0]
    archive_payload: bytes
    hash: str
    def __init__(self, *, hash_function: _typing.Optional[_typing.Literal['SHA256', 0]] = ..., archive_payload: _typing.Optional[bytes] = ..., hash: _typing.Optional[str] = ...): ...
    def __eq__(self, other_msg: _typing.Optional[_typing.Any]) -> bool: ...
    def __str__(self) -> str: ...
    def __unicode__(self) -> str: ...
    def MergeFrom(self, other_msg: GetPackageResponse) -> None: ...
    def Clear(self) -> None: ...
    def SetInParent(self) -> None: ...
    def IsInitialized(self) -> bool: ...
    def ParseFromString(self, serialized: bytes) -> int: ...
    def MergeFromString(self, serialized: bytes) -> int: ...
    def SerializeToString(self, *, deterministic: bool = ...) -> bytes: ...
    def SerializePartialToString(self, *, deterministic: bool = ...) -> bytes: ...
    def ListFields(self) -> _typing.Sequence[_typing.Tuple[__FieldDescriptor, _typing.Any]]: ...
    def HasField(self, field_name: _typing.Literal["hash_function", "archive_payload", "hash"]) -> bool: ...
    def ClearField(self, field_name: _typing.Literal["hash_function", "archive_payload", "hash"]) -> None: ...
    def WhichOneof(self, oneof_group: _typing.NoReturn) -> _typing.NoReturn: ...
    def HasExtension(self, extension_handle: _typing.Any) -> bool: ...
    def ClearExtension(self, extension_handle: _typing.Any) -> None: ...
    def UnknownFields(self) -> _typing.Any: ...
    def DiscardUnknownFields(self) -> None: ...
    def ByteSize(self) -> int: ...
    def _SetListener(self, message_listener: _typing.Any) -> None: ...

class GetPackageStatusRequest(_Message):
    ledger_id: str
    package_id: str
    @property
    def trace_context(self) -> TraceContext: ...
    def __init__(self, *, ledger_id: _typing.Optional[str] = ..., package_id: _typing.Optional[str] = ..., trace_context: _typing.Optional[TraceContext] = ...): ...
    def __eq__(self, other_msg: _typing.Optional[_typing.Any]) -> bool: ...
    def __str__(self) -> str: ...
    def __unicode__(self) -> str: ...
    def MergeFrom(self, other_msg: GetPackageStatusRequest) -> None: ...
    def Clear(self) -> None: ...
    def SetInParent(self) -> None: ...
    def IsInitialized(self) -> bool: ...
    def ParseFromString(self, serialized: bytes) -> int: ...
    def MergeFromString(self, serialized: bytes) -> int: ...
    def SerializeToString(self, *, deterministic: bool = ...) -> bytes: ...
    def SerializePartialToString(self, *, deterministic: bool = ...) -> bytes: ...
    def ListFields(self) -> _typing.Sequence[_typing.Tuple[__FieldDescriptor, _typing.Any]]: ...
    def HasField(self, field_name: _typing.Literal["ledger_id", "package_id", "trace_context"]) -> bool: ...
    def ClearField(self, field_name: _typing.Literal["ledger_id", "package_id", "trace_context"]) -> None: ...
    def WhichOneof(self, oneof_group: _typing.NoReturn) -> _typing.NoReturn: ...
    def HasExtension(self, extension_handle: _typing.Any) -> bool: ...
    def ClearExtension(self, extension_handle: _typing.Any) -> None: ...
    def UnknownFields(self) -> _typing.Any: ...
    def DiscardUnknownFields(self) -> None: ...
    def ByteSize(self) -> int: ...
    def _SetListener(self, message_listener: _typing.Any) -> None: ...

class GetPackageStatusResponse(_Message):
    package_status: _typing.Literal[0, 1]
    def __init__(self, *, package_status: _typing.Optional[_typing.Literal['UNKNOWN', 0, 'REGISTERED', 1]] = ...): ...
    def __eq__(self, other_msg: _typing.Optional[_typing.Any]) -> bool: ...
    def __str__(self) -> str: ...
    def __unicode__(self) -> str: ...
    def MergeFrom(self, other_msg: GetPackageStatusResponse) -> None: ...
    def Clear(self) -> None: ...
    def SetInParent(self) -> None: ...
    def IsInitialized(self) -> bool: ...
    def ParseFromString(self, serialized: bytes) -> int: ...
    def MergeFromString(self, serialized: bytes) -> int: ...
    def SerializeToString(self, *, deterministic: bool = ...) -> bytes: ...
    def SerializePartialToString(self, *, deterministic: bool = ...) -> bytes: ...
    def ListFields(self) -> _typing.Sequence[_typing.Tuple[__FieldDescriptor, _typing.Any]]: ...
    def HasField(self, field_name: _typing.Literal["package_status"]) -> bool: ...
    def ClearField(self, field_name: _typing.Literal["package_status"]) -> None: ...
    def WhichOneof(self, oneof_group: _typing.NoReturn) -> _typing.NoReturn: ...
    def HasExtension(self, extension_handle: _typing.Any) -> bool: ...
    def ClearExtension(self, extension_handle: _typing.Any) -> None: ...
    def UnknownFields(self) -> _typing.Any: ...
    def DiscardUnknownFields(self) -> None: ...
    def ByteSize(self) -> int: ...
    def _SetListener(self, message_listener: _typing.Any) -> None: ...
