# Copyright (c) 2017-2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
# fmt: off
# isort: skip_file

import typing as _typing

from google.protobuf.descriptor import FieldDescriptor as __FieldDescriptor
from google.protobuf.message import Message as _Message

__all__ = [
    "LedgerOffset",
]


class LedgerOffset(_Message):
    absolute: str
    boundary: _typing.Literal[0, 1]
    @_typing.overload
    def __init__(self): ...
    @_typing.overload
    def __init__(self, *, absolute: str = ...): ...
    @_typing.overload
    def __init__(self, *, boundary: _typing.Literal['LEDGER_BEGIN', 0, 'LEDGER_END', 1] = ...): ...
    def __eq__(self, other_msg: _typing.Optional[_typing.Any]) -> bool: ...
    def __str__(self) -> str: ...
    def __unicode__(self) -> str: ...
    def MergeFrom(self, other_msg: LedgerOffset) -> None: ...
    def Clear(self) -> None: ...
    def SetInParent(self) -> None: ...
    def IsInitialized(self) -> bool: ...
    def ParseFromString(self, serialized: bytes) -> int: ...
    def MergeFromString(self, serialized: bytes) -> int: ...
    def SerializeToString(self, *, deterministic: bool = ...) -> bytes: ...
    def SerializePartialToString(self, *, deterministic: bool = ...) -> bytes: ...
    def ListFields(self) -> _typing.Sequence[_typing.Tuple[__FieldDescriptor, _typing.Any]]: ...
    def HasField(self, field_name: _typing.Literal["value", "absolute", "boundary"]) -> bool: ...
    def ClearField(self, field_name: _typing.Literal["value", "absolute", "boundary"]) -> None: ...
    def WhichOneof(self, oneof_group: _typing.Literal["value"]) -> _typing.Literal[None, "absolute", "boundary"]: ...
    def HasExtension(self, extension_handle: _typing.Any) -> bool: ...
    def ClearExtension(self, extension_handle: _typing.Any) -> None: ...
    def UnknownFields(self) -> _typing.Any: ...
    def DiscardUnknownFields(self) -> None: ...
    def ByteSize(self) -> int: ...
    def _SetListener(self, message_listener: _typing.Any) -> None: ...
