from slots_factory.tools.SlotsFactoryTools import (
    _slots_factory_hash,
    _slots_factory_setattrs,
)


def slots_from_type(type_, **kwargs):
    """Convienience function. Takes a type and kwargs, and instantiates the type
    with kwargs assigned to corresponding attributes.

    :param type_: type as derived from type_factory()
    :type type_: type
    :return: instance of the type, with assigned attributes
    :rtype: SlotsObject
    """
    instance = type_()
    _slots_factory_setattrs(instance, kwargs)
    return instance


def type_factory(_name, args):
    """function that returns a new Python type w/ __slots__, includes a __repr__

    :param _name: name of the new type
    :type _name: str
    :param args: iterable (list, tuple) of strings that correspond to the
    attributes of the objects
    :type args: List[str, str...]

    :return: type definition defined by function arguments
    :rtype: type
    """

    def __repr__(self):
        contents = ", ".join([f"{key}={getattr(self, key)}" for key in self.__slots__])
        return f"{self.__class__.__name__}({contents})"

    type_ = type(_name, (), {"__slots__": args, "__repr__": __repr__})
    return type_


def slots_factory(_name="SlotsObject", **kwargs):
    """Factory function for creating python objects with __slots__.

    :param _name: type name to tag to type definition, defaults to "SlotsObject"
    :type _name: str, optional
    :param **kwargs: key=value pairs of attribute values to be applied to the
    instance generated by the factory function

    :return: returns an instance of the type built for the python object
    :rtype: SlotsObject
    """
    id_ = _slots_factory_hash(_name, kwargs)
    type_ = slots_factory.__dict__.get(id_)
    if not type_:
        type_ = type_factory(_name, kwargs.keys())
        slots_factory.__dict__[id_] = type_
    instance = type_()
    _slots_factory_setattrs(instance, kwargs)
    return instance


def fast_slots(_name="SlotsObject", **kwargs):
    """Factory function for creating python objects with __slots__. Only uses
    name for caching, and makes a new object type when AttributeError is raised.

    :param _name: type name to tag to type definition, defaults to "SlotsObject"
    :type _name: str, optional
    :param **kwargs: key=value pairs of attribute values to be applied to the
    instance generated by the factory function

    :return: returns an instance of the type built for the python object
    :rtype: SlotsObject
    """
    type_ = fast_slots.__dict__.get(_name)
    if not type_:
        type_ = type_factory(_name, kwargs.keys())
        fast_slots.__dict__[_name] = type_
    try:
        instance = type_()
        _slots_factory_setattrs(instance, kwargs)
        return instance
    except AttributeError:
        del fast_slots.__dict__[_name]
        return fast_slots(_name, **kwargs)
